<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>printf関数 - 書式付き文字列出力</h2>



書式(フォーマット)を設定して文字列を出力するには<b>printf関数</b>を使用します。

<pre>
printf "Number %03d %.3f\n", 3, 3.14567;
</pre>

上記の出力結果は次のようになります。「3」という整数は3桁になるように左に0が埋められています。「3.14567」という小数点は「3.146」の小数点3桁に丸められています。

<pre>
Number 003 3.146
</pre>

「%03d」や「%.3f」は書式指定子と呼ばれます。書式指定子の詳細については<a href="/blog/20081001122296.html">sprintf関数</a>の解説をご覧ください。

<ul>
  <li>
    <a href="/blog/20081001122296.html">sprintf関数 - 文字列の書式指定</a>
  </li>
</ul>

<h3>ファイルへの出力</h3>

fprintf関数でも、<a href="/blog/20170404149131.html">print関数</a>と同じように、間接オブジェクト記法を使って、ファイルハンドルを指定して、出力することができます。

<pre>
# 標準エラー出力へ出力
printf STDERR "Number %03d %.3f\n", 3, 3.14567;

# ファイルハンドルを使ってファイルへ出力
printf $fh "Number %03d %.3f\n", 3, 3.14567;
</pre>

ファイルハンドル後ろにはカンマがないことに注意してください。

出力する方法の詳細については<a href="/blog/20170404149131.html">print関数</a>の解説をご覧ください。

<ul>
  <li>
    <a href="/blog/20170404149131.html">print関数 - 文字列の出力</a>
  </li>
</ul>

<h3>書式指定した文字列を変数に書き出す</h3>

printf関数は出力を行う関数ですが<a href="/blog/20081001122296.html">sprintf関数</a>を使うと、書式指定した文字列を変数に書き出すことができます。

<pre>
my $string = sprintf "Number %03d %.3f\n", 3, 3.14567;
</pre>

sprintf関数の詳細については以下をご覧ください。

<ul>
  <li>
    <a href="/blog/20081001122296.html">sprintf関数 - 文字列の書式指定</a>
  </li>
</ul>
