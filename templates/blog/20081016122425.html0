<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161123147990.html">
        <span itemprop="name">日付・時刻</span></a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>月末日を取得する</h2>



月末日を取得する関数のサンプルです。Time::Localモジュールのtimelocal関数を使って存在する日付を確かめています。

<pre>
use strict;
use warnings;

print "(1)月末日を取得する。\n";
my $end_of_month_200802 = end_of_month(2008, 2);
print "2008年2月の月末日は$end_of_month_200802日です。\n";

# 月末日を求める関数。
sub end_of_month {
  my ($year, $month) = @_;
  return if !$year || !$month;

  # Time::Local::timelocal関数は1900からの経過年を引数
  # にとるので、1900を引く。    
  $year -= 1900; 

  # Time::Local::timelocal関数は 1月は0,2月は1のように0から
  # 始まる月を引数に取るので、1を引く。
  $month--;

  # 月末日の候補はこの4つ
  my @days = (31, 30, 29, 28); 
    
  # 日付の存在チェック用に使用。
  require Time::Local; 
  
  for my $day (@days) {
    eval{
      # 存在しない日を指定すると例外が起こる。
      Time::Local::timelocal(0, 0, 0, $day, $month, $year);
    };
    # 例外が起こらなければ存在する日付。
    return $day unless $@;
  }
  return;
}
</pre>

(参考)<a href="/blog/20100312126967.html">eval</a>

<h3>コード解説</h3>

<h4>月末日の候補になる日付</h4>

月末日になるのは、28日、29日、30日、31日のどれかです。31日から順にチェックしていって存在する日付であればそれが月末日です。

<pre>
my @days = (31, 30, 29, 28);
</pre>

<h4>存在する日付のチェック</h4>

「存在する日付かどうかを判定する。」で解説したように、Time::Localモジュールのtimelocal関数で日付のチェックを行います。

31日から順に28日までチェックをしていきます。存在しない日付を指定すると例外が起こるので、例外が起こらなければそれが月末日です。

<pre>
require Time::Local; 
  
for my $day (@days) {
  eval{
    # 存在しない日を指定すると例外が起こる。
    Time::Local::timelocal(0, 0, 0, $day, $month, $year);
  };
  # 例外が起こらなければ存在する日付。
  return $day unless $@;
}
</pre>

