<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20110212130370.html">
      <span itemprop="name">ファイル入出力</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <span itemprop="name">here</span>
  </li>
</ol>
<h2>csvファイルを読み込んでPerlのハッシュの配列に変換する</h2>

csv形式のファイルを読み込んで、ハッシュの配列に変換するサンプルです。

ハッシュスライスという機能を積極的に使っているので、可読性はちょっと低いです。Perlをしばらく使って慣れていないと暗号に見えるかもしれません。前回のサンプルとほぼ構造は同じなので、違う部分だけを解説します。

<pre>
use strict;
use warnings;

# 引数の処理
my $file = shift;

unless ($file) {
    die "Usage: $0 file"; # 引数がないときは、使用方法を示して終了。
}

# csvの各列に対応するキーを作成
my $headers = [ 'name', 'age', 'country' ]; 

# ファイルを解析してcsv形式のデータを配列の配列に変換。
# ヘッダのキーも引数として渡す。
my @recs = parse_file($file, $headers);

# 出力( ハッシュの配列なので、forでたどる )
for my $items ( @recs ){
  # ハッシュスライスを利用して連結
  print join(',', @{$items}{@$headers} ) . "\n"; 
}

# ファイル解析用の関数( 今回は単に書き戻すだけだけれど・・ )
sub parse_file {
  my ($file, $headers) = @_;
  
  open(my $fh, "<", $file)
    or die "Cannot open $file for read: $!";
  
  # 複数のレコードを格納する配列へのリファレンスを準備
  my $recs = []; 
    while (my $line = <$fh>) {
      # 改行を取り除く
      chomp $line; 
      
      # データを格納するハッシュへのリファレンスを準備
      # ハッシュスライスを利用してヘッダ
      # に対応するキーに代入
      my $items = {}; 
      @{$items}{@$headers} = split(',', $line);

      # push関数の第1引数は配列なので、@$recsとデリファレンス。
      push @$recs, $items; 
    }
    close $fh;    
    wantarray ? return @$recs : return $recs; 
}
</pre>

以下は、csvデータのサンプルです。csvファイルを作って、スクリプトの第1引数に与えて実行してください。
<pre>
masao,10,Japan
taro,20,USA
rika,38,France
</pre>

<h3>コード解説</h3>

<h4>(1)ハッシュのキーの配列の作成</h4>

<pre>
my $headers = ['name', 'age', 'country'];
</pre>

ハッシュのキーを使うことで、前回は単に配列であったものに意味をつけて挙げます。csvファイルの一項目目はnameに、2項目目はageに、3項目目はcountory に対応します。

<h4>(2)ファイルを読み込んで、csv形式のテキストをハッシュの配列に変換する</h4>

<pre>
my @recs = parse_file($file, $headers);
</pre>

parse_fileは、ファイルを読み込んで、csv形式のテキストをハッシュの配列に変換する自作の関数です。入力と出力のイメージは以下のようになります。

<pre>
masao,10,Japan
taro,20,USA
rika,38,France

↓

@recs = (
  { name => 'masao', age => 10, country => 'Japan' },
  { name => 'taro', age => 20, country => 'USA' },
  { name => 'rika', age => 38, country => 'France' },
)
</pre>

<h4>(3)ハッシュの配列を出力する</h4>

<pre>
for my $items (@recs) {
  print join(',', @{$items}{@$headers}) . "\n"; 
}
</pre>

配列なので外側はforeachループになります。ハッシュへのリファレンスである$itemsを<a href="/blog/20081007122338.html">join関数</a>でカンマで連結して出力します。

<h4>(3)-1 ハッシュスライスの解説</h4>

難解なハッシュスライス @{$items}{@$headers} を解説します。

まず $items はハッシュへのリファレンスで。

<pre>
{ name => 'masao', age => 10, country => 'Japan' }
</pre>

のようになっています。

デリファレンスするには普通 %$items としますが、ハッシュスライスを利用できるようにデリファレンスしたいので

<pre>
@{$items}{ ハッシュのキーのリスト }
</pre>

とします。

<pre>
@{$items}{'name', 'age', 'country'}
</pre>

と書くと

<pre>
('masao', 10, 'Japan')
</pre>

が取得できます。

また、$headers には、['name', 'age', 'country'] が代入されていますので、@$headers とデリファレンスすると('name', 'age', 'country') が取得できます。

<pre>
@{$items}{@$headers} 
</pre>

という記述は、

<pre>
@{$items}{'name', 'age', 'country'}
</pre>
という記述と同じになり、
<pre>
('masao', 10, 'Japan')
</pre>
が取得できます。
<pre>
join(',', @{$items}{@$headers})
</pre>
として、カンマで結びつけて完成です。

<h4>(4)whileループでの処理</h4>

<a href="/blog/20100123126425.html">while文</a>を使って、Perlのデータ構造を作成しています。

<pre>
while (my $line = <$fh>) {
  # 改行を取り除く
  chomp $line; 

  # データを格納するハッシュへのリファレンスを準備
  my $items = {};
  # ハッシュスライスを利用してヘッダ
  # に対応するキーに代入
  @{$items}{@$headers} = split( ',', $line );

  # push関数の第1引数は配列なので、@$recs
  # とデリファレンス。
  push @$recs, $items; 
}
</pre>

<h4>(4)-1 ハッシュへのリファレンスを用意</h4>

<pre>
my $items = {}; # データを格納するハッシュへのリファレンスを準備
</pre>

配列の中に持たせるハッシュへのリファレンスを準備します。

<h4>(4)-2 ハッシュスライスを左辺において対応するキーに代入</h4>

<pre>
@{$items}{@$headers} = split(',', $line);
</pre>

上記で解説したことと同じです。左辺をハッシュスライスにして、そこにsplit関数で分割したリストを代入します。
