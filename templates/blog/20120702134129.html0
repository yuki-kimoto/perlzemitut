<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161005147566.html">
        <span itemprop="name">演算子</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>Defined-or演算子「//」 </h2>



Perl5.10からは、とても便利な<strong>Defined-or演算子</strong>「<b>//</b>」が導入されました。スラッシュが二つ続く演算子です。とっても検索しにくいので、早めに覚えておくのがいいと思います。近年の機能追加では、僕的には一番お勧めの機能ですね。

<pre>
# Defined-or演算子
//
</pre>

Defined-or演算子は、左辺が定義されている場合は、左辺値を返却し、未定義の場合は右辺値を返すという動作をします。

<pre>
# 右辺が代入される
my $value = undef // 'default'; # 'default'

# 左辺が代入される
my $value = 0 // 'default';     # 0
my $value = '' // 'default';    # ''
my $value = 'foo' // 'default'; # 'foo'
</pre>

これは、値が与えられなかった場合のデフォルト値を定義するのにとても便利です。

<pre>
my $name = $opts{name} // 'Ken';
</pre>

また<b>//=</b>という書き方も可能です。

<pre>
$value //= 'default';
</pre>

$valueが未定義だった場合だけ、$valueに'default'が代入されます。

<h3>Perl5.10以前はどうしていたか</h3>

以前はこの書き方を行うためには、<a href="/blog/20100219126425.html">defined関数</a>を使って次のように書く必要がありました。

<pre>
$value = 'default' unless defined $value;
</pre>

またこの書き方は、冗長なので、<b>||</b>演算子を使って次のように書く人も多くいました。

<pre>
$value ||= 'default';
</pre>

でもこの書き方は、$valueが0や空文字列だった場合にも'default'が代入されてしまうために、潜在的なバグをアプリケーションにもたらしていました。

Defined-or演算子が導入されたので、上記の二つの間の記述で悩まなくてよくなったのがうれしいですね。

