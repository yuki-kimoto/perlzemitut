<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>keys関数 - ハッシュのすべてのキーを取得</h2>



<strong>keys関数</strong>を使用すると、<a href="/blog/20161013147635.html">ハッシュ</a>のすべてのキーを取得することができます。取得したキーの順序は不定です。

<pre>
# すべてのキーを取得
my @keys = keys %hash;
</pre>

<a href="/blog/20180208151809.html">ハッシュのリファレンス</a>を引数として渡す場合は、デリファレンスする必要があります。

<pre>
# すべてのキーを取得。ハッシュのリファレンスの場合。
my @keys = keys %$hash;
</pre>

<h4>ハッシュのキーと値をすべて出力</h4>

keys関数を使って、ハッシュのすべてのキーとすべての値を出力してみます。

<pre>
# キーの辞書順で並べ替えて出力
my $scores = {Ken => 1, Mike => 2, Rika => 3};
for my $person (sort keys %$scores) {
  print "$person : $scores->{$person}\n";
}
</pre>

出力結果は以下のようになります。

<pre>
Ken : 1
Mike : 2
Rika : 3
</pre>

keys関数で得られるキーは順序が不定です。<a href="/blog/20100110126528.html">sort関数</a>と組み合わせると安定した順序で出力することができます。

<pre>
# キーの辞書順で並べ替えて出力
my $scores = {Ken => 1, Mike => 2, Rika => 3};
for my $person (sort keys %$scores) {
  print "$person : $scores->{$person}\n";
}
</pre>

さらに<a href="/blog/20080227120413.html">reverse関数</a>と組み合わせると、逆順で出力することができます。

<pre>
# キーの辞書順で並べ替えて出力
my $scores = {Ken => 1, Mike => 2, Rika => 3};
for my $person (reverse sort keys %$scores) {
  print "$person : $scores->{$person}\n";
}
</pre>

<h4>ハッシュの値をすべて取得する</h4>

ハッシュの値だけをすべて取得したい場合は<a href="/blog/20100222126425.html">values関数</a>を使用することができます。

<pre>
my @values = values %hash;
</pre>

<h4>キーと値のペアを順番に取得する</h4>

キーと値のペアを順番に取得したい場合はeach関数を使うことができます。

<pre>
# (キー, 値)のペアを順番に取得
my %age = (Ken => 19, Mike => 34);
while (my ($name, $age) = each %age) {
  ...
}
</pre>

<a href="/blog/20100123126425.html">while文</a>を使って、キーと名前のペアを順番に取り出しています。

keys関数、values関数、each関数という似ている関数がありますが、ハッシュの処理にkeys関数を使うのがお勧めです。keys関数は、パフォーマンスもよく、三つの中で非常に活用のしやすい関数です。


