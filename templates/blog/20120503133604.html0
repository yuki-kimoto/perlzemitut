<script>location.href="https://mojolicious.perlzemi.com/blog/20120503133604.html";</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20140319139520.html">
      <span itemprop="name">Mojolicious</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>URLの中でコロン(:)などの予約語を使う / Mojoliciousリファレンス</h2>



Mojoliciousのルーターは、細かい設定などができて、とても便利です。けれども、使ってみると<b>:</b>と<b>#</b>と<b>*</b>と<b>.</b>が予約語になっているということに気づくと思います。

これらの記号をURLの中で利用したい場合はあきらめるしかないのでしょうか(#はURLの中でフラグメントとしての意味を持つので除く)。以下のような指定では正しくパラメーターを取得することができません。

<pre>
# 間違い (/20101114:mainでパラメータを正しく取得できない)
get '/(:date):(:id)' => sub {
  my $self = shift;
  
  my $date = $self->param('date');
  my $id = $self->param('id');
  
  $self->render(text => "$date $id");
};
</pre>

コロンは予約語なので、このようなルートの指定はうまくいきません。

<h3>解決策として、正規表現による制約を利用する</h3>

けれども、Mojoliciousのルーターはきわめて柔軟なので、通常のルータと<a href="/blog/20100827127859.html">正規表現</a>を組み合わせることができます。

つまり、予約語を含むような部分は正規表現で記述すれば、すっきりとはいきませんが、解決できます。

<pre>
# 正しい (/20101114:mainでパラメータを正しく取得できる)
get '/:date_id' => [date_id => qr/[^:]+?:[^:]+/] => sub {
  my $self = shift;
  
  my $date_id = $self->param('date_id');
  my ($date, $id) = $date_id =~ /([^:]+?):([^:]+)/;
  
  $self->render(text => "$date $id");
};
</pre>

プレースホルダーを$data_idという名前にして、これに対して正規表現を使って制約を記述しています。<b>/20101114:main</b>にマッチするルートを記述できています。

後は、同じ正規表現を使って、分割するだけです。

