<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>kill関数 - プロセスにシグナルを送信する</h2>



<b>kill関数</b>を使用すると、プロセスを終了させることができます。

<pre>
kill(シグナル番号, プロセスID);
</pre>

第一引数には、シグナル番号を指定します。

第二引数には、プロセスIDを指定します。

戻り値は、kill関数が成功した数が返ってきます。

以下のように、リストにして、複数のプロセスIDを指定することもできます。

<pre>
kill(シグナル番号, プロセスID1, プロセスID2, ...);
</pre>

<h3>プロセスIDを取得する</h3>

kill関数の第二引数には、プロセスIDを指定しますが、このIDは、Linuxの場合であれば「ps -ef」を実行すれば、取得することができます。

たとえば、以下ではサーバープロセスが立ち上がっているのですが、左から2列目が、プロセスIDです。左から3番目は、親プロセスのプロセスIDです。

<pre>
kimoto   20220 25715  0 Dec25 ?        00:05:35 /home/kimoto/labo/perltweet/script/perltweet
</pre>

たとえば、左から2番目の「20220」という番号が、プロセスIDです。これがkillに指定するプロセスIDになります。

<h3>シグナルの番号を取得する</h3>

シグナルの一覧は、Configモジュールを読み込んで「$Config{sig_name}」で見ることができます。

<pre>
use Config;

use Data::Dumper;

print Dumper $Config{sig_name};
</pre>

1番目から順番に並んでいるので、この番号がシグナル番号になります。

<h3>シグナルが受信可能かどうかをチェックする</h3>

シグナル番号0は、特殊な番号で、対象のプロセスが、シグナルを受信可能かどうかをチェックすることができます。

<pre>
my $success = kill(0, プロセスID);
</pre>

これは、子プロセスが、実際に生存しているかをチェックしているのに利用することができます。

<h3>Windowsのforkの子プロセスに対してはうまく動かない</h3>

kill関数は、Linux/Unixベースのforkの子プロセスに対しては、うまく動きますが、Windowsのforkの子プロセスに対しては、正しく動かないことに注意してください。

kill関数の詳細についてはPerl公式ドキュメントの<a href="http://perldoc.jp/func/kill">kill関数</a>をご覧ください。
