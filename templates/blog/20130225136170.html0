<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">コーディングルール</span>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>Perlゼミのコーディングルール</h2>



Perlゼミは、以下のコーディングルールに従って作成されています。参考にどうぞ。

<h3>スタイル</h3>

<h4>インデントはスペースで2</h4>

<pre>
sub parse {
  my $str = shift;
  
  my $tree;
  ...

  return $tree;
}
</pre>

<h4>1行は79文字以内</h4>

1行は79文字以内で書いています。

<pre>
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
</pre>

<h3>スペース</h3>

<h4>括弧 () の内側にスペースを入れない</h4>

<pre>
my @nums = (2, 4, 5);
my %ages = (kimoto => 20, ken => 25);
my $total = (2 + 3) + 2;
while ($num == 2) { ... }
for (my $i = 4; $i < 5; $i++) { ... }
</pre>

<h4>ブラケット [] の内側にスペースを入れない</h4>

<pre>
my $nums = [2, 4, 5];
</pre>

<h4>ハッシュのリファレンスのブレース {} の内側にスペースを入れない</h4>

<pre>
my $ages = {kimoto => 20, ken => 25};
</pre>

<h4>サブルーチンが1行のときはブレースの内側にスペースをひとつ入れる</h4>

<pre>
sub ua { LWP::UserAgent->new }
</pre>

<h4>文が1行のときはブレースの内側にスペースをひとつ入れる</h4>

<pre>
if (条件) { $num = 1 }
else { $num = 2 }
</pre>

<h4>カンマの手前はスペースを入れず、カンマの後ろにスペースを入れる</h4>

<pre>
my @nums = (2, 4, 5);
</pre>

<h4>演算子の左右にはスペースを入れる</h4>

<pre>
2 + 3
2 - 3
2 * 3
2 / 3
2 ^ 5
2 == 3
2 != 3
2 < 3
2 > 3
'a' . 'b'
'a' eq 'b'
'a' ne 'b'
</pre>

<h4>if文, unless文, while文, for文の直後にはスペースを入れる</h4>

if文, unless文, <a href="/blog/20100123126425.html">while文</a>, for文の直後にはスペースを入れます。

<pre>
if (条件) {

}
unless (条件) {

}
for (条件) {

}
while (条件) {

}
</pre>

<h4>if, unless, while, forの開きブレース { の手前にはスペースを入れる</h4>

<pre>
if (条件) {

}
unless (条件) {

}
for (条件) {

}
while (条件) {

}
</pre>

<h4>スペースはいつもひとつ分</h4>

<pre>
my $num = 1;
my $title = 'Perl';
my $author = 'kimoto';
</pre>
イコール(=)をそろえるときれいに見えますが、修正の手間を考えるとめんどうなので、スペースはいつもひとつ分にしています。

<h4>複数行になるときは+2のインデントにする</h4>

<pre>
my $str = 'Hello Hello Hello Hello Hello Hello Hello Hello Hello '
  . 'Hello Hello Hello Hello Hello Hello Hello Hello Hello '
  . "Hello Hello Hello Hello Hello \n";
</pre>
文字列の位置でそろえると見やすいですが、空白の修正が手間がかかるので、空白で+2の位置に次の行をつなげるようにしています。

<h3>セミコロン</h3>

<h4>サブルーチンが1行のときはセミコロン ; をつけない</h4>

<pre>
sub ua { LWP::UserAgent->new }
</pre>

<h4>文が1行のときはセミコロン ; をつけない</h4>

<pre>
if (条件) { $num = 1 }
else { $num = 2 }
</pre>

<h3>文字列</h3>

<h4>文字列に変数を含まないときはシングルクォートを使う</h4>

<pre>
my $str = 'Hello World!';
</pre>

<h3>条件文・繰り返し文</h3>

<h4>untilを使わずにwhileを使う</h4>

<pre>
while (条件) {

}
</pre>

whileですべての条件文が書けて、他の言語でも一般的ですのでuntilは使わないで、whileを使っています。

<h4>do ～ whileは使わずにwhileを使う</h4>

<pre>
while (条件) {

}
</pre>

do ～ whileで書ける文はすべてwhileで書けて、doの中ではnextやlastが使えないという制約があるので、whileを使っています。

<h4>foreachを使わずforを使う</h4>

<pre>
for (条件) { ... }
</pre>

foreachはforの別名なので、短く書けるforを使っています。

<h3>モジュール・サブルーチン・メソッド</h3>

<h4>引数がひとつの関数には括弧をつけない</h4>

<pre>
my $num = int 5;
my $class = ref $obj;
</pre>

<h4>引数が不要な関数やメソッドには括弧をつけない</h4>

<pre>
my $time = time;
my $ua = LWP::UserAgent->new;
</pre>

<h4>直接オブジェクト構文を使う</h4>

<pre>
my $ua = LWP::UserAgent->new;
</pre>

間接オブジェクト構文は使っていません。

例外。

<pre>
print $fh "Hello";
printf $fh "Hello%d", 3;
</pre>

非常に一般的な書き方になっているため。

<h4>インポートする関数は明示する</h4>

<pre>
use Encode 'encode';
</pre>

例外。インポートの記述を行わないことが非常に一般的な場合。

<pre>
use Mojolicious::Lite;
use Time::Piece;
</pre>

<h4>インポートする関数がひとつのときはシングルクォートで囲う</h4>

<pre>
use Encode 'encode';
</pre>

<h4>インポートする関数が複数のときは文字列リスト演算子qw//を利用する</h4>

<pre>
use Encode qw/encode decode/;
</pre>

<h4>モジュールの読み込みにはいつもuseを使う</h4>

<pre>
use LWP::UserAgent;
use XML::Simple;
</pre>

例外。実行時にモジュールを読み込みたい場合はrequireを使う。

<pre>
if ($use_agent) {
  require LWP::UserAgent;
}
</pre>

けれども、ほとんどの場合はuseで十分に高速ですのでuseを使っています。

<h4>関数をインポートしたくない場合は「use モジュール名 ()」を使う</h4>

<pre>
use Carp ();
</pre>

<h3>コメント</h3>

<h4>コメントのフォーマットは#を一つ書いて、その後ろにひとつのスペースが続いて、その後ろにコメント</h4>

<pre>
# コメント
</pre>

<h4>コメントの先頭は、行の先頭か、複数のスペースだけ</h4>

<pre>
# コメント
  # コメント
</pre>

<h4>式よりもコメントを先に書く</h4>
<pre>
# 時間
my $time = time;
</pre>

<h3>配列・ハッシュ</h3>

<h4>配列の要素が1行に収まるときは1行で書く</h4>

<pre>
my @animals = ('cat', 'dog', 'mouse');
</pre>

<h4>配列の要素が1行に収まらないときは、各要素を1行ずつに書く</h4>

<pre>
my @animals = (
  'cat',
  'dog',
  'mouse',
  ...
);
</pre>

<h4>ハッシュの要素が1行に収まるときは1行で書く</h4>

<pre>
my %ages= (kimoto => 32, ken => 25, asuka => 50);
</pre>

<h4>ハッシュの要素が1行に収まらないときは、各要素を1行ずつに書く</h4>

<pre>
my %ages= (
  kimoto => 32,
  ken => 25,
  asuka => 50,
  ...
);
</pre>

<h3>コーディングルールの参考にどうぞ</h3>

これはPerlゼミのコーディングルールです。僕がPerlを書いてきて、こう書けば、一般的で、わかりやすく、美しく、短く書けると感じているものです。よいコーディングのための参考にどうぞ。

