<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>rand関数 - 乱数を生成する</h2>


<strong>乱数</strong>を生成するには<strong>rand関数</strong>を使用します。引数で指定した数より小さい0以上の数値がランダムで生成されます。

<pre>
$ret = rand 10;
</pre>

乱数とはランダムな数のことです。アプリケーションを作成するときは、時にランダムな数がほしいときがあります。ゲームでさいころを投げたりクイズを出したりするときに使われます。またデータを暗号化するときの鍵の作成などにも使われたりします。

rand関数に、たとえば「10」を指定すれば、「2.34...」「5.36...」「9.45...」など、0以上で、10より小さい数が、生成されます。

<h3>サンプル</h3>

rand関数で生成した乱数を利用するサンプルです。

<pre>
use strict;
use warnings;

print "(1)乱数を発生させる。( 10以下の整数 )\n";
for my $i (1 .. 10) {
  # rand関数は引数より小さいランダムな数を返却
  print "$i回目: " . int(rand 10) . "\n"; 
}
print "\n";

print "(2)ランダムに配列の要素を選択する。\n";
my @members = qw/aya toru kato kenji mina haruna kita michel kotaro/;
for my $i ( 1 .. 10 ) {
  # @members は配列の要素の個数
  print "$i回目: " . $members[int(rand scalar @members)] . "\n";
}                                       
</pre>

<h3>コード解説</h3>

<h4>乱数を生成する</h4>

<pre>
rand(10);
</pre>

乱数を生成するには=rand関数を使います。rand関数は0以上で引数で与えられた整数より小さいランダムな小数を返却します。

10 を与えた場合は、0以上で10より小さいランダムな小数が返却されます。10は含まれないことに注意しましょう。9.99999は返却される可能性がありますが、10は返却されません。

<pre>
int(rand 10);
</pre>

<a href="/blog/20080923122214.html">int関数</a>を使うと整数部のみが取得できます。int(rand 10) とすると 0 から 9 までの整数が取得できます。

<h4>ランダムに配列の要素を選択する</h4>

<pre>
my @members = qw/aya toru kato kenji mina haruna kita michel kotaro/;
$members[int(rand scalar @members)];
</pre>

<a href="/blog/20161012147627.html">配列</a>の要素をランダムに選択するには、rand関数に配列の要素数を与えて、int関数で整数部を取り出して、添え字にすればよいです。

配列の要素が10であれば、0～9までの乱数が生成され、対応する要素が返却されます。

<h3>再現性のある乱数を生成するには</h3>

再現性のある乱数を生成するには、rand関数を呼び出す前に<a href="/blog/20080908122097.html">srand関数</a>に適当な数値を与えます。

<pre>
# 乱数発生アルゴリズムを初期化
srand $seed;
rand $num;
</pre>

<h3>精度のよい擬似乱数を求めるには</h3>

Perlのrand関数よりも精度のよい乱数を求めたい場合はCPANで入手できる<a href="/blog/20080909122097.html">Math::Random::MTモジュール</a>を利用するのが便利です。

「メルセンヌツイスター法」という方法で、精度のよい乱数を求めます。
