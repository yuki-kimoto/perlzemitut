<h2>Dモジュール - データをエンコードし標準エラー出力へダンプ</h2>

Dモジュールは、データをエンコードし標準エラー出力へダンプするユーティリティ関数を提供します。

<h3>利用例</h3>

Dモジュールは、以下のように利用します。
<pre>
use utf8;
 
# du, dw, dn, dustr, dwstr, dnstr関数をexportします
use D;
 
# デコードされた文字列を含むデータ(リファレンス)を準備します
my $data = [{name => 'あ'}, {name => 'い'}];
 
# リファレンスデータをエンコード(UTF-8)し、標準エラー出力へダンプします。
du $data;

# リファレンスデータをエンコード(cp932)し、標準エラー出力へダンプします。
dw $data;

# リファレンスデータをエンコードせず、標準エラー出力へダンプします。
dn $data;

# 便利なOnelinerの例です。
use D;du $data;
use D;dw $data;
use D;dn $data;

# du関数の出力サンプルです。
[
  {
    'name' => 'あ'
  },
  {
    'name' => 'い'
  }
] at test.pl line 7.
</pre>

<h3>特徴</h3>
<ul>
<li>du, dw, dnなどの関数をエクスポートします。これらの関数名は、2文字のため'p' などのデバックコマンドと競合しないでください。</li>
<li>dustr, dwstr関数はリファレンスデータの全ての文字列をエンコードします。</li>
<li>duは'dump UTF-8'の短縮名です。</li>
<li>dwは'dump Windows cp932'の短縮名です。</li>
<li>dnは'dump no encoding'の短縮名です。</li>
<li>Data::DumperのDump関数を使用してデータをダンプします。</li>
<li>行番号とファイル名を標準エラーへ出力します。</li>
<li>ダンプされたデータのハッシュのキーでソートします。</li>
<li>Data::Dumperのデフォルトとは異なり、'$VAR1 ='を出力しません。</li>
</ul>

<h3>関数</h3>

<h4>du関数</h4>
リファレンスデータ内のすべての文字列をUTF-8にエンコードし、リファレンスデータをファイル名, 行番号とともに標準エラー出力へダンプします。
引数が文字列などの参照データでない場合も、リファレンスデータと同じ方法でダンプされます。
この関数はexportされます。

<pre>
use D;
my $data = [{name => 'あ'}, {name => 'い'}];
du $data;
</pre>

以下の例ではワンライナーを使用しています。全ての関数で利用できます。

<pre>
my $data = [{name => 'あ'}, {name => 'い'}];
use D;du $data;
</pre>

<h4>dw関数</h4>
リファレンスデータ内のすべての文字列をcp932にエンコードし、リファレンスデータをファイル名, 行番号とともに標準エラー出力へダンプします。
引数が文字列などの参照データでない場合も、リファレンスデータと同じ方法でダンプされます。
この関数はexportされます。

<pre>
use D;
my $data = [{name => 'あ'}, {name => 'い'}];
dw $data;
</pre>

<h4>dn関数</h4>
リファレンスデータ内のすべての文字列をエンコードせず、リファレンスデータをファイル名, 行番号とともに標準エラー出力へダンプします。
引数が文字列などの参照データでない場合も、リファレンスデータと同じ方法でダンプされます。
この関数はexportされます。

<pre>
use D;
my $data = [{name => 'あ'}, {name => 'い'}];
dn $data;
</pre>

<h4>dustr関数</h4>
この関数はUTF-8でエンコードされた文字列を返します。
この関数はexportされます。

以下の例は、UTF-8でエンコードされた文字列を取得しています。

<pre>
use D;
my $data = [{name => 'あ'}, {name => 'い'}];
my $str = dustr $data;
</pre>

<h4>dwstr関数</h4>
この関数はcp932でエンコードされた文字列を返します。
この関数はexportされます。

以下の例は、cp932でエンコードされた文字列を取得しています。

<pre>
use D;
my $data = [{name => 'あ'}, {name => 'い'}];
my $str = dwstr $data;
</pre>

<h4>dnstr関数</h4>
この関数はエンコードせずに文字列を返します。
この関数はexportされます。

以下の例は、エンコードされない文字列を取得しています。

<pre>
use D;
my $data = [{name => 'あ'}, {name => 'い'}];
my $str = dnstr $data;
</pre>

<h3>バグレポート</h3>
<a href="https://github.com/YoshiyukiItoh/D" target="_blank">https://github.com/YoshiyukiItoh/D</a>

<h3>関連項目</h3>
<ul>
<li><a href="https://metacpan.org/pod/Data::Dumper" target="_blank">Data::Dumper</a></li>
<li><a href="https://metacpan.org/pod/Carp" target="_blank">Carp</a></li>
<li><a href="https://metacpan.org/pod/Data::Recursive::Encode" target="_blank">Data::Recursive::Encode</a></li>
</ul>

<h3>元ページ(meta::cpan)</h3>
<a href="https://metacpan.org/pod/D" target="_blank">https://metacpan.org/pod/D</a>
