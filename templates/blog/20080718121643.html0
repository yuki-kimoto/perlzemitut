<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
        <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>open関数 - ファイルをオープンする</h2>



<strong>ファイルをオープン</strong>するには、<strong>open関数</strong>を使用します。第一引数は、取得したファイルハンドルを代入するための変数、第二引数はオープンモード、第三引数は、ファイル名です。ファイルのオープンが成功したときは、真が、失敗したときは偽が返ります。

<pre>
$ret = open($fh, $mode, $file);
</pre>

ファイルをオープンするときは次のような書き方が一般的です。これを基礎にして、その他の方法を学習してください。

<pre>
open(my $fh, "<", $file)
  or die "Can't open $file:$!";
</pre>

「<」というのは、オープンモードで、ファイルを読み込むときは、「<」を指定します。

<h3>よく使われるオープンモード</h3>

<table>
  <tr>
    <td>
      <span style="font-weight:bold;">オープンモード</span>
    </td>
    <td>
      <span style="font-weight:bold;">記号</span>
    </td>
  </tr>

  <tr>
    <td>
      読み込み
    </td>
    <td>
      <
    </td>
  </tr>

  <tr>
    <td>
      書き込み
    </td>
    <td>
      >
    </td>
  </tr>

  <tr>
    <td>
      追加書き込み
    </td>
    <td>
      >>
    </td>
  </tr>

</table>

オープン関数の第2引数に指定します。ダブルクォートかシングルクォートで囲んで文字列として渡します。

<h4>読み込みモード <</h4>

読み込みモードとは、ファイルを読み込み専用で開くモードのことです。ファイルが存在しない場合は、エラーになります。

<h4>書き込みモード ></h4>

書き込みモードとは、ファイルを書き込み専用で開くモードのことです。開いた瞬間にもともとのファイルの内容は削除されます。ファイルが存在しない場合は作成されます。

<h4>追加書き込みモード >></h4>

追加書き込みモードとは、ファイルを追加書き込み専用で開くモードのことです、現在のファイルの末尾から書き込みが始まります。ファイルが存在しない場合は作成されます。

<h4>ファイルを読み込んで、そのファイルに書き込みたいときはときはどうするか?</h4>

ファイルのオープンモードには、このほかに読み込み書き込み両用のモードというのがありますが、このモードは一般的な用途では使いません。読み書き両用モードは、ファイルを読み込んで、そのファイルに書き込む場合に利用すると思いがちですが違います。

のちのち詳しく説明しますが、この方法は非常に危険です。安全に行うには以下の手順を踏みます。

<ol>
  <li>
    ファイルを読み込む。
  </li>
  <li>
    一時ファイルに変更箇所を含んだすべての行を書き出す。
  </li>
  <li>
    元のファイルを削除する。
  </li>
  <li>
    一時ファイルを元のファイル名に変更する。
  </li>
</ol>

<h3>例外処理</h3>

ファイルをオープンしたときは、あわせて例外処理を行う必要があります。ファイルのオープンに失敗した場合は、その後の処理に移っても意味がないので、die関数を使って、プログラムを終了させます。「$!」には、ファイルのオープンが失敗した原因が代入されているので、それもエラーメッセージに含めておきましょう。

<pre>
open(my $fh, "<", $file)
  or die "Can't open $file:$!";
</pre>

<h3>2引数のオープン - 推奨されない</h3>

古いソースコードには、二引数のopen関数が利用されていることがありますが、現在は、三引数のopen関数を使うことが推奨されています。

<pre>
# 2引数のopen関数は非推奨
open($fh, "<$file");
</pre>

<h3>サンプル</h3>

open関数を使ったファイルオープンのサンプルです。

<pre>
use strict;
use warnings;

# 存在するファイル名を引数に渡してください。
my $file = shift; 

open(my $fh2, "<", $file)
  or die "Can't open file $file: $!";
</pre>

<h3>関連記事</h3>

<ul>
  <li>
    <a href="/blog/20080519121125.html">ファイルを作成する</a>
  </li>
</ul>
