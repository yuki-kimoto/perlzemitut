<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161022147731.html">
        <span itemprop="name">構文・文法</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <span itemprop="name">here</span>
  </li>
</ol>
<h2>デストラクタ - DESTROY</h2>



Perlは<a href="/blog/20131010138141.html">リファレンスカウント方式のGC</a>を持つプログラミング言語です。オブジェクトが解放されるのは、リファレンスカウントが0になった場合です。

DESTROYというメソッドを実装することで、リファレンスカウントが0になるタイミングで、デストラクタを実行することができます。

<pre>
sub DESTROY {
  # オブジェクトが解放されるときに実行される処理
  ...
}
</pre>

<h3>ファイルハンドルをデストラクタでクローズする</h3>

たとえば、ファイルを表現するFileクラスがあったとします。Fileクラスはfhフィールドに、<a href="/blog/20080718121643.html">open関数</a>でオープンしたファイルハンドルを保存しています。

これを、オブジェクトを開放するタイミングで<a href="/blog/20160312145776.html">close関数</a>を使ってクローズしたいとします。

そのような場合、次のようにデストラクタを記述します。

<pre>
package File;
use Carp 'croak';

# コンストラクタ
sub new {
  my ($class, $file) = @_;
  
  my $self = {};
  open my $fh, '<', $file
    or croak "Can't open $file: $!";
  $self->{fh} = $fh;
  
  return bless $self, $class;
}

# デストラクタ
sub DESTROY {
  my $self = shift;
  print "DESTROY";
  close $self->{fh};
}

package main;

{
  my $file = File->new('a.txt');
}
</pre>

参考: <a href="/blog/20161030147778.html">オブジェクト指向</a>、<a href="/blog/20100430127089.html">Carpモジュール</a>、<a href="/blog/20110128130016.html">スコープ</a>、<a href="/blog/20100419127089.html">mainパッケージ</a>

このスクリプトを実行すると「DESTROY」と表示されますが、これは、デストラクタが実行されていることを確認するために入れたものです。デストラクタが実行されており、ファイルハンドルはクローズされます。

<h3>デストラクタの主な用途</h3>

デストラクタが利用されることが多いのは、ファイルやデータベースなどの外部リソースをクローズするときです。Perlはオブジェクトが解放されるタイミングが明確なので、デストラクタ内でリソースのクローズ処理を書いておくことができます。

