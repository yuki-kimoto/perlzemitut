<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>pack関数 - データをバイナリ形式にパックする</h2>



<b>pack関数</b>は、データをさまざまなバイナリ形式にパックします。

<pre>
my $packed = pack($format, @values);
</pre>

第一引数はバイナリ形式のデータフォーマットを指定します。

第二引数以降は、値の<a href="/blog/20100308126967.html">リスト</a>を指定します。

戻り値は、パックされたデータです。

<h4>符号付32bitのバイナリ形式にパック</h4>

一つの例として、三つの整数を符号付32bitのバイナリ形式にパックするには次のようにします。

<pre>
my $packed = pack("l3", 7, 8, 9);
</pre>

まず、7, 8, 9というのは、Perlのデータです。これを符号付32bitのバイナリ形式にパックします。

「l」という記号が「符号付32bit整数」ということを表現しています。

その後に続く3というのが「3つの値」ということを表現しています。

フォーマットは「バイナリ形式を表す記号」と「長さ」によって構成されています。

全体では、7, 8, 9という数値を、符号付32bit整数が3つ続くバイナリ形式でパックするという意味になります。

今回の例では引数にリストを渡していますが<a href="/blog/20161012147627.html">配列</a>を渡すこともできます。

<pre>
my @values = (7, 8, 9);
my $packed = pack("l3", @values);
</pre>

<h4>浮動小数点を符号付doubleのバイナリ形式にパック</h4>

三つの浮動小数点を倍精度浮動小数点doubleのバイナリ形式にパックしてみましょう。

<pre>
my $packed = pack("d3", 0.5, 1.2, 5.4);
</pre>

倍精度浮動小数点は「d」という記号でパックすることができます。

<h4>バイナリデータを書き込むには</h4>

バイナリデータを書き込むにはファイルハンドルを<a href="/blog/20100204126425.html">binmode関数</a>を使ってバイナリモードにして、<a href="/blog/20170404149131.html">print関数</a>を使用します。

<pre>
# パックされたバイナリデータ
my $packed = pack("l3", 7, 8, 9);

# ファイルをオープン
open my $fh, '<', $file
  or die "Can't open $file:$!";

# バイナリモードに変更
binmode $fh;

# バイナリデータを書き込み
print $fh $data;

# ファイルをクローズ
close $fh;
</pre>

<h4>エンディアンを変更するには</h4>

ビッグエンディアンからリトルエンディアンの変換は「N」と「V」を使って行うことができます。以下の例は符号なし32bit整数の例です。

<pre>
# ビッグエンディアンの値をPerlの値に
my $value = unpack('N1', $value_big);

# Perlの値をリトルエンディアンに
my $value_litte = pack('V1', $value);
</pre>

<h4>パックされたデータを元に戻すには</h4>

パックされたデータを復元するにはunpack関数を使用します。

<h3>フォーマットの一覧</h3>

pack関数のフォーマットの一覧。

<table>
  <tr>
    <td>
      a
    </td>
    <td>
      任意のバイナリデータを含む文字列。ヌルパディングされます。
    </td>
  </tr>

  <tr>
    <td>
      A
    </td>
    <td>
      テキスト（ASCII）文字列。スペースで埋められます。
    </td>
  </tr>

  <tr>
    <td>
      Z
    </td>
    <td>
      ヌルで終了する（ASCIZ）文字列。ヌルで埋められます。
    </td>
  </tr>

  <tr>
    <td>
      b
    </td>
    <td>
      ビットストリング（vec関数のような各バイト内で昇順のビット順序）
    </td>
  </tr>

  <tr>
    <td>
      B
    </td>
    <td>
      ビットストリング（各バイト内の降順ビット順序）
    </td>
  </tr>

  <tr>
    <td>
      h
    </td>
    <td>
      16進文字列（低いニブルが最初）
    </td>
  </tr>

  <tr>
    <td>
      H
    </td>
    <td>
      16進文字列（高いニブルが最初）
    </td>
  </tr>

  <tr>
    <td>
      c
    </td>
    <td>
      符号付きchar（8ビット）値
    </td>
  </tr>

  <tr>
    <td>
      C
    </td>
    <td>
      符号なしchar（オクテット）値
    </td>
  </tr>

  <tr>
    <td>
      W
    </td>
    <td>
      符号なしのchar値（255を超える可能性があります）
    </td>
  </tr>

  <tr>
    <td>
      s
    </td>
    <td>
      符号付きshort（16ビット）値
    </td>
  </tr>

  <tr>
    <td>
      S
    </td>
    <td>
      符号なしのshort値
    </td>
  </tr>

  <tr>
    <td>
      l
    </td>
    <td>
      符号付きlong（32ビット）値
    </td>
  </tr>

  <tr>
    <td>
      L
    </td>
    <td>
      符号なしのlong値
    </td>
  </tr>

  <tr>
    <td>
      q
    </td>
    <td>
      符号付きクォード（64ビット）値
    </td>
  </tr>

  <tr>
    <td>
      Q
    </td>
    <td>
      符号なし4倍の値
    </td>
  </tr>

  <tr>
    <td>
      i
    </td>
    <td>
      符号付き整数値(少なくとも32ビット。C言語のint)
    </td>
  </tr>

  <tr>
    <td>
      I
    </td>
    <td>
      符号なし整数値
    </td>
  </tr>

  <tr>
    <td>
      n
    </td>
    <td>
       ネットワーク（ビッグエンディアン）順の符号なしshort（16ビット）
    </td>
  </tr>

  <tr>
    <td>
      N
    </td>
    <td>
       ネットワーク（ビッグエンディアン）順序で符号なしlong（32ビット）
    </td>
  </tr>

  <tr>
    <td>
      v
    </td>
    <td>
      「VAX」（リトル・エンディアン）順序の符号なしshort（16ビット）
    </td>
  </tr>

  <tr>
    <td>
      V
    </td>
    <td>
       VAX（リトルエンディアン）順序で符号なしlong（32ビット）
    </td>
  </tr>

  <tr>
    <td>
      j
    </td>
    <td>
       Perlの内部符号付き整数値（IV）
    </td>
  </tr>

  <tr>
    <td>
      J
    </td>
    <td>
       A Perlの内部符号なし整数値（UV）
    </td>
  </tr>

  <tr>
    <td>
      f
    </td>
    <td>
      ネイティブ形式の単精度浮動小数点数
    </td>
  </tr>

  <tr>
    <td>
      d
    </td>
    <td>
      ネイティブフォーマットの倍精度浮動小数点数
    </td>
  </tr>

  <tr>
    <td>
      F
    </td>
    <td>
      ネイティブ形式のPerl内部浮動小数点値（NV）
    </td>
  </tr>

  <tr>
    <td>
      D
    </td>
    <td>
      ネイティブフォーマットのlong-double精度のfloat型
    </td>
  </tr>

  <tr>
    <td>
      p
    </td>
    <td>
      ヌル終了文字列へのポインタ
    </td>
  </tr>

  <tr>
    <td>
      P
    </td>
    <td>
      構造体へのポインタ（固定長文字列）
    </td>
  </tr>

</table>

<h3>バイナリ形式の利点</h3>

<b>バイナリ形式の利点は、サイズが小さくなるということです。</b>Perlの数値は、内部的にはSVという構造体で表現されており、サイズは、構造体のフィールドが存在する分だけ大きいです。

もう一つの利点は、<b>連続した領域に配置される</b>ということです。32bitというのは、4バイトのことですから、4バイトが3つ連続して、12バイトで、整数3つを表現できます。

<h4>C言語とのデータのやり取り</h4>

C言語の配列はちょうどパックされたバイナリ形式と対応しています。以下の宣言は、パックされたバイナリ形式とちょうど同じデータ構造を持っています。

<pre>
int32_t values[3];
</pre>

<h3>さらに詳しく</h3>

pack関数についての詳細な情報は公式ドキュメントである<a href="http://perldoc.jp/docs/perl/5.8.8/perlpacktut.pod">pack入門</a>と<a href="http://perldoc.jp/func/pack">pack関数</a>を参考にしてください。

