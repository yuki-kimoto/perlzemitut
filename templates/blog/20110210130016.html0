<script>location.href='https://dbix-custom.perlzemi.com/blog/20110210130016.html';</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
        <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20170130148603.html">
      <span itemprop="name">データベース</span></a>
    <meta itemprop="position" content="3" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20110401130559.html">
      <span itemprop="name">DBIx::Custom</span></a>
    <meta itemprop="position" content="4" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>DBIx::Customの「select」メソッドで行を「選択」する</h2>




DBIx::Customで、行を選択するには<strong>select</strong>メソッドを使用します。

<pre>
my $result = $dbi->select(table => 'book');
</pre>

tableにテーブル名を指定します。以下のSQLが発行されます。

<pre>
select * from book;
</pre>

戻り値はDBIx::Custom::Resultオブジェクトで、このオブジェクトを使って行をフェッチすることができます。

<pre>
while (my $row = $result->fetch_hash) {
  print $row->{author} . "\n";
  print $row->{title} . "\n";
}
</pre>

<a href="/blog/20100123126425.html">while文</a>を使って、すべての行を1行づつ取り出しています。

<h3>selectメソッドのオプション</h3>

selectメソッドでは<a href="/blog/20110916131923.html">executeメソッドのすべてのオプション</a>を使用することができます。加えて以下のオプションを実装しています。

<h3>列名 column</h3>

列名を指定するにはcolumnオプションを使用します。

<pre>
my $result = $dbi->select(
  table => 'book',
  column => [
    'author',
    'title'
  ]
);
</pre>

あるいは、selectメソッドの第一引数として列名を指定することもできます。

<pre>
my $result = $dbi->select(['author', 'title'], table => 'book');
</pre>

次のようなSQLが発行されます。

<pre>
select author, title from book;
</pre>

<h4>列名の指定 column</h4>

columnオプションを使用するとさまざまな方法で列名を指定することができます。columnオプションを省略した場合はすべての列を表す「*」が列名として設定されます。

<b>(1)文字列</b>
文字列による指定です。

<pre>
column => 'author'
</pre>

<b>(2)配列のリファレンス</b>

配列のリファレンスで複数の列を指定できます。

<pre>
column => ['author', 'title']
</pre>

次のような列名が生成されます。

<pre>
author, title
</pre>

<b>(3) ハッシュリファレンス</b>

ハッシュのリファレンスを使ってテーブル名と列名のセットを記述できます。

<pre>
column => {book => [qw/title author]}
</pre>

次のような列名が生成されます。

<pre>
book.author as "book.author",
book.title as "book.title"
</pre>

エイリアスの部分はデータベースに応じて正しくエスケープされます。内部的にはcolumnメソッドを実行しています。

<b>(4)配列のリファレンスとハッシュのリファレンスの組み合わせ</b>
複数のハッシュリファレンスを配列のリファレンスの中に指定することもできます。

<pre>
column => [
  {book => [qw/title author]},
  {company => [qw/id name/]}
]
</pre>

次のような列名が生成されます。

<pre>
book.author as "book.author",
book.title as "book.title",
company.id as "company.id",
company.name as "company.name"
</pre>

次のように文字列とハッシュのリファレンスを配列のリファレンスの要素として混在させることもできます。

<pre>
column => [
  'title',
  'author',
  {company => [qw/id name/]}
]
</pre>

<h4>IDによる条件の指定 id</h4>

IDを使って条件を指定するにはidオプションを使用します。primary_keyが設定されている必要があります。

<pre>
id => 4
id => [4, 5]
</pre>

たとえば次のようなselectが実行されたとします。

<pre>|
$dbi->select(
  primary_key => ['id1', 'id2'],
  id => [4, 5],
  table => 'book'
);
</pre>

これは次のselectと同じです。

<pre>
$dbi->select(
  where => {id1 => 4, id2 => 5},
  table => 'book'
);
</pre>

<h4>Join句 join</h4>

join句を指定するにはjoinオプションを指定します。

<pre>
join => 'left outer join company on book.company_id = company_id'
join => [
  'left outer join company on book.company_id = company_id',
  'left outer join location on company.location_id = location.id'
]
</pre>

DBIx::Customのjoin句は少し特別な実装がされていて注意が必要です。selectメソッドはcolumn句とwhere句に指定されているテーブル名を検索して必要なjoinを探索します。必要でないjoin句については、SQLの中には含まれません。

つまりcolumnオプションあるいはwhereオプションでテーブル名が見つからなかった場合はjoin句が連結されないので注意してください。

たとえば次のようなselectを実行したとします。

<pre>
$dbi->select(
  table => 'book',
  column => ['company.location_id as location_id'],
  where => {'company.name' => 'Orange'},
  join => [
    'left outer join company on book.company_id = company.id',
    'left outer join location on company.location_id = location.id'
  ]
);
</pre>

上記ではcolumnオプションでcompanyというテーブル名が登場しています。一方locationというテーブル名はcolumnオプションにもwhereオプションにも登場していません。

ですのでjoin句の中でcompanyテーブルだけを連結する必要があり、locationテーブルは必要がありません。

それで次のようなSQLが生成されます。

<pre>
select company.location_id as location_id
from book
  left outer join company on book.company_id = company.id
where company.name = ?;
</pre>

selectメソッドはできるだけ自動的にテーブル名を探そうとしますが、複雑なjoin句の場合はできないこともあります。そのような場合は次のように文字列の代わりにハッシュのリファレンスを指定して、必要なテーブル名を明示します。

<pre>
$dbi->select(
  table => 'book',
  column => ['company.location_id as location_id'],
  where => {'company.name' => 'Orange'},
  join => {
    clause => 'left outer join location on company.location_id = location.id',
    table => ['company', 'location']
  }
);
</pre>

一般的に言えば、join句の中には二つのテーブル名「テーブル名.列名」という形で含まれている必要があります。ですからusing句などを利用する場合はテーブル名が「テーブル名.列名」という形になっていませんので、明示的に指定する必要があります。

またテーブル名の順番は重要です。連結元のテーブルは左側に、連結先のテーブルは右側にある必要があります。

<pre>
# 正しい例 連結元のbook(book.company_id)は左側に、連結先のcompany(company.id)は右側にある
left outer join company on book.company_id = company.id

# 間違った例 連結元のbook(book.company_id)は右側に、連結先のcompany(company.id)は左側にある
left outer join company on company.id = book.company_id
</pre>

通常のSQL文にとってはどちらも意味が同じですが、DBIx::Customにとっては解析結果が異なります。

少し難しい解説でしたが、joinがそのまま記述できることと、必要なjoinだけを選んでくれるという利点はとても大きなものです。またjoin句を自然に記述すれば、解析が失敗するということはまずないと思います。

<h4>パラメーターの指定 param</h4>

where句よりも前に出てくる名前付きプレースホルダーのために値を指定するにはparamオプションを使用します。

<pre>
param => {'table2.key3' => 5}
</pre>

たとえばjoin句の中で名前付きプレースホルダーを利用したい場合に利用できるでしょう。

<pre>
join  => ['inner join (select * from table2 where table2.key3 = :table2.key3)' . 
          ' as table2 on table1.key1 = table2.key1']
</pre>

<h4>プレフィックス prefix</h4>

selectの直後に文字列を追加したい場合はprefixを使用します。

<pre>
prefix => 'SQL_CALC_FOUND_ROWS'
</pre>

たとえば以下のようなSQLを発行することができます。

<pre>
select SQL_CALC_FOUND_ROWS * from book;
</pre>

<h4>テーブル名 table</h4>

テーブル名を指定するにはtableオプションを使用します。
<pre>
table => 'book'
</pre>

<h4>Where句 where</h4>

Where句を記述するにはwhereオプションを使用します。
<pre>
where => {author => 'Ken', 'title' => 'Perl'}
where => [
  ['and', ':author{=}', ':title{like}'],
  {author => 'Ken', title => '%Perl%'}
]
</pre>

<h3>whereオプション</h3>

whereオプションですが、次のようにさまざまな形式で指定することが可能です。

<h4>ハッシュリファレンスによる指定</h4>

ハッシュリファレンスでWhere句を指定した場合は、等価(=)による比較をandで結んだ条件になります。

<pre>
where => {author => 'Ken', 'title' => 'Perl'}
</pre>

上記の指定は次のようなWhere句になります。

<pre>
where author = :author and title = :title
</pre>

「Ken」と「Perl」は名前付きプレースホルダー(:author, :title)に埋め込まれます。

値として配列のリファレンスを指定すると<b>in</b>を使った記述が可能です。

<pre>
where => {author => ['Ken', 'Taro'], 'title' => 'Perl'}
</pre>

上記は次のようなWhere区になります。

<pre>
where author in (:author, :author) and title = :title
</pre>

対応する値は名前付きプレースホルダーに埋め込まれます。

<h4>DBIx::Custom::Whereオブジェクトによる指定</h4>

DBIx::Custom::Whereオブジェクトを指定することができます。

<pre>
where => $where_obj
</pre>

DBIx::Custom::Whereオブジェクトについては<a href="/blog/20110924132031.html">動的なWhere句の生成</a>を見てください。

<h4>配列のリファレンスによる指定</h4>

配列のリファレンスによる指定を行うと、DBIx::Custom::Whereオブジェクトを生成することなしに、同様の指定を行うことができます。

<pre>
where => [
  ['and', ':author{=}', ':title{like}'],
  {author => 'Ken', title => '%Perl%'}
];
</pre>

上記は次の記述と同じ意味を持ちます。

<pre>
where => $dbi->where(
  clause => ['and', ':author{=}', ':title{like}'],
  param => {author => 'Ken', title => '%Perl%'}
);
</pre>

<h4>文字列による指定</h4>

文字列で指定した場合は、単純なWhere句が生成されます。

<pre>
where => 'title is null'
</pre>

上記の指定は次のようなWhere句になります。

<pre>
where title is null
</pre>

<h3>行の件数を取得する - count</h3>

行の件数を取得するには<strong>count</strong>メソッドを使用します。

<pre>
my $count = $dbi->count(table => 'book', where => {title => 'Perl'});
</pre>

指定できるオプションはselectメソッドと同じものです。columnには自動的に「count(*)」が設定されます。

現在はcountメソッドよりもselectメソッドを使う方法がおすすめです。

<pre>
my $count = $dbi->select(
  'count(*)',
  table => 'book',
  where => {title => 'Perl'}
)->value;
</pre>

