<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>glob関数 - ディレクトリに含まれるファイル一覧を取得</h2>



<strong>glob</strong>関数を使用すると、ファイル一覧を取得することができます。

<pre>
my @all_files = glob "*"; 
</pre>

ファイル一覧を取得するには、glob 演算子を使います。対象は、カレントディレクトリのファイル(ディレクトリを含む)になります。別のディレクトリのファイル一覧を取得したときは<a href="/blog/20080528121197.html">chdir関数</a> で、カレントディレクトリを移動するか、相対パスあるいは、絶対パスで、表現します。

<h3>glob の引数の表現例</h3>

<table>
  <tr>
    <td>
      "*"
    </td>
    <td>
      .で始まらない、すべてのファイル
    </td>
  </tr>

  <tr>
    <td>
      "*.txt"
    </td>
    <td>
      .txt で終わるファイル
    </td>
  </tr>

  <tr>
    <td>
      "*.txt *.pl
    </td>
    <td>
      .txt あるいは、 .pl で終わるファイル( .txt と .pl の間に空白があります )
    </td>
  </tr>

  <tr>
    <td>
      "* .*"
    </td>
    <td>
      すべてのファイル( * と .* の間に空白があります )
    </td>
  </tr>

  <tr>
    <td>
      "lib/*
    </td>
    <td>
      libディレクトリ以下のファイル
    </td>
  </tr>

  <tr>
    <td>
      c:/dir/*
    </td>
    <td>
      絶対パスで指定
    </td>
  </tr>

</table>

空白で、区切ると複数のパターンを指定できます。相対パス以外にも、絶対パスも使うことができます。* はUnixのシェルで用いられるワイルドカードのひとつです。glob関数は、シェルのワイルドカード展開の規則にしたがって、*を含むファイル名を展開します。

<h3>サンプル</h3>

glob関数のサンプルです。

<pre>
use strict;
use warnings;

# カレントディレクトリのファイル一覧を取得する。
# glob

print "1: カレントディレクトリのファイル一覧を取得する。\n";
# * は、. で始まらないすべてのファイルを表現
my @all_files = glob "*";
print join("\n", @all_files) . "\n\n";

print "2: .txt で終わるファイル一覧を取得する。\n" ;
my @text_files = glob "*.txt";
print join("\n", @text_files) . "\n\n";

print "3: .txt と .pl で終わるファイル一覧を取得する。\n";
# 複数パターンある場合は空白で区切る
my @text_and_pl_files = glob "*.txt *.pl"; 
print join("\n", @text_and_pl_files) . "\n\n";

print "4: 通常ファイルの一覧を取得する。\n";
my @normal_files = glob "*";
# 複雑なことをしたいときは,"*" で
# すべてのファイルを取得してから、
# grep で選別する。
@normal_files = grep{ -f $_ } @normal_files; 
print join("\n", @normal_files) . "\n\n";
</pre>

参考:<a href="/blog/20081007122338.html">join関数</a>

実行結果

<pre>
1: カレントディレクトリのファイル一覧を取得する。
a.exe
a.pl
aaa
DBIx-Custom
dir_20080530_4944
hello.exe
hello.pl
lib
yuki-kimoto-Portablebbs-b578c1d
yuki-kimoto-Portablebbs-b578c1d.zip

2: .txt で終わるファイル一覧を取得する。


3: .txt と .pl で終わるファイル一覧を取得する。
a.pl
hello.pl

4: 通常ファイルの一覧を取得する。
a.exe
a.pl
hello.exe
hello.pl
yuki-kimoto-Portablebbs-b578c1d.zip
</pre>

<h3>Windowsではglob関数は正しく動作しないのでディレクトリハンドルを使う</h3>

ファイル一覧を取得するときにglob関数を使うことが多いと思います。けれども今のところはglob関数はWindowsでは正しく動かないと見ておいたほうがよいでしょう。ディレクトリ名に特定の文字列を含む場合は、ファイル一覧を正しく取得することができません。

ですので、glob関数を使う代わりに、以下のようなファイル名の一覧を取得する関数を作るのがよいでしょう。ディレクトリハンドルをオープンするには<a href="/blog/20171002150691.html">opendir関数</a>、ディレクトリの読出しには<a href="/blog/20171003150703.html">readdir関数</a>を使用します。

<pre>
sub get_files {
  my $dir = shift;
  
  opendir my $dh, $dir
    or die qq/Can't open directory "$dir": $!/;
  
  my @dirs = map { "$dir/$_" } grep { $_ ne '.' && $_ ne '..' } readdir $dh;
  
  return @dirs;
}
</pre>

使い方

<pre>
my @files = get_files('c:/pictures');
</pre>
