<script>location.href="https://mojolicious.perlzemi.com/blog/20120513133704.html";</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20140319139520.html">
      <span itemprop="name">Mojolicious</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>Mojo::UserAgentでWeb上のコンテンツをファイルとして保存する /  Mojolicious</h2>




Mojo::UserAgentでWeb上からファイルを取得して、保存してみましょう。次のように記述します。

<pre>
use Mojo::UserAgent;

my $ua = Mojo::UserAgent->new;
my $file = 'google.html';
my $url = 'http://www.google.co.jp/';
$ua->get($url)->res->content->asset->move_to($file);
</pre>

Mojo::UserAgentにはdownloadするためのメソッドがありませんので、自力でがんばる必要があります。

<ol>
  <li>
    <b>get</b>メソッドでHTTPリクエストを発行する。戻り値は<b>Mojo::Transaction::HTTP</b>オブジェクト。
  </li>
  <li>
    <b>res</b>メソッドでHTTPレスポンスを取得。戻り値は、<b>Mojo::Message::Request</b>オブジェクト。
  </li>
  <li>
    <b>content</b>メソッドで、コンテンツを取得。戻り値は<b>Mojo::Content::Single</b>オブジェクト。
  </li>
  <li>
    <b>asset</b>メソッドで、コンテンツが実際に持っている内容を取得。戻り値は<b>Mojo::Asset::Memory</b>オブジェクトか<b>Mojo::Asset::File</b>オブジェクト。
  </li>
  <li>
    <b>move_to</b>メソッドで、ファイルに保存。
  </li>
</ol>

という流れになります。ちょっと複雑かな。

<h3>Test::Mojoからファイルの保存を行う場合。</h3>

Mojoliciousのテストをするときに、ファイルをダウンロードしたい場合がありますね。そういう場合は以下のように記述します。一時ディレクトリの記述もいれてみました。

<pre>
use Test::Mojo;
use File::Temp 'tempdir';
use YourApp;

my $app = YourApp->new;
my $t = Test::Mojo->new($app);
my $tmpdir = tempdir(CLEANUP => 1);
my $tmpfile = "$tmpdir/tmp.tar.gz";

$t->get_ok('http://somehost.com');
  ->tx->res->content->asset->move_to($tmpfile);
</pre>

仕組みは同じですが、Test::Mojoから<b>tx</b>メソッドを使って、<b>Mojo::Transaction::HTTP</b>を取得している点が異なりますね。

