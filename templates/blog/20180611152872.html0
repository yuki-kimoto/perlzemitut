<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>scalar関数 - スカラコンテキストで評価</h2>



<b>scalar関数</b>を使用すると、<a href="/blog/20180531152777.html">スカラコンテキスト</a>を強制することができます。

<pre>
# スカラコンテキストで評価
scalar 実行文
</pre>

たとえば<a href="/blog/20161012147627.html">配列</a>をスカラコンテキストで評価すると配列の個数が取り出せますが、scalar関数を使って明示的に書くと以下のようになります。

<pre>
# 配列の個数
my $count = scalar @values;
</pre>

<h4>scalar関数は使わなくってよい?</h4>

プログラムを工夫して書けばscalar関数を使わないでプログラムを書くことができます。

たとえば、<a href="/blog/20101130129876.html">サブルーチン</a>の引数に値を渡す場合は、変数を経由して渡すようにします。

<pre>
# 配列の個数を直接渡す
foo(scalar @values);

# 配列の個数をスカラ変数に保存してから渡す
my $count = @values;
foo($count);
</pre>

変数名を上手につけると自己説明的になって、プログラムが読みやすくなります。多くの場合は、scalar関数を使うよりは、変数に一度代入してから、他の場所で使うのがお勧めです。
