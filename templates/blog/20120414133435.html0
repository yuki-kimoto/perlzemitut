<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">書籍案内</span>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>【書籍案内】かんたんプログラミングCGI/Perl 木本裕紀著</h2>



技術評論社から「かんたんプログラミング」シリーズとして発売されている書籍のCGI/Perl版です。

[asin:4774139289:detail]

この書籍は現時点で、現代的なPerlで記述されている唯一のCGIの本だと思われます。CGIについて書いた、Perlの書籍というのは、Perl4が流行していた時代のあまり推奨されない記述がたくさん含まれている本がほとんどです。

モダンPerlを意識して書かれているCGIの本はまずないと思われます。

CGIの解説については、プロトコルの細部についてではなくて、CGIプロトコルを使ってWebアプリケーションを開発するときに、内部でどのようなことが行われるかということをイメージしやすいような解説になっています。

「ブラウザ -> HTTPリクエスト発行 -> Webサーバー -> CGIスクリプト -> HTTPレスポンス生成-> Webサーバー -> ブラウザ」という流れが理解できる解説になっています。

CGI自体は、処理速度が出ないという理由のために、主流ではなくなってしまいましたが、Webアプリケーションがどのように動いているかを理解する助けとしては、有用だと思います。

またさくらのレンタルサーバーでCGIを配置して実際に実行する部分を詳しく解説しています。FFFTPとかの解説も丁寧にしていて、実際にCGIをサーバー上に配置するときに、できるだけつまづかないように考慮が払われています。

この書籍には章を丸まるとって、純粋な「Perl入門」が含まれています。この章はCGIスクリプトとは、関係がないので、モダンPerlの入門書として読んでいただけるかと思います。業務に役だつPerlの第二章ではPerlの基礎を解説していますが、これを丁寧に解説してあると考えていただけるとイメージしやすいのではないかと思います。

また本書の中で利用しているサンプルコードをWebから<a href="http://gihyo.jp/book/2009/978-4-7741-3928-9/support">ダウンロード</a>して試すこともできます。

初めての著作なので、いたらないところが、けっこうあり誤字もたくさんあります。

<h3>Webフレームワークにチャレンジ</h3>

CGIスクリプトでWebアプリケーションを書くという手法は、現在では古いものになっています。Webフレームワークを使ってWebアプリケーションにもチャレンジしてみましょう。

簡単プログラミングCGI/Perlに掲載されたWebアプリケーションのサンプルを、Mojoliciousというフレームワークで書き直してみました。

<ul>
  <li>
    <a href="/blog/20100109126494.html">ひとことメッセージ掲示板(Mojolicious::Liteバージョン)</a>
  </li>
  <li>
    <a href="/blog/20100113126494.html">画像掲示板(Mojolicious::Liteバージョン)</a>
  </li>
  <li>
    <a href="/blog/20100115126494.html">簡易検索アプリケーション(Mojolicious::Liteバージョン)</a>
  </li>
</ul>

<h3>かんたんプログラミング CGI/Perl 正誤表</h3>

「かんたんプログラミング CGI/Perl」の正誤表を作成しました。自分で発見したものと教えてもらったものについて記載してあります。かなりの間違いを含んでいます。サンプルコードについてはほとんどは動くと思います。

<table>
  <tr>
    <td>
      ページ
    </td>
    <td>
      場所
    </td>
    <td>
      誤
    </td>
    <td>
      正
    </td>
  </tr>

  <tr>
    <td>
      P18
    </td>
    <td>
      下段
    </td>
    <td>
      Accept-Charsetの解説でUTF-8がutf-8になってます
    </td>
    <td>
      UTF-8が正しいです
    </td>
  </tr>

  <tr>
    <td>
      P24
    </td>
    <td>
      中段
    </td>
    <td>
      「POSTメソッドで送信されたメッセージボディのデータが～」が重複して記入されています
    </td>
    <td>
      重複を取り除く
    </td>
  </tr>

  <tr>
    <td>
      P31
    </td>
    <td>
      上段
    </td>
    <td>
      デフォルトでは「I Accept …」にチェックが入っています。
    </td>
    <td>
      デフォルトでは「I Accespt …」にチェックが入っていません
    </td>
  </tr>

  <tr>
    <td>
      P34
    </td>
    <td>
      上段
    </td>
    <td>
      Webアプリケーションは「HTML」「HTTP」「CGI」「Perl」の４つの要素で構成されており、それぞれの知識が必要不可欠です。
    </td>
    <td>
      Webアプリケーションは複数の技術で構成されており、「HTML」「HTTP」「CGI」「Perl」について学習する必要があります。
    </td>
  </tr>

  <tr>
    <td>
      P34
    </td>
    <td>
      中段
    </td>
    <td>
      HTTPをCGIスクリプトのように書くことはありませんが、記述されている情報をスクリプト内で利用することができます。
    </td>
    <td>
      HTTPリクエストのヘッダ情報はCGIスクリプト内で利用することができます。
    </td>
  </tr>

  <tr>
    <td>
      P34
    </td>
    <td>
      下段
    </td>
    <td>
      WebサーバからCGIスクリプトへデータを渡す方法を「標準入力」、CGIスクリプトからWebサーバへデータを渡す方法を「標準出力」といいます。
    </td>
    <td>
      WebサーバからCGIスクリプトへデータを渡すには「標準入力」を利用し、CGIスクリプトからWebサーバへデータを渡すには「標準出力」を利用します。
    </td>
  </tr>

  <tr>
    <td>
      P59
    </td>
    <td>
      中段
    </td>
    <td>
      「8.Perlの実行パスの記述が間違っている」の位置が異なる
    </td>
    <td>
      P056の「7.CGIスクリプトのパーミッション」の直後の位置が正しいです
    </td>
  </tr>

  <tr>
    <td>
      P62
    </td>
    <td>
      上段
    </td>
    <td>
      画面に表示するする
    </td>
    <td>
      画面に表示する
    </td>
  </tr>

  <tr>
    <td>
      P64
    </td>
    <td>
      中段
    </td>
    <td>
      Unixの拡張したOSやLinux系のOSを含みます
    </td>
    <td>
      Unixを拡張したOSやLinux系のOSを含みます
    </td>
  </tr>

  <tr>
    <td>
      P74
    </td>
    <td>
      上段
    </td>
    <td>
      不等号とは異なり「=」に「等しい」という意味はありません。
    </td>
    <td>
      数学の等号記号とは異なり「=」に「等しい」という意味はありません。
    </td>
  </tr>

  <tr>
    <td>
      P75
    </td>
    <td>
      上段
    </td>
    <td>
      意味がわかる名前にましょう。
    </td>
    <td>
      意味がわかる名前にしましょう。
    </td>
  </tr>

  <tr>
    <td>
      P79
    </td>
    <td>
      下段
    </td>
    <td>
      l<という変な記号があります
    </td>
    <td>
      削除しわすれています
    </td>
  </tr>

  <tr>
    <td>
      P83
    </td>
    <td>
      中段
    </td>
    <td>
      「配列の要素に添え字を使ってアクセスすることができます。～」の位置が間違っています。
    </td>
    <td>
      中見出しの「配列の要素」の直後が正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P84
    </td>
    <td>
      中段
    </td>
    <td>
      このように配列変数をスカラ変数に代入することを、スカラコンテキストといいます
    </td>
    <td>
      解説が間違っているので、この文は削除するのが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P86
    </td>
    <td>
      中段
    </td>
    <td>
      中見出し「配列に配列を追加する」
    </td>
    <td>
      「配列に複数の要素を追加する」が正しいです
    </td>
  </tr>

  <tr>
    <td>
      P86
    </td>
    <td>
      中段
    </td>
    <td>
      ひとつの要素だけでなく、配列の追加にも対応しています
    </td>
    <td>
      ひとつの要素だけでなく、複数の要素の追加にも対応しています
    </td>
  </tr>

  <tr>
    <td>
      P87
    </td>
    <td>
      中段
    </td>
    <td>
      ソースコード @nums = reverse sort {$b <=> $a} @nums
    </td>
    <td>
      reverseはいらないです。@nums = sort {$b <=> $a} @nums が正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P88
    </td>
    <td>
      中段
    </td>
    <td>
      ソースコード ($name, $age) = ('Ken', 'Taro')
    </td>
    <td>
      ($name, $age) = ('Ken', 18) が正しいです
    </td>
  </tr>

  <tr>
    <td>
      P85
    </td>
    <td>
      上段
    </td>
    <td>
      ソースコードのif分に閉じブレースがない
    </td>
    <td>
      閉じブレースを追加
    </td>
  </tr>

  <tr>
    <td>
      P86
    </td>
    <td>
      下段
    </td>
    <td>
      配列の要素の1番目から2つの要素を取り出す例です。
    </td>
    <td>
      配列の要素の2番目(添え字で1)から2つの要素を取り出す例です。
    </td>
  </tr>

  <tr>
    <td>
      P87
    </td>
    <td>
      上段
    </td>
    <td>
      配列の要素の1番目の位置から2つの要素を置換する例です。
    </td>
    <td>
      配列の要素の2番目(添え字で1)から2つの要素を置換する例です。
    </td>
  </tr>

  <tr>
    <td>
      P89
    </td>
    <td>
      下段
    </td>
    <td>
      ソースコードの最後に「print $animal_join;」が抜けています
    </td>
    <td>
      print $animal_join;を追加
    </td>
  </tr>

  <tr>
    <td>
      P089
    </td>
    <td>
      下段
    </td>
    <td>
      joinの解説を行っていないのにjoinを使用しています。
    </td>
    <td>
      3章5節 「数値演算と文字列操作」で解説されています。
    </td>
  </tr>

  <tr>
    <td>
      P89
    </td>
    <td>
      中段
    </td>
    <td>
      ソースコード 18行目 my $last_animals = pos;
    </td>
    <td>
      my $last_animals = pop @animals が正しいです
    </td>
  </tr>

  <tr>
    <td>
      P102
    </td>
    <td>
      上段
    </td>
    <td>
      その位置が何文字目から始まっているのかを返却します
    </td>
    <td>
      戻り値としてその位置を返却します
    </td>
  </tr>

  <tr>
    <td>
      P091
    </td>
    <td>
      下段
    </td>
    <td>
      国際標準後
    </td>
    <td>
      国際標準語
    </td>
  </tr>

  <tr>
    <td>
      P105
    </td>
    <td>
      下段
    </td>
    <td>
      >ll というゴミが残っています。
    </td>
    <td>
      取り除くのが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P108
    </td>
    <td>
      上から14行目
    </td>
    <td>
      論理和（何々 かつ 何々）
    </td>
    <td>
      論理和（何々 または 何々）
    </td>
  </tr>

  <tr>
    <td>
      P110
    </td>
    <td>
      下段
    </td>
    <td>
      スクリプトの実行方法抜けています
    </td>
    <td>
      引数を指定してスクリプトを実行してみましょう。perl sample_3_6 1 2 を追加するのが正しいです
    </td>
  </tr>

  <tr>
    <td>
      P111
    </td>
    <td>
      上から7行目
    </td>
    <td>
      １番目の要素に「0」が
    </td>
    <td>
      １番目の要素に「1」が
    </td>
  </tr>

  <tr>
    <td>
      P111
    </td>
    <td>
      下から3行目
    </td>
    <td>
      $num[0] $num[1]
    </td>
    <td>
      $nums[0] $nums[1]
    </td>
  </tr>

  <tr>
    <td>
      P114
    </td>
    <td>
      下段
    </td>
    <td>
      「$animal」が「cat」の場合には
    </td>
    <td>
      「$animal」が「dog」の場合には
    </td>
  </tr>

  <tr>
    <td>
      P123
    </td>
    <td>
      上段
    </td>
    <td>
      samplw_3_8.pl
    </td>
    <td>
      sample_3_8.pl
    </td>
  </tr>

  <tr>
    <td>
      P145
    </td>
    <td>
      上段
    </td>
    <td>
      close $fh
    </td>
    <td>
      close $fh;
    </td>
  </tr>

  <tr>
    <td>
      P148
    </td>
    <td>
      上段
    </td>
    <td>
      少し進んだ話題ですが、ぜひ知っておいたほうがよい
    </td>
    <td>
      少し進んだ話題ですが、ぜひ知っておいたほうがよいことがあります。
    </td>
  </tr>

  <tr>
    <td>
      P157
    </td>
    <td>
      中段
    </td>
    <td>
      windwos perl nmake
    </td>
    <td>
      windows perl nmake
    </td>
  </tr>

  <tr>
    <td>
      P158
    </td>
    <td>
      中段
    </td>
    <td>
      完結な内容にしましょう
    </td>
    <td>
      簡潔な内容にしましょう
    </td>
  </tr>

  <tr>
    <td>
      P158
    </td>
    <td>
      上段
    </td>
    <td>
      PerlスクリプトはWebブラウザからではなく、コマンドプロンプトかシェルからスクリプトの存在するディレクトリを指定し、Perlコマンドから実行します
    </td>
    <td>
      Perlスクリプトはコマンドプロンプトやシェルなどからperlコマンドを使って実行します
    </td>
  </tr>

  <tr>
    <td>
      P158
    </td>
    <td>
      上段
    </td>
    <td>
      変数とは値を納めることができる仕組みのことです。プログラムが終了するまで値を維持でき、繰り返し利用することができます。
    </td>
    <td>
      「変数には値を代入することができます。」に修正するのが正しいです。変数はプログラムが終了するまで値を維持しているわけではないので。
    </td>
  </tr>

  <tr>
    <td>
      P162
    </td>
    <td>
      中段
    </td>
    <td>
      titleタグの閉じタグのスラッシュ(/)がないです。
    </td>
    <td>
      スラッシュがあるのが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P164
    </td>
    <td>
      中段
    </td>
    <td>
      titleタグの閉じタグのスラッシュ(/)がないです。
    </td>
    <td>
      スラッシュがあるのが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P165
    </td>
    <td>
      中段
    </td>
    <td>
      titleタグの閉じタグのスラッシュ(/)がないです。
    </td>
    <td>
      スラッシュがあるのが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P167
    </td>
    <td>
      中段
    </td>
    <td>
      titleタグの閉じタグのスラッシュ(/)がないです。
    </td>
    <td>
      スラッシュがあるのが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P170
    </td>
    <td>
      中段
    </td>
    <td>
      titleタグの閉じタグのスラッシュ(/)がないです。
    </td>
    <td>
      スラッシュがあるのが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P173
    </td>
    <td>
      中段
    </td>
    <td>
      フォームのactionのURLの指定が間違っています。
    </td>
    <td>
      /cgi-bin/simple-form.cgiが正しいです。
    </td>
  </tr>

  <tr>
    <td>
      P174
    </td>
    <td>
      上段
    </td>
    <td>
      /var/www/htm
    </td>
    <td>
      /var/www/html
    </td>
  </tr>

  <tr>
    <td>
      P176
    </td>
    <td>
      下段
    </td>
    <td>
      受け取った文字列を出力されました。
    </td>
    <td>
      受け取った文字列が出力されました。
    </td>
  </tr>

  <tr>
    <td>
      P207
    </td>
    <td>
      上段
    </td>
    <td>
      ソースコード名がない
    </td>
    <td>
      image-bbs.cgi
    </td>
  </tr>
|
  <tr>
    <td>
      P232
    </td>
    <td>
      上段
    </td>
    <td>
      「出力するデータは必ず～」の見出しが中見出し
    </td>
    <td>
      小見出しになっているのが正しいです
    </td>
  </tr>

  <tr>
    <td>
      P234
    </td>
    <td>
      上段
    </td>
    <td>
      実行したプログラムの役割を果たすモジュールがないかを～
    </td>
    <td>
      実行したいプログラムの役割を果たすモジュールがないかを～
    </td>
  </tr>

  <tr>
    <td>
      P235
    </td>
    <td>
      下段
    </td>
    <td>
      ソースコード ? の部分にtaraを埋め込む
    </td>
    <td>
      「? の部分にtaroを埋め込む」が正しいです。
    </td>
  </tr>

</table>

