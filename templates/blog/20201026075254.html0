<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161022147731.html">
        <span itemprop="name">構文</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161003147558.html">
        <span itemprop="name">文字列</span></a>
    <meta itemprop="position" content="3" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>

<h2>ダブルクォート文字列</h2>

<b>ダブルクォート文字列</b>は、ダブルクォート「"」で囲まれた文字列のことです。<a href="/blog/20180228151982.html">変数展開</a>を行えることと、改行やタブなどの<a href="/blog/20201030075254.html">ダブルクォート文字列のエスケープシーケンス</a>を使えることが特徴です。

<pre>
my $name = "Yuki Kimoto";

# 変数展開と改行文字を使う
my $message = "I'm $name\n";

# 「I'm Yuki Kimoto」と表示される。改行あり
print $message;
</pre>

<h3>変数展開とは</h3>

変数展開とは、文字列の中で、変数の内容を展開できる機能のことです。

<pre>
my $name = "Yuki Kimoto";

# 変数展開と改行文字を使う
my $message = "I'm $name\n";
</pre>

変数名の区切りを明確にしたい場合は、シジル「$」を除いた変数名を「{}」で囲むことで明示できます。

<pre>
my $name = "Yuki Kimoto";

# 変数名を明示する
my $message = "I'm ${name}_foo\n";
</pre>

詳しくは、変数展開の記事で解説しています。

<ul>
  <li><a href="/blog/20180228151982.html">変数展開</a></li>
</ul>

<h3>ダブルクォート文字列のエスケープシーケンス</h3>

ダブルクォート文字列の中で使えるエスケープシーケンスを紹介します。

利用頻度が高いものは改行「\n」、タブ「\t」、ダブルクォート「\"」、バックスラッシュ自体「\\」です。

<table>
  <tr><th>エスケープシーケンス</th><th>意味</th></tr>
  <tr><td>\n</td><td>改行</td></tr>
  <tr><td>\t</td><td>タブ</td></tr>
  <tr><td>\"</td><td>"</td></tr>
  <tr><td>\\</td><td>\</td></tr>
</table>

「\x」で始めることによって、ASCIIコード自体を記述できるエスケープシーケンスもあります。

<pre>
# ASCIIコードを直接指定して改行を表現
my $message = "Hello\x0D\x0A";
print $message;
</pre>

上記の例はHTTPプロトコルにおける改行コードがASCIIの16進数で「D」「A」の並びなので、それを表現したサンプルです。「\x」の後ろの0は、必須ではありませんが、ASCIIコードを2桁の16進数で表現する慣習に従って、0を入れています。

詳しくは、ダブルクォート文字列のエスケープシーケンスの記事で解説しています。

<ul>
  <li><a href="/blog/20201030075254.html">ダブルクォート文字列のエスケープシーケンス</a></li>
</ul>

<h3>正規表現リテラルとの関係</h3>

ダブルクォート文字列の変数展開やエスケープシーケンスは、正規表現リテラルの中でも、そのまま使うことができます。

<pre>
my $name = "Yuki Kimoto";

my $message = "I'm Yuki Kimoto\tHello";

# 正規表現リテラルの中でも変数展開とエスケープシーケンスが使える
if ($message =~ /$name\t/) {
  
}
</pre>

Perlのテキスト処理が便利な理由のひとつは、正規表現リテラルの中で、ダブルクォート文字列の変数展開とエスケープシーケンスが、そのまま使えることです。

変数展開を使う頻度はそれほど高くありませんが、正規表現リテラルがダブルクォート文字列の自然な拡張であるという点が、自然に利用できる体感となっていると感じています。

Perlでは、<a href="/blog/20100827127859.html">正規表現</a>が、プログラミング言語機能として組み込まれており、正規表現リテラルも言語機能の一つとして、実装されています。
