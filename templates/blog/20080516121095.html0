<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161126148016.html">
      <span itemprop="name">ファイル操作</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <span itemprop="name">here</span>
  </li>
</ol>
<h2>OSに依存しないファイル名の作成</h2>



OSに依存しないファイル名を作成するには<a href="/blog/20100412127089.html">File::Spec</a>モジュールの<strong>catfile</strong>メソッドを使用します。

<pre>
use File::Spec;
my $file_name = File::Spec->catfile('t', 'test1.t');
</pre>

ファイル名の規則は、OSによって異なります。/ や \ を使ってファイル名を構成してしまうと、OS間での移植性が損なわれます。File::Specモジュールを使えば、実行しているOSに応じたファイル名の規則にしたがって、ファイル名が作成されるので、異なるOSに移植しても、手直しが発生しません。

<strong>updir</strong>メソッドを使用するとOSに依存しない「1階層上のディレクトリ」を表現することができます。

<pre>
File::Spec->updir
</pre>

UnixでもWindowでも、１階層上のディレクトリの表現は、 .. ですが、もしかしたら、他のOSでは、表現が異なるかもしれません。

<h3>サンプル</h3>

OSに依存しないファイル名を作成するサンプルです。

<pre>
use strict;
use warnings;

# OSに依存しないファイル名を作成する

use File::Spec;

print "1: OSに依存しないファイル名を作成する。\n";
# Unix では  、lib/test1.t となり、
# Windowsでは、lib\test1.t となる。
my $file_name = File::Spec->catfile( 't', 'test1.t' );
print "\$file_name = $file_name\n\n";

print "2: OSに依存しない「1階層上のディレクトリ」を表\現する。\n";
my $up_dir = File::Spec->updir;
print "\$up_dir = $up_dir\n\n";

print "3: このスクリプトの、1階層上の、lib というディレクトリ名を作成する。\n";
use FindBin;
my $lib_dir = File::Spec->catfile($FindBin::Bin, File::Spec->updir, 'lib');
print "\$lib_dir = $lib_dir\n\n";
</pre>

(参考)<a href="/blog/20100524127696.html">FindBin</a>
