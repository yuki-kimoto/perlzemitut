<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161005147566.html">
      <span itemprop="name">演算子</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>or演算子 - 優先順位が低い論理和 </h2>



<b>or</b>はPerlの<a href="/blog/20100816136168.html">論理演算子</a>のひとつで、論理和を表現します。||と意味は同じですが、orの方が演算子の優先順位が低く、文と文の間に利用するのが一般的です。

<pre>
文1 or 文2
</pre>

このように記述すると、文1が偽を返したときに、文2が実行されます。

<h3>orを条件分岐として使う</h3>

このような性質を利用してorは条件分岐に使われることが多いです。たとえば<a href="/blog/20080718121643.html">open関数</a>が失敗した場合は次のように記述します。

<pre>
open my $fh, '<', $file
  or die qq/Can't open file "$file": $!/;
</pre>

open関数が成功した場合は真が返されるのでorの右辺は実行されません。open関数が失敗した場合はundefが返されるので右辺の<a href="/blog/20100212126425.html">die</a>が実行されプログラムは終了します。

もうひとつの例として、system関数と一緒に使われることもあります。system関数は成功すると0を返すので、次のように記述します。

<pre>
system(@cmd) == 0
  or die "Can't execute command @cmd";
</pre>

主要な処理を先に記述して、補足的なエラー処理を後で書きたい場合に、orによる条件分岐を使うことができます。

「and」を条件分岐に使うこともできますが、読みにくいので「or」をお勧めします。

<pre>
# andで書き換えた例
system(@cmd)
  and die "Can't execute command @cmd";
</pre>

