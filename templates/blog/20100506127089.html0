<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>Devel::DProf - シンプルなプロファイラ</h2>



プログラムを実行しても必要なパフォーマンスが得られないことがあります。どの部分がボトルネックになっているのかを調べるのは簡単なことではありません。プロファイラと呼ばれるツールを利用すればプログラムの中のどの処理で時間がかかっているかを調べることができます。(現在であればDevel::NYTProfを利用するのがよいでしょう。)

標準モジュールにシンプルなプロファイラである<strong>Devel::DProfモジュール</strong>があるのでこれを利用することができます。

プロファイルを作成するのは簡単です。次のコマンドを実行するとカレントディレクトリに「tmon.out」というプロファイルを情報を出力したファイルが作成されます。

<pre>
# プロファイル情報の作成
perl -d:DProf target.pl
</pre>

「tmon.out」を見やすいフォーマットで表示するにはdprofppコマンドを実行します。
<pre>
# プロファイルを見やすいフォーマットで表示
dprofpp
</pre>

すると次のような見やすいフォーマットで出力されます。
<pre>
# プロファイル
Total Elapsed Time = 1.171916 Seconds
  User+System Time = 1.171916 Seconds
Exclusive Times
%Time ExclSec CumulS #Calls sec/call Csec/c  Name
 78.6   0.922  0.922      2   0.4610 0.4610  main::func2
 18.6   0.218  0.218      1   0.2180 0.2180  main::func1
 1.37   0.016  0.016      5   0.0032 0.0032  main::BEGIN
 0.00       - -0.000      1        -      -  strict::bits
 0.00       - -0.000      2        -      -  strict::import
 0.00       - -0.000      2        -      -  warnings::import
</pre>

各項目の意味は次のようになっています。時間がかかった順に上位から表示されます。

<table>
  <tr>
    <td>
      %Time
    </td>
    <td>
      サブルーチンの実行時間の全体に対する割合
    </td>
  </tr>

  <tr>
    <td>
      ExclSec
    </td>
    <td>
      サブルーチンの実行時間(サブルーチンの呼び出しを含まない)
    </td>
  </tr>

  <tr>
    <td>
      CumulS
    </td>
    <td>
      サブルーチンの実行時間(サブルーチンの呼び出しを含む)
    </td>
  </tr>

  <tr>
    <td>
      #Calls
    </td>
    <td>
      ルーチン呼び出し回数
    </td>
  </tr>

  <tr>
    <td>
      sec/call
    </td>
    <td>
      1回あたりのサブルーチンの実行時間(サブルーチンの呼び出しを含まない)
    </td>
  </tr>

  <tr>
    <td>
      Csec/c
    </td>
    <td>
      1回あたりのサブルーチンの実行時間(サブルーチンの呼び出しを含む)
    </td>
  </tr>

  <tr>
    <td>
      Name
    </td>
    <td>
      サブルーチン名
    </td>
  </tr>

</table>

上記の結果はスクリプトを実行した場合の私の環境での結果です。
<pre>
use strict;
use warnings;

func1();
func2();
func2();

sub func1 {
  my $i = 0;
  while ($i < 1000000) {
    $i++;
  }
}

sub func2 {
  my $i = 0;
  while ($i < 2000000) {
    $i++;
  }
}
</pre>

<a href="/blog/20100123126425.html">while文</a>を使って数値をインクリメントしています。
