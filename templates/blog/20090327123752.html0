<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161030147778.html">
      <span itemprop="name">オブジェクト指向</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">ポリモーフィズム</span>
    <meta itemprop="position" content="3" />
  </li>
</ol>
<h2>継承を使ったポリモーフィズム</h2>



オブジェクト指向のひとつの特徴にポリモーフィズム(多態性)があります。ポリモーフィズムは、<b>同じように見える記述の振る舞いが異なる</b>という意味で捉えておけばよいでしょう。

<h3>1. クラスによって異なる振る舞いをさせる</h3>

では、自分の属するクラスによって異なった動きをするサンプルを書いてみます。簡単な例として、特定の記号で文字列を連結するということをします。Unixの区切り文字と、Windowsの区切り文字をサンプルとして扱います。

<pre>
use strict;
use warnings;

my $file_path_unix = FilePath::Unix->new;
my $file_path_win = FilePath::Windows->new;

my $unix_result = $file_path_unix->cat_path('a', 'b');
my $win_result = $file_path_win->cat_path('a', 'b');

print "unix: $unix_result\n";
print "win: $win_result\n";

# ファイルパスを扱うための基底クラス
package FilePath::Base;
sub new {
  my $proto = shift;
  my $class = ref $proto || $proto;
  my $self = {};
  bless $self, $class;
  return $self;
}

sub cat_path {
  my ($self, $str1, $str2) = @_;
  return $str1 . $self->delimiter . $str2;
}


# Unix 用
package FilePath::Unix;
use base 'FilePath::Base';

# Unixの場合の区切り文字
sub delimiter { return '/' }

# Windows用
package FilePath::Windows;
use base 'FilePath::Base';

# Windowsの場合の区切り文字
sub delimiter { return '\\' }
</pre>
このサンプルを実行すると

<pre>
unix: a/b
win: a\b
</pre>

と表示されます。

<h3>2. cat_pathの振る舞いに注目</h3>

まずこのサンプルで特徴的なことは、cat_pathというメソッドがふたつの意味を持つということです。

<pre>
package FilePath::Base;
sub new { ... }

sub cat_path {
  my ($self, $str1, $str2) = @_;
  return $str1 . $self->delimiter . $str2;
}
</pre>

FilePath::Base というクラスを見ると、cat_path というメソッドがあります。ところで、cat_pathを呼び出している部分を見ると、File::Pathクラスのオブジェクトが生成されているわけではありません。

<pre>
my $file_path_unix = FilePath::Unix->new;
my $file_path_win = FilePath::Windows->new;

my $unix_result = $file_path_unix->cat_path('a', 'b');
my $win_result = $file_path_win->cat_path('a', 'b');
</pre>

それぞれ、FilePath::Unixクラス と FilePath::Windowsクラスのオブジェクトが生成されています。

これは<a href="/blog/20090324123747.html">継承のところ</a>で解説したように、FilePath::Unix と FilePath::Windows が FilePath::Base を継承しているので、FilePath::Baseクラスが持つメソッド、cat_path を呼び出すことができるのでした。

次に注目してほしいところは、cat_pathの中で、$self->delimiter という記述の部分です。

<h3>3. スーバークラスでサブクラスのメソッドを呼び出す。</h3>

cat_pathの中に注目してみましょう。

<pre>
sub cat_path {
  my ($self, $str1, $str2) = @_;
  return $str1 . $self->delimiter . $str2;
}
</pre>
cat_pathの中で、delimiterメソッドが呼ばれています。けれども、FilePath::Baseは、delimiterというメソッドをもっていません。自分が持っていないメソッドを呼び出すことができるのでしょうか?

実はこの $self の部分に秘密があります。

<pre>
my $unix_result = $file_path_unix->cat_path('a', 'b');
</pre>

のようにcat_pathメソッドを呼び出したときに、$self に代入されるのは、FilePath::Unix クラスのオブジェクとになります。

FilePath::Unixクラスは delimiter メソッドを持っているので、cat_path メソッドの中から、delimiter メソッドを呼び出すことができます。

<h3>4. FilePath::Base クラスは継承されることを予定した不完全なクラスである。</h3>

FilePath::Base クラスのオブジェクトを作成しても、cat_file は内部でdelimiter メソッドを呼び出そうとしても失敗します。

<pre>
my $file_path_base = FilePath::Base->new;
$file_path_base->cat_file( 'a', 'b' ); # 失敗!
</pre>

FilePath::Base クラスを継承したdelimiterメソッドを実装したクラスが作って意味を持つものになります。

このようなクラスを、<b>継承予定クラス</b>と名づけたい。( Perlの本を読んでもこのようなクラスを適切に命名した名前が発見できなかったので、<b>継承予定クラス</b>と呼ぶことにします。オブジェクトを生成できるのでJavaの抽象クラスというわけでもないので)

<h3>5. サブクラスでのメソッドの定義</h3>

そしてポリモーフィズムを実現するために、FilePath::UnixクラスとFilePath::Windows クラスで、delimiterメソッドの実装が異なっていることに注目してください。

<pre>
# FilePath::Unixクラスの場合
sub delimiter{ return '/' }
</pre>

<pre>
# FilePath::Windowsクラスの場合
sub delimiter{ return '\\' }
</pre>
この記述が、出力結果の振る舞いを実質的に変えている部分です。
<pre>
unix: a/b
win: a\b
</pre>

