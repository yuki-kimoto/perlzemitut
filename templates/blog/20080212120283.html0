<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>each関数 - ハッシュのすべてのキーと値を処理する</h2>



<strong>each関数</strong>を使用すると<a href="/blog/20161013147635.html">ハッシュ</a>とキーと値のペアを取得することができます。繰り返し使用することで、すべてのキーと値を取得できます。

<pre>
# ハッシュのキーと値のペアの取得
my ($key, $value) = each %hash;
</pre>

eachを連続して使用するとすべての(キー, 値)のペアを順番に取得できます。取得する(キー, 値)のペアの順番は不定です。

<pre>
# (キー, 値)のペアを順番に取得
my %age = (Ken => 19, Mike => 34);
while (my ($name, $age) = each %age) {
  ...
}
</pre>

<a href="/blog/20100123126425.html">while文</a>を使って、キーと名前のペアを順番に取り出しています。

each関数を実践で使用することは少ないと思います。同じ処理が、<a href="/blog/20080210120265.html">keys関数</a>を使って行うことができ、keys関数を使ったほうが柔軟性が高いからです。現在のPerlでは、keys関数が最適化されているので、パフォーマンス上においても、each関数に比べて、keys関数が遅いということはありません。

ハッシュのすべての値だけを取得するには<a href="/blog/20100222126425.html">values関数</a>を使うこともできます。

<h3>サンプルプログラム</h3>

ハッシュのすべての要素をeach関数を使って処理するサンプルです。

<pre>
use strict;
use warnings;

# 生徒の数学の点数
my %math_scores = ( 
  Taro => 89,
  Naoko => 54,
  Kenji => 54,
);

# ハッシュのすべての要素をeach関数を使って出力する。
print "1: ハッシュのすべての要素each関数を使って出力する\n";
while (my ($key, $value) = each %math_scores) {
  print "%math_scores{$key} = " . $math_scores{$key} . "\n";
}
print "\n";
</pre>

<h4>実行結果</h4>

<pre>
1: ハッシュのすべての要素each関数を使って出力する
%math_scores{Kenji} = 54
%math_scores{Taro} = 89
%math_scores{Naoko} = 54
</pre>
