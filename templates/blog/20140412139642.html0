<script>location.href="https://mojolicious.perlzemi.com/blog/20140412139642.html";</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20140319139520.html">
      <span itemprop="name">Mojolicious</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>ルーティングの基礎 | Mojolicious入門</h2>



次に<strong>ルーティング</strong>についてもう少し詳しく解説します。ルーティングとはURLと処理の対応の記述のことです。

簡単なルーティングについては、これまでも使ってきました。

<pre>
get '/' => sub { ... };
get '/info' => sub { ... };
get '/date/:date' => sub { ... };
</pre>

ここでは、ルーティングについてもう少し詳しく解説します。

<h3>プレースホルダー</h3>

最初にプレースホルダーについて解説します。

<h4>通常のプレースホルダー</h4>

先頭にコロンをつけると、その部分はパラメーターとして取得できることは説明しました。

<pre>
get '/date/:date' => sub {
  my $self = shift;
  my $date = $self->param('date');
};
</pre>

Mojoliciousでは、これを<strong>プレースホルダー</strong>と呼びます。注意してほしいのは、このプレースホルダーは、「<b>/</b>」と「<b>.</b>」以外の値にマッチするということです。

たとえば「/date/20131015/hello」というURLでアクセスしたとしましょう。これはルーティングが成功しません。ルーティングが成功して「date」に「20131015/hello」を受け取ることができるのではなくって、ルーティング自体が成功せず、ページが見つかりません。

たとえば「/date/20131015.json」というURLでアクセスしたとしましょう。これはルーティングが成功しません。ルーティングがマッチして「date」に「20131015.json」を受け取ることができるのではなくって、ルーティング自体が成功せず、ページが見つかりません。

プレースホルダーは「()」を使って、その部分がプレースホルダーであることを区別することもできます。

<pre>
get '/date/(:date).json' => sub { ... };
</pre>

「/date/20130213.json」でアクセスすれば、ルーティングが成功して、パラメーター「date」に「20130213」を受け取ることができます。

<h4>リラックスプレースホルダー</h4>

通常のプレースホルダーは「/」と「.」以外にマッチしますが、リラックスプレースホルダーを使えば「.」以外にマッチさせることができます。リラックスプレースホルダーは先頭が「#」ではじまります。

<pre>
get '/date/#date' => sub { ... };
</pre>

「/date/20130213.json」でアクセスすれば、ルーティングが成功して、パラメーター「date」に「20130213.json」を受け取ることができます。「.」を含んだ部分を取得することができます。

リラックスプレースホルダーはこのように「.」を含んだ部分もパラメーターとして受け取ることができるのが特徴です。

<h4>ワイルドカードプレースホルダー</h4>

「/」と「.」を含むすべての文字にマッチさせるにはワイルドカードプレースホルダーを利用します。ワイルドカードプレースホルダーは先頭が「*」で始まります。

<pre>
get '/date/*date' => sub { ... };
</pre>

「/date/20130213/hello」でアクセスすれば、ルーティングが成功して、パラメーター「date」に「20130213/hello」を受け取ることができます。「/」を含んだ部分を取得することができます。

ワイルドカードプレースホルダーはこのように「/」を含んだ部分もパラメーターとして受け取ることができるのが特徴です。

<h3>HTTPメソッド</h3>

次にHTTPメソッドについて解説したいと思います。HTTPメソッドというのは、HTTPリクエストを送信するときに指定するものです。一般的な用法であれば、ページの内容を取得するときはGETメソッド、フォームなどでデータを送信するときはPOSTメソッド、ページの存在を確認したい場合はHEADメソッドが使用されます。

<table>
  <tr>
    <td>
      メソッド名
    </td>
    <td>
      用法
    </td>
  </tr>

  <tr>
    <td>
      GET
    </td>
    <td>
      ページの内容を取得
    </td>
  </tr>

  <tr>
    <td>
      POST
    </td>
    <td>
      フォームなどでデータを送信
    </td>
  </tr>

  <tr>
    <td>
      HEAD
    </td>
    <td>
      ページの存在を確認
    </td>
  </tr>

</table>

他にもPUTメソッドやDELETEメソッドやPATCHメソッドなどがありますが、ここではこの三つを覚えてください。特にGETとPOSTを覚えておけばWebサイトの作成に困ることはありません。

Mojolicious::Liteでは上記のHTTPメソッドに対応して以下の関数が利用できます。

<pre>
get '/' => sub { ... };
post '/' => sub { ... };
head '/' => sub { ... };
put '/' => sub { ... };
del '/' => sub { ... };
patch '/' => sub { ... };
</pre>

<h4>すべてのHTTPメソッドにマッチさせる</h4>

同じURLでgetとpostの両方を受けたいという場合は多いと思います。そのような場合は<strong>any</strong>関数を使いましょう。すべてのHTTPメソッドにマッチします。

<pre>
any '/' => sub { ... };
</pre>

<h4>HTTPメソッド名を取得する</h4>

<b>any</b>関数で受け取った場合は、ユーザーがどのHTTPメソッドでアクセスしてきたのかを知りたい場合があると思います。そのような場合は<b>req</b>メソッドでHTTPリクエストを表現するMojo::Message::Requestオブジェクトを取得して、<b>method</b>メソッドでHTTPメソッドを取得できます。

<pre>
my $http_method = $c->req->method;
</pre>

<h3>ページが見つからない場合を自分で処理する</h3>

日付の場合は、たとえば、数値の8桁でなければ、ページが見つからないという処理を書きたいと考えると思います。数値の8桁以外の場合は、意味を持たないからです。このような場合は、存在しないということを知らせるのがよいでしょう。<strong>reply->not_found</strong>を使ってページが「404 Not Found」を自分で描画することができます。

<pre>
get '/date/:date' => sub {
  my $self = shift;
  my $date = $self->param('date');
  
  # 日付の形式でない場合は「404 Not Found」を描画する
  unless ($date =~ /^[0-9]{8}$/) {
    $self->reply->not_found;
    return;
  }

  $self->render('date', date => $date);
};
</pre>

<strong>reply->exception</strong>を代わりに使えば、エラーを示す「500 エラーメッセージ」を表示することもできます。

<pre>
$c->reply->exception('Error');
</pre>

<h3>すべてのルーティングに共通する前処理</h3>

すべてのルーティングに共通する前処理を書きたいと思うことがあると思います。たとえば、ログインしていなければ「/login」というページに、リダイレクトしたい場合があると思います。

このような場合は<strong>under</strong>関数を使えば、すべてのルーティングに共通する前処理を書くことができます。以下のサンプルではunder関数に渡したサブルーチンの中でスタッシュの値を取得して、それをふたつの異なるルーティング「/some1」と「some2」で利用できることを示しています。

<pre>
use Mojolicious::Lite;

# 前処理
under sub {
  my $self = shift;
  
  $self->stash('name' => 'Kimoto');

  return 1;
};

get '/some1' => sub { 
  my $self = shift;

  my $name = $self->stash('name');

  $self->render(text => $name);
};

get '/some2' => sub { 
  my $self = shift;

  my $name = $self->stash('name');

  $self->render(text => $name);
};

app->start;
</pre>

上記のサンプルではunder関数の中で「return 1」として1を返していますが、これは後に続く継続の処理を行いたい場合に必要です。underの後に続く継続の処理を行いたくない場合は「return」と書いて、未定義値を返却してください。

以下のようにunderを変更すると、継続の処理が行わずに画面に「Access deny」と表示されるのが確認できます。

<pre>
under sub {
  my $self = shift;
  
  my $continue = 0;
  
  # 継続処理を行わない場合
  unless ($continue) {
    $self->render(text => 'Access deny');
    return;
  }

  return 1;
};
</pre>

<h3>ルーティングのサンプル</h3>

ルーティングを理解するためのサンプルコードを書いてみます。

<pre>
use Mojolicious::Lite;

# 前処理
under sub {
  my $self = shift;
  
  # ユーザーがadminの場合は許可しない
  my $user = $self->url_for->path->parts->[0] // '';
  if ($user eq 'admin') {
    
    $self->res->code(403);
    $self->render(text => 'Forbidden');
    return
  }
  
  return 1;
};

# /ユーザー名/プロジェクト名/ディレクトリ名
# あるいは /ユーザー名/プロジェクト名
get '/:user/:project/*dir' => {dir => undef} => sub {
  my $self = shift;
  
  # パラメーター
  my $user = $self->param('user');
  my $project = $self->param('project');
  my $dir = $self->param('dir') // 'Nothing';
  
  # 描画
  $self->render(
    'index',
    user => $user,
    project => $project,
    dir => $dir
  );
};

any '/http-method' => sub {
  my $self = shift;

  # HTTPメソッドの取得
  my $http_method = $self->req->method;

  $self->render(text => "HTTP Method: $http_method");
};

app->start;

__DATA__

@@ index.html.ep
<%
  my $user = stash('user');
  my $project = stash('project');
  my $dir = stash('dir');
%>
<html>
  <head>
    <title>Routing</title>
  </head>
  <body>
    User: <%= $user %><br>
    Project: <%= $project %><br>
    Directory: <%= $dir %></br>
  </body>
</html>
</pre>

<h4>アプリケーションの解説</h4>

このアプリケーションは次のURLでアクセスできるようになっています。

<pre>
/ユーザー名/プロジェクト名/ディレクトリ名
/ユーザー名/プロジェクト名
</pre>

「/kimoto/dog/dir1/readme.txt」でアクセスすれば、次のように表示されます。

<pre>
User: kimoto
Project: dog
Directory: dir1/readme.txt
</pre>

「/kimoto/dog」でアクセスすれば、次のように表示されます。

<pre>
User: kimoto
Project: dog
Directory: Nothing
</pre>

これは次のようにルーティングを定義しているからです。

<pre>
get '/:user/:project/*dir' => {dir => undef} => sub { ... };
</pre>

また「/admin/dog/dir1/readme.txt」でアクセスすれば、「Forbidden」と表示されます。これは以下の前処理を記述しているためです。

<pre>
# 前処理
under sub {
  my $self = shift;
  
  # ユーザーがadminの場合は許可しない
  my $user = $self->url_for->path->parts->[0] // '';
  if ($user eq 'admin') {
    
    $self->res->code(403);
    $self->render(text => 'Forbidden');
    return
  }
  
  return 1;
};
</pre>

URLのパスの最初の部分が「admin」の場合は、ステータスコードを「403」に設定して「Forbidden」というテキストを返却しているようにしています。

少し解説します。

<pre>
# URLのパスの最初の部分を取得
my $user = $self->url_for->path->parts->[0] // '';
</pre>

まずアクセスしたURLを取得するには<b>url_for</b>メソッドを使用します。取得するのはMojo::URLオブジェクトです。次のこのURLのパスの部分を取得するには、Mojo::URLクラスの<b>path</b>メソッドを使用します。取得するのはMojo::Pathオブジェクトです。次にパスの各部分は配列として保存されていて、これはMojo::Pathクラスの<b>parts</b>メソッドによって取得できます。

「//」は、左辺が未定義値だった場合に、右辺を代入できるperlの「defined-or演算子」です。

このようにしてURLのパスの最初の部分を取得しています。

次にユーザーにチェックの部分です。

<pre>
# ユーザーがadminであれば、ステータスコードに403を設定して、Forbiddenを表示
if ($user eq 'admin') {
  
  $self->res->code(403);
  $self->render(text => 'Forbidden');
  return
}
</pre>

コントローラークラスの<b>res</b>メソッドを使用すればレスポンスオブジェクトを取得できます。これはMojo::Message::Responseオブジェクトです。Mojo::Message::Responseクラスの<b>code</b>メソッドを使用すれば、ステータスコードを設定できます。

次の部分ではHTTPメソッド名を取得しています。

<pre>
# HTTPメソッドの取得
my $http_method = $self->req->method;
</pre>

「/http-method」にアクセスすると「HTTP Method: GET」と表示されます。

