<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161022147731.html">
      <span itemprop="name">構文</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">here</span>
  </li>
</ol>
<h2>do - 値を返すブロック、スクリプトの読み込み</h2>



<b>do</b>を使用すると、ブロック構文の場合は、最後に評価された値を返すブロックを作成することができます。文字列構文の場合は、ファイルを名を指定して、スクリプトを読み込むことができます。

<pre>
# doブロック - 最後の値を返すブロック
do { ... };

#  do文字列 - スクリプトの読み込み
do $file_name;
</pre>

ブロックの構文と、文字列の構文は、機能がまったく異なるので注意してください。それぞれの構文について詳しく解説します。

<h3>最後の値を返すブロック - doブロック</h3>

<b>doブロック</b>を使用すると最後に評価された値を返すブロックを作成することができます。

<pre>
# doブロック
my $value = do {
  1;
  2;
  3;
};
</pre>

上のように記述すると3が返され、$valueに3が代入されます。

普通にプログラミングするときには、この構文を使う理由は特にありませんが、慣例的に、ファイルの内容を一度に読み込みたい場合は、この構文が利用されます。

<h4>ファイルの内容を一度に読み込む</h4>

次の記述によって、ファイルの内容のすべて一度で読み込むことができます。

<pre>
my $content = do { local $/; <$fh> };
</pre>

この記述の詳しい解説は以下で行っています。

<ul>
  <li>
    <a href="/blog/20180521152690.html">ファイルの内容をすべて読み込む</a>
  </li>
</ul>

localについては「<a href="/blog/20080309120507.html">local - パッケージ変数を一時的に退避して復元</a>」で解説しています。

<h3>スクリプトの読み込み - do文字列</h3>

<b>do文字列</b>の構文を使うことで、ファイルをPerlのソースコードとして読み込むことができます。

よく利用する方法として、設定ファイルをPerlで記述して読み込むことができます。

<h4>設定ファイルをPerlで記述する</h4>

設定ファイルはPerlで記述するのが便利です。

<pre>
my $conf_file = "app.conf";
my $conf = do $conf_file
  or die qq/Can't load config file "$conf_file": $!$@/;
</pre>

設定ファイルの内容です。

<pre>
{
  name => 'Foo',
  number => 9
}
</pre>

ファイルの読み込みか解析に成功しなかった場合は未定義値が返却されます。ファイル名が存在しなかった場合は$!に、Perlのソースコードの読み込みに失敗した場合は$@にエラーの内容が設定されます。

設定ファイルはXMLやJSONで書くこともできますが、Perlで書くのが一番楽ですね。

do文字列の構文は、設定を記述したスクリプトを読み込むためだけに、利用するのが良いでしょう。モジュールを読み込みたい場合は、<a href="/blog/20090205123287.html">use</a>か<a href="/blog/20090207123288.html">require</a>を使うようにしましょう。

