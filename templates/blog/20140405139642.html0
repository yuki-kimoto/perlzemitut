<script>location.href="https://mojolicious.perlzemi.com/blog/20140405139642.html";</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20140319139520.html">
      <span itemprop="name">Mojolicious</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>Mojoliciousの「テンプレート」の使い方</h2>



<strong>テンプレート</strong>について解説したいと思います。今までは、簡単なテキストを出力してきただけでしたが、Webアプリケーションなので、HTMLを出力したいですね。Mojoliciousのテンプレートという機能を使うと、HTMLを出力することができます。

<pre>
use Mojolicious::Lite;

get '/' => sub {
  my $self = shift;
  
  # テンプレートの指定
  $self->render('index');
};

get '/company/info' => sub {
  my $self = shift;

  # テンプレートの指定
  $self->render('company/info');
};

app->start;

__DATA__

@@ index.html.ep
<html>
  <head>
    <title>Index</title>
  </head>
  <body>
    <h1>Index</h1>
  </body>
</html>

@@ company/info.html.ep
<html>
  <head>
    <title>Company Information</title>
  </head>
  <body>
    Company Information
  </body>
</html>
</pre>

アプリケーションを起動して「/」と「/company/info」にアクセスしてみてください。それぞれ「Index」「Company Informatiomn」が太字で表示されます。

<h3>テンプレートの指定方法</h3>

まずテンプレートの指定部分についてみてみましょう。テンプレートは<strong>render</strong>メソッドで指定することができます。

<pre>
# テンプレートの指定
$self->render('index');
$self->render('company/info');
</pre>

二番目の例のように「<b>/</b>」を使ってディレクトリ階層を表現することも可能です。

<h3>テンプレートの記述方法</h3>

次にテンプレートの記述方法を見てみましょう。

<pre>
__DATA__

@@ index.html.ep
<html>
  <head>
    <title>Index</title>
  </head>
  <body>
    <h1>Index</h1>
  </body>
</html>

@@ company/info.html.ep
<html>
  <head>
    <title>Company Information</title>
  </head>
  <body>
    <h1>Company Information</h1>
  </body>
</html>
</pre>

テンプレートは<storng>__DATA__</strong>という記述をした行の下に書く必要があります。この部分はデータセクションと呼ばれます。

次にテンプレート名は次のような表現で記述します。

<pre>
@@ テンプレート名.html.ep
</pre>

「<b>@@</b>」の後ろに半角の空白が必要なことに注意してください。Mojoliciousのテンプレート名の拡張子は、特別なことを行わない限りは「<b>html.ep</b>」になります。

今回のサンプルでは、テンプレートはふたつありますが、それぞれ次のような記述になっています。

<pre>
@@ index.html.ep
@@ company/info.html.ep
</pre>

そしてテンプレート名の後ろにHTMLを記述します。

<pre>
@@ index.html.ep
<html>
  <head>
    <title>Index</title>
  </head>
  <body>
    <h1>Index</h1>
  </body>
</html>
</pre>

これが表示される内容になります。

<h3>テンプレート内にはPerlが書ける</h3>

MojoliciousのテンプレートにはPerlを記述することができます。少しだけ記法を覚えてしまえば、特別な文法を覚える必要がないので便利です。

Perlを記述するには先頭に「<b>%</b>」を記述します。

<pre>
% my $name = 'kimoto';
</pre>

また複数にわたってPerlを記述するときは「<b>&lt;% %&gt;</b>」という記法を使うことができます。

<pre>
<%
  my $title = 'kimoto';
  my $age = 19;
%>
</pre>

<h4>値の埋め込み</h4>

また「<b>%=</b>」あるいは「<b><%= %></b>」を使って、直接、値をHTMLに埋め込むことができます。

<pre>
%= $title;
<%= $title %>
</pre>

<h4>Perlの記述を使ったサンプル</h4>

では、実際にテンプレート内でPerlを使ったサンプルを書いてみましょう。サンプルの中では、if文やfor文を使っています。

<pre>
use Mojolicious::Lite;

get '/' => sub {
  my $self = shift;
  
  $self->render('index');
};

app->start;

__DATA__

@@ index.html.ep
<%
  my $name = 'kimoto';
  my $age = 19;
  my @nums = (1, 2, 3);
%>
<html>
  <head>
    <title>Index</title>
  </head>
  <body>
    <h1>Index</h1>
    % if ($name eq 'kimoto') {
      Kimoto
    % } else {
      Other
    % }
    <br>
    He is <%= $age %> years old.<br>
    
    % for my $num (@nums) {
      <%= $num %><br>
    % }
  </body>
</html>
</pre>

こんな風にテンプレートの中にPerlを記述することができるので便利です。

<h4>値は自動的にHTMLエスケープされる</h4>

<pre>
%= 値
<%= 値 %>
</pre>

上記の記述で埋め込んだ値は、自動的にXMLエスケープされます。XMLエスケープは、HTMLの中で危険な文字列を安全な文字に置き換える処理のことです。以下の変換が行われます。

<pre>
&  => &amp;
<  => &lt;
>  => &gt;
"  => &quot;
'  => &#39;
</pre>

もし「&lt;」などが、置き換えられないとすれば「<script></script>」のような文字列を、ユーザーから送り込まれた場合に、javascriptが実行される危険性を持つことになります。ですので、Mojoliciousでは、このような危険性を下げるために、デフォルトでXMLエスケープ処理を行うようになっています。

もしXMLエスケープを行いたくない場合は「<b><%==</b>」あるいは「<b><%== %></b>」という記法を使います。

<pre>
%== 値
<%== 値 %>
</pre>

<h3>データの受け渡しはスタッシュと呼ばれる変数を使う</h3>

コントローラーとテンプレートではスタッシュと呼ばれる変数を共有しています。データをテンプレート側に渡したい場合はstashメソッドを使って、値を設定することができます。

<pre>
# コントローラーでのスタッシュの値の設定
$c->stash('name' => 'Kimoto');

# コントローラーでのスタッシュの値の取得
my $name = $c->stash('name')
</pre>

またテンプレートの中ではstashヘルパーを使って、値の設定と取得を行うことができます。テンプレートの中で利用できる関数のことをヘルパーと呼びますので、覚えておいてください。

<pre>
# テンプレートでのスタッシュの値の設定
stash('name' => 'Kimoto');

# テンプレートでのスタッシュの値の取得
my $name = stash('name');
</pre>

また<b>render</b>メソッドの第二引数以降を利用すると、スタッシュの値を設定できるので、便利です。短く書けるので、これを利用しましょう。

<pre>
# renderメソッド
$c->render($template, 'name' => 'Kimoto', 'age' => 19);

# これと同じ
$c->stash('name' => 'Kimoto');
$c->stash('age' => 19);
$c->render($template);
</pre>

<h4>スタッシュの予約語</h4>

スタッシュのキーとしては、次のものは予約語になっているので、値を保存したい場合には、使わないでください。もし使えば、予測外の挙動を起こして、正しい処理が行われなくなるので、気をつけてください。

<pre>
action app cb controller data extends format handler json layout
namespace partial path status template text variant
</pre>

<h4>スタッシュを使ったサンプル</h4>

スタッシュを使ったサンプルを書いてみます。

<pre>
use Mojolicious::Lite;

# コントローラー
get '/' => sub {
  my $self = shift;
  
  # スタッシュに値を設定してindexを描画
  $self->render('index', 'name' => 'Kimoto', age => 19);
};

app->start;

__DATA__

@@ index.html.ep
<%
  # スタッシュから値を取得
  my $name = stash('name');
  my $age = stash('age');
%>
<html>
  <head>
    <title>Index</title>
  </head>
  <body>
    <h1><%= $name %>:<%= $age %></h1>
  </body>
</html>
</pre>

コントローラー内でrenderメソッドを使ってスタッシュを設定しています。

<pre>
# スタッシュに値を設定してindexを描画
$self->render('index', 'name' => 'Kimoto', age => 19);
</pre>

テンプレート内でstashヘルパーを使ってスタッシュの値を取得しています。

<pre>

</pre>

<h3>レイアウト</h3>

次に<strong>レイアウト</strong>という機能を解説します。もう一度最初のサンプルを見てみましょう。

<pre>
@@ index.html.ep
<html>
  <head>
    <title>Index</title>
  </head>
  <body>
    <h1>Index</h1>
  </body>
</html>

@@ company/info.html.ep
<html>
  <head>
    <title>Company Information</title>
  </head>
  <body>
    Company Information
  </body>
</html>
</pre>

htmlタグやbodyタグというのは、二つのテンプレートで共通のものとなっていますね。bodyの中身は異なりますが、骨格となっているhtmlタグやbodyタグは同じです。こういう場合は、レイアウトという機能を使えば、記述の繰り返しを避けることができます。

最初のサンプルをレイアウトを使って書き直してみましょう。

<pre>
@@ layouts/common.html.ep
<html>
  <head>
    <title><%= stash('title') %></title>
  </head>
  <body>
    %= content;
  </body>
</html>

@@ index.html.ep
% layout 'common', title => 'Index';
  <h1>Index</h1>

@@ company/info.html.ep
% layout 'common', title => 'Company Information';
  <h1>Company Information</h1>
</pre>

<h4>レイアウト名</h4>

まずレイアウトを定義してみましょう。まずテンプレート名を見てください。

<pre>
layouts/common.html.ep
</pre>

「layouts/」で始まっています。これはレイアウトを作成するときの規則です。その後ろにレイアウト名「common」が続きます。そして、拡張子は、テンプレートと同じ「.html.ep」です。

<h4>レイアウトの内容</h4>

次にレイアウトの内容を見てみましょう。

<pre>
<html>
  <head>
    <title><%= stash('title') %></title>
  </head>
  <body>
    %= content;
  </body>
</html>
</pre>

すべてのテンプレートで共有する部分をレイアウトには記述します。htmlタグとbodyタグを書いています。レイアウトに埋め込む内容は、<b>contentヘルパー</b>で取得することができます。contentヘルパーの部分が、実際の内容に置き換わります。

レイアウトの中でも、stashを利用することができますので、テンプレートからレイアウトにstashを通してデータを渡すことができます。これを利用すれば、タイトルだけを変更するということも簡単です。

<h4>レイアウトの呼び出し</h4>

次に、実際のテンプレートでレイアウトを呼び出している記述を見てみましょう。

<pre>
@@ index.html.ep
% layout 'common', title => 'Index';
  <h1>Index</h1>
</pre>

<b>layoutヘルパー</b>を使えば、レイアウトを呼び出すことができます。第一引数にはレイアウト名を指定します。第二引数以降の値は、stashの値として設定されます。

実際にこれは以下のようなHTMLに展開されます。

<pre>
<html>
  <head>
    <title>Index</title>
  </head>
  <body>
      <h1>Index</h1>
  </body>
</html>
</pre>

「&lt;h1&gt;Index&lt;/h1&gt;」が、呼び出したレイアウトに埋め込まれていることを確認してください。レイアウトは必須で使う機能になると思います。ぜひ覚えてください。

<h3>他のテンプレートをインクルードする</h3>

次に他のテンプレートを「インクルード」できる機能を紹介します。「ヘッダ」や「フッタ」などの共通部品を作成して読み込むことができます。
他の<strong>テンプレート</strong>を<strong>インクルード</strong>するには<strong>include</strong>関数を使用します。複数の部分で利用するコンポートネントを共通の部品として定義しておいて読み込むのに利用できます。

<h4>インクルードされるテンプレートの記述</h4>

インクルードされるテンプレートを記述します。名前はcomponent.html.epとします。

<pre>
コンポーネント
%= $name
</pre>

$nameという部分に注目してみてください。このようにしておくと、テンプレートをインクルードするときに、一部分だけ内容を変更することができます。

<h4>テンプレートのインクルード</h4>

テンプレートをインクルードするには、include関数を使用します。
<pre>
%= include 'component', name => 'Ken';
</pre>

第一引数はインクルードしたいテンプレート名です。「.html.ep」は省略することができます。第二引数以降はインクルードされるテンプレートに渡したいデータをハッシュで指定することができます。

<h3>テンプレートの外部化</h3>

Mojolicious::Liteのサンプルでは、テンプレートは、ファイルの中に記述しましたが、「ファイル」として配置することもできます。規模が大きくなってきた場合は、ファイルとして外部に保存すると、見通しがよくなります。

「templates」ディレクトリを作成して、その中に配置すると、Mojoliciousはそれを読み込んでくれます。

<pre>
templates / index.html.ep
          / list.html.ep
</pre>

<h3>テンプレートで使うテクニック</h3>

テンプレートでよく使うテクニックを紹介します。

<h4>テキストをHTMLエスケープから保護する</h4>

テキストをHTMLエスケープから保護するには、文字列をMojo::ByteStreamオブジェクトに変換してからテンプレートに渡します。

<pre>
<%= Mojo::ByteStream->new('<p>test</p>') %>
</pre>

タグなどをHTMLエスケープしたくない場合は、Mojo::ByteStreamオブジェクトに変換して、テンプレートに渡します。

また<b>b</b>というヘルパーもあり、こちらを使うと短くかけます。

<pre>
<%= b('<p>test</p>') %>
</pre>

<h4>コントローラーオブジェクトの取得</h4>

テンプレートの中でコントローラーオブジェクを取得するには<strong>$self</strong>という変数にアクセスします。

<pre>
% my $controller = $self;
</pre>

$selfはテンプレートの中で暗黙的に宣言される変数です。これがMojolicious::Controllerオブジェクトになっています。

このオブジェクトからコントローラクラスのメソッドを呼び出すことができます。

<pre>
# コントローラークラスのメソッドの呼び出し
my $req = $self->req;
</pre>

<h4>テンプレートブロックを作成する</h4>

テンプレートの中で「テンプレートブロック」を作成することができます。テンプレートブロックは再利用可能なテンプレートの部品として利用することができます。

<pre>
# Template block
<% my $div = begin %>
  % my ($id, $text) = @_;
  <div id="<%= $id %>" >
    %= $text
  </div>
<% end %>
</pre>

テンプレートブロックは実質的にはサブルーチンのリファレンスですが、HTMLの内容をテンプレートにおけるのと同じように記述できるのがポイントです。テンプレートブロックはbeginで始まりendで終わります。

テンプレートブロックはPerlのサブルーチンのリファレンスとして利用することができます。

<pre>
<%= $div->('foo', 'Hello') %>
</pre>

以下はMojolicious::Liteでのサンプルです。

<pre>
use Mojolicious::Lite;
get '/' => 'index';
app->start;

__DATA__

@@ index.html.ep
<% my $div = begin %>
  % my ($id, $text) = @_;
  <div id="<%= $id %>" >
    %= $text
  </div>
<% end %>

<%= $div->('foo', 'Hello') %>
</pre>

<h4>タグの前後の空白を取り除く</h4>

Mojoliciousのテンプレートを使っているときに、タグの前後の空白を取り除きたい場合があります。前後の空白を取り除きたい場合は次のような特別なタグを利用します。

<pre>
<%= 内容 =%>
</pre>

通常のタグの場合はは「<%= 内容 %>」です。後ろの%の前に<b>=</b>がついているところがポイントです。

<h4>テンプレートでは関数の名前空間が共有される</h4>

Mojoliciousのテンプレートの中でPerlのコードを自由に書くことができますが、ひとつだけ注意するべきことがあります。それは、すべての<strong>テンプレート</strong>で、関数の<strong>名前空間が共有される</strong>ということです。

<pre>
# テンプレートA
use Encode 'encode';
</pre>

<pre>
# テンプレートB
encode('UTF-8', $str);
</pre>

テンプレートBではencode関数をインポートしていないのですが、テンプレートAでインポートしているのでテンプレートBで利用することができます。これはMojoliciousがすべてのテンプレートをひとつの名前空間の中に作成しているからです。

ですので、混乱したくないのであれば、テンプレートの中では関数のインポートを行わないで、完全修飾名で利用するのが安全でしょう。

<pre>
use Encode ();
Encode::encode('UTF-8', $str);
</pre>

<h3>まとめ</h3>

MojoliciousのテンプレートはPerlが使えるのがとてもよい! 「if」も「for」もテンプレート用の構文をいちいち覚える必要がないしね。「レイアウト」と「インクルード」の記述を使えば、ヘッダやフッタの記述を共有化できる。コピペしまくらなくっていいから、便利だ。

