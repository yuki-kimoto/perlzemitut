<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20160225145640.html">
      <span itemprop="name">バージョン情報</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <span itemprop="name">here</span>
    <meta itemprop="position" content="3" />
  </li>
</ol>
<h2>Perl 5.22がリリースされました - 数学関連の機能強化、メソッドのパフォーマンスの改善、正規表現の改善</h2>



2015年6月1日に、最新バージョンのPerl 5.22がリリースされました。

<blockquote>
<a href="http://perl5.git.perl.org/perl.git/commit/70f63a4c7dba89e8e48b44de7978faae4319e693">Perl 5.22 リリース</a>
</blockquote>

今回のリリースでは、活発な機能追加が行われています。

<h3>パフォーマンスの改善</h3>

Perl 5.22の一番うれしな点は、性能改善です。マルチデリファレンスの構文解析とメソッドの構文解析の改善によって、パフォーマンスがアップしています。

<h4>複数階層のデリファレンスの性能改善</h4>

Perlの内部パーサーは、複数階層のデリファレンスを効率的に解析できるようになりました。このために、複数階層のデリファレンスのパフォーマンスが上昇しています。

<pre>
$scores->[0]{math};
</pre>

<h4>メソッド呼び出しとSUPER擬似クラスの性能改善</h4>

メソッド呼び出しと、SUPER擬似クラスは、事前に解析され、その情報がキャッシュされるようになっています。そのため、実行時の、メソッド呼び出しのパフォーマンスが上昇しています。

<pre>
$obj->method
$obj->SUPER::method;
</pre>

<h4>length関数の性能改善</h4>

length関数は、UTF-8ではない文字列に関して20%パフォーマンスがアップしています。

<h4>配列とハッシュの性能改善</h4>

キーが、定数か、単純な変数だった場合に、配列とハッシュの要素へのアクセスが速くなっています。

<h3>Perl 5.22の機能の追加</h3>

Perl 5.22では、数学関連の機能の改善などが行われています。

<h3>C99の数学関数が利用できるようになりました</h3>

PerlでC99でサポートされている数学関数を、POSIXモジュールを通じて利用できるようになりました。

<pre>
atanh
tgamma
</pre>

<h4>無限とNaN(数値でない)の扱いの改善</h4>

InfとNaNがより堅固に利用できるようになりました。
 
<h4>16進の浮動小数点の解析が向上しました</h4>

16進の浮動小数点の解析が向上しました。また、16進で浮動少数点を記述するリテラルが追加されています。

<pre>
0x1.23p-4
</pre>

これで、Perlレベルで、マシンレベルと誤差のない数値を表現することが可能になっています。

このようにPerl 5.22では、数学関連の機能がかなり改善されています。

<h4>通常の括弧をキャプチャに利用しないフラグ</h4>

Perl 5.22では、<a href="/blog/20100827127859.html">正規表現</a>の新しいフラグとして、通常の括弧をキャプチャに利用しないフラグが追加されました。これによって、複雑な正規表現を書くときに、キャプチャしない括弧「(?:)」を使わないで、簡潔に記述することができるようになりました。

<pre>
 "hello" =~ /(hi|hello)/n
</pre>

括弧を使っていますが、この括弧はキャプチャしません。nオプションを使った場合に、キャプチャをしたい場合は、次のようにします。

<pre>
"hello" =~ /(?-n:(hi|hello))/n;   # $1 は "hello"
"hello" =~ /(?<greet>hi|hello)/n; # $1 は "hello", $+{greet} も "hello"
</pre>

複雑な正規表現を書くときは、nオプションと、名前つきキャプチャと組み合わせると見やすいのではないでしょうか。

<h4> Unicode 7.0のサポート</h4>

Perl 5.22ではUnicode 7.0がサポートされました。Unicodeのサポート対応はPerlはとても早いです。

<h4>リファレンスを通したエイリアス</h4>

Perlの機能としてエイリアスという機能が存在しているのですが、これが構文レベルで呼び出せるようになりました。この機能は実験的です。

<pre>
use experimental::refaliasing;

my $nums = [1, 2, 3];
my $nums_alias;
\$nums_alias = \$nums;
</pre>

<h4>定数関数のサポート</h4>

constサブルーチン属性によって、定数関数がサポートされました。関数は一度実効されるとその値は保存され、2回目以降は、その値を利用します。この機能は実験的です。

<pre>
my $value = sub : const { 100 * 100 };
</pre>

<h4>ダブルダイヤモンドオペレーター - より安全なダイヤモンドオペレーター</h4>

より安全なダブルダイヤモンドオペレーター「<<>>」がサポートされました。従来のダイヤモンドオペレーターは、二引数のopen関数を内部的に利用していましたが、ダブルダイヤモンドオペレーターは、三引数のopen関数を利用します。

<pre>
my $line = <<>>;
</pre>

<h4>encodingモジュールがレキシカルスコープを持つようになりました</h4>

encodingモジュールは非推奨なモジュールですが、まだ生存期間中です。それで、機能の改善としてencodingを利用したときの影響の範囲が、グローバルなものから、レキシカルなものになっています。encodingモジュールを、ファイル単位などで、部分的に利用できるようになりました。

<h3>非推奨になった機能</h3>

<h4>警告をすべて致命的なエラーに変換することは、非推奨となりました。</h4>

警告をすべて致命的なエラーにする記述は、非推奨となりました。次の記述は、今後は、非推奨ですので、避けましょう。

<pre>
use warnings FATAL => 'all';
</pre>

これは、Perlのコアが新しい警告を追加したときに、そのために、今まで動いていたアプリケーションが、エラーによってとまってしまうというリスクがあるためです。Perlのコアチームが、完全な互換性ではなく、新しい警告を安全に追加できるほうを選択したようです。僕も、これには、賛成です。

<h3>非互換な変更</h3>

次の記述がエラーになりました。

<pre>
defined(@array)
defined(%hash)
</pre>

この記述は5.6.1の時点で、廃止予定となっており、5.16で、廃止予定の警告が発せられるようになっていましたが、5.22で、エラーとなりました。Perlをバージョンアップするときは、古いソースコードには、この記述がある可能性がありますので、注意してください。

<h3>コアからはずれたモジュール</h3>

<h4>CGIモジュールがコアからはずれました</h4>

CGIモジュールがコアからはずれました。これは驚きもあるかもしれませんが、時代の流れでもあります。以後は、CPANから、インストールして、利用してください。

現在では、Webフレームワークを利用して、Webアプリケーションを開発することが主流になっています。以下のページから、Web開発に必要なフレームワークを探すことができます。

<blockquote>
<a href="http://search.cpan.org/~ether/Task-Kensho-0.38/lib/Task/Kensho.pm#Task::Kensho::WebDev:_Web_Development">Task::Kensho::WebDev:_Web_Development</a>
</blockquote>

<h4>Module::Buildがコアからはずれました</h4>

Module::Buildがコアからはずされました。Module::Buildが必要なときは、自動的にCPANからインストールされる仕組みがPerlには、存在するということと、コアの管理をなるべく小さくするという目的のためはずされました。

<h3>まとめ</h3>

感想を述べると、まずPerlが数学関連の機能を強化したことに好感が持てます。Perlが遅れている分野をカバーする機能追加が行われたのは、うれしいことです。

また、メソッドと複数階層のデリファレンスのパフォーマンスがアップしたのは、とてもよいことだと思います。たとえば、PerlのWebフレームワークのMojoliciousでは、Perl5.22にバージョンアップすると、20%以上のパフォーマンスの改善があったということも、報告されていました。

また、うれしいのは、警告を致命的なエラーに変換することが非推奨になったことによって、「use warnings」が「use v5.xx」としたときに、加えることができる可能性の道が開けたことです。早めの方針転換が、後々の機能改善に利いてきますので。
