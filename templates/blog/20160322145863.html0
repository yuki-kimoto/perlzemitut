<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20130416136637.html">
      <span itemprop="name">言語実装</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>perlvars.h</h2>



<strong>perlvars.h</strong>には、Perlのグローバル変数が定義されています。

<pre>
/* perlvars.h */

/* global state */
#if defined(USE_ITHREADS)
PERLVAR(G, op_mutex,	perl_mutex)	/* Mutex for op refcounting */
#endif
PERLVARI(G, curinterp,	PerlInterpreter *, NULL)
					/* currently running interpreter
					 * (initial parent interpreter under
					 * useithreads) */
#if defined(USE_ITHREADS)
PERLVAR(G, thr_key,	perl_key)	/* key to retrieve per-thread struct */
#endif
</pre>

Perlには、インタープリタごとに持つインタープリタ変数がありますが、それとは別にグローバル変数も存在します。たとえば、現在実行しているインタープリタ、スレッドの競合を制御するためのミューテックスなどは、グローバル変数として定義されています。

グローバル変数の宣言は、「PERLVAR」「PERLVARI」というマクロを使って記述されていま。これは「perl.h」で定義されています。
=====
<pre>
/* perl.h */

/* Set up PERLVAR macros for populating structs */
#  define PERLVAR(prefix,var,type) type prefix##var;

/* 'var' is an array of length 'n' */
#  define PERLVARA(prefix,var,n,type) type prefix##var[n];

/* initialize 'var' to init' */
#  define PERLVARI(prefix,var,type,init) type prefix##var;

/* like PERLVARI, but make 'var' a const */
#  define PERLVARIC(prefix,var,type,init) type prefix##var;
</pre>

たとえば「PERLVAR(G, op_mutex,	perl_mutex)」は次のように展開されます。

<pre>
perl_mutex Gop_mutex;
</pre>

このグローバル変数は、ソース上で直接利用されず、「PL_op_mutex」のようにラッピングされた形でアクセスされます。

<pre>
PL_op_mutex = ...;
</pre>

このようにラッピングされているのは、コンパイルオプション「PERL_GLOBAL_STRUCT」によって、グローバル変数の格納方法が異なるからです。「PERL_GLOBAL_STRUCT」が定義されているが場合は、グローバル変数が構造体に格納されており、そうでない場合は、グローバル変数が直接記述されています。

この前提で「PL_op_mutex」がどのように展開されているかを見ましょう。まず「embedvar.h」より、

<pre>
#if defined(PERL_GLOBAL_STRUCT)

#define PL_op_mutex		(my_vars->Gop_mutex)

#endif
</pre>

「my_vars」は、「perlmain.c」で定義されています。

<pre>
/* perlmain.c */
struct perl_vars *my_vars = init_global_struct();
</pre>

「perl_vars」という構造体の定義も見ておきましょう。「perlvars.h」の内容をメンバ変数として持つ構造体だということがわかります。

<pre>
struct perl_vars {
#    include "perlvars.h"
};
</pre>

<hr>
<a href="/blog/20130416136637.html">Perl言語研究</a>

