<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20130416136637.html">
      <span itemprop="name">言語実装</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>embedvar.h</h2>



<strong>embedvar.h</strong>は、インタープリタ変数、グローバル変数の抽象化のためのヘッダです。

<h3>インタープリタ変数の抽象化</h3>

インタープリタ変数の抽象化のロジックは以下のようになっています。

<pre>
#if defined(MULTIPLICITY)
/* cases 2 and 3 above */

#  if defined(PERL_IMPLICIT_CONTEXT)
#    define vTHX	aTHX
#  else
#    define vTHX	PERL_GET_INTERP
#  endif

#define PL_AboveLatin1		(vTHX->IAboveLatin1)
#define PL_Argv			(vTHX->IArgv)
#define PL_Cmd			(vTHX->ICmd)
#define PL_DBcontrol	(vTHX->IDBcontrol)

#endif
</pre>

まず「MULTIPLICITY」が定義されている場合というのは、複数のインタープリタが利用できる状態であるということです。そのような場合は、インタープリタごとの変数にアクセスする必要があります。

次に、「PERL_IMPLICIT_CONTEXT」とは、暗黙のコンテキストが想定するという意味で、「Perl_」で始まる関数の第一引数に、インタープリタが渡されるということを意味します。

一般的には「MULTIPLICITY」が定義されていれば「PERL_IMPLICIT_CONTEXT」が定義されていると考えてください。

「aTHX」は次のように定義されています。

<pre>
/* perl.h */
#ifdef PERL_IMPLICIT_CONTEXT
#  define aTHX	my_perl
#end
</pre>

my_perlは、グローバル変数であり、インタープリタを表しています。

<pre>
/* perlmain.c */
static PerlInterpreter *my_perl;
</pre>

次に「PERL_IMPLICIT_CONTEXT」が定義されていない場合ですが、「PERL_GET_INTERP」は、次のように定義されていて、現在のインタープリタです。これは、グローバル変数です。

<pre>
/* perl.h */
#  define PERL_GET_INTERP              (PL_curinterp)
</pre>

<pre>
/* perlvar.h */
PERLVARI(G, curinterp,	PerlInterpreter *, NULL)
					/* currently running interpreter
					 * (initial parent interpreter under
					 * useithreads) */
</pre>

「PERL_IMPLICT_CONTEXT」が定義されている場合は「vTHX」は「my_perl」として展開され、そうでない場合は「Gcurinterp」として展開されます。。

そして、インタープリタ変数へのアクセスですが以下のように定義されています。

<pre>
#define PL_AboveLatin1		(vTHX->IAboveLatin1)
</pre>

<h3>グローバル変数の抽象化</h3>

次にグローバル変数の抽象化のコードが書かれています。「PERL_GLOBAL_STRUCT」が、定義されている場合は、グローバル変数全体が、ひとつの構造体として存在しています、定義されていない場合は、通常のグローバル変数として存在しています。その二つの場合のどちらでも「PL_appctx」によって、変数にアクセスすることができます。

<pre>
#if defined(PERL_GLOBAL_STRUCT)

#define PL_appctx		(my_vars->Gappctx)
#define PL_Gappctx		(my_vars->Gappctx)
#endif
</pre>

<pre>
/* perlmain.c */
struct perl_vars *my_vars = init_global_struct();
</pre>

<hr>
<a href="/blog/20130416136637.html">Perl言語研究</a>

