<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
        <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
        <span itemprop="name">PDL</span>
    <meta itemprop="position" content="3" />
  </li>
</ol>
<h2>PDLにおける「行列」の扱い</h2>




PDLにおける「行列」の扱いを解説します。

<h3>行列の作成</h3>

行列を作成するには<b>pdl</b>関数を使用します。

<pre>
use PDL;

my $mat = mpdl [
  [1, 2],
  [3, 4]
];
</pre>

以下のような行列が作成されます。

<pre>
[
 [1 2]
 [3 4]
]
</pre>

<h3>行列の足し算</h3>

行列の足し算を行うには<b>+</b>演算子を使用します。

<pre>
use PDL;

my $mat1 = pdl [
  [1, 2],
  [3, 4]
];
my $mat2 = pdl [
  [5, 6],
  [7, 8]
];

my $mat_sum = $mat1 + $mat2;
</pre>

各要素が足されて以下のような結果になります。

<pre>
[
 [ 6  8]
 [10 12]
]
</pre>

<h3>行列の引き算</h3>

行列の足し算を行うには<strong>-</strong>演算子を使用します。

<pre>
use PDL;

my $mat1 = pdl [
  [1, 2],
  [3, 4]
];

my $mat2 = pdl [
  [5, 6],
  [7, 8]
];

my $mat_sub = $mat2 - $mat1;
</pre>
各要素が引かれて以下のような結果になります。

<pre>
[
 [4 4]
 [4 4]
]
</pre>


<h3>行列の積</h3>

行列の積を求めるには<strong>x</strong>演算子を使用します。

<pre>
use PDL;

my $mat1 = pdl [
  [1, 2],
  [3, 4]
];
my $mat2 = pdl [
  [5, 6],
  [7, 8]
];

my $mat_multi = $mat1 x $mat2;
</pre>

計算された結果は以下のようになります。

<pre>
[
 [19 22]
 [43 50]
]
</pre>

<h3>行列の要素を取得する</h3>

行列の要素を取得するには<strong>at</strong>メソッドを使用します。行と列の順番が、通常の行列と異なること、添え字は0から始まることに注意しましょう。

<pre>
$matrix->at(列, 行)
</pre>

以下は2×2行列の、2行1列目の値(3)を取得するサンプルです。

<pre>
use PDL;

my $mat = pdl [
  [1, 2],
  [3, 4]
];
my $val = $mat->at(0, 1);
</pre>

<h3>行列の要素を設定する</h3>

行列の要素を設定するには<strong>ナイススライス</strong>という記法を利用します。ナイススライス記法を使うためには<b>PDL::NiceSlice</b>モジュールを読み込む必要があります。

<pre>
use PDL;
use PDL::NiceSlice;

$matrix(列, 行) .= 値
</pre>

この記法は変数の後ろに括弧が付くという少し特殊な用法です。また<b>.=</b>文字列連結演算とイコールの組み合わせは、値の代入のためにオーバーロードされています。

以下は2×2行列の、2行1列目の値を5に設定するサンプルです。添え字は0から始まることに注意してください。

<pre>
use PDL;
use PDL::NiceSlice;

my $mat = pdl [
  [1, 2],
  [3, 4]
];
$mat(0, 1) .= 5;
</pre>

この変数の出力結果は以下のようになります。

<pre>
[
 [1 2]
 [5 4]
]
</pre>

<h3>単位行列を作成する</h3>

単位行列を作成してみましょう。3×3の単位行列にしてみます。手順は<strong>PDL::Core</strong>の<b>zeroes</b>関数ですべての要素が0の3×3の正方行列を作成します。それから、<b>diagonal</b>メソッドで対角をスライスして1を代入します。引数の(0, 1)は、1次元と2次元という意味です。1次元と2次元の対角を取得という意味になります。

<pre>
use PDL;

my $mat = PDL::Core::zeroes(3, 3);
$mat->diagonal(0, 1) .= 1;
</pre>

出力結果は以下のようになります。

<pre>
[
 [1 0 0]
 [0 1 0]
 [0 0 1]
]
</pre>

<h3>行列式を求める</h3>

行列式を求めるには<b>det</b>メソッドを使用します。

<pre>
use PDL;

my $mat = pdl [
  [1, 2],
  [3, 4]
];

my $det = $mat->det;
</pre>

行列式の値は以下のようになります。

<pre>
-2
</pre>

<h3>逆行列を求める</h3>

逆行列を求めるには<b>inv</b>関数を使用します。

<pre>
use PDL;

my $mat = pdl [1, 2], [3, 4];

my $mat_inv = inv $mat;
</pre>

計算された結果は以下のようになります。

<pre>
[
 [  -2    1]
 [ 1.5 -0.5]
]
</pre>

<h3>ベクトル(列ベクトル)を作成する</h3>

ベクトル(列ベクトル)を作成するには次のようにします。

<pre>
use PDL;

my $vec = pdl [
  [1],
  [2]
];
</pre>

データの出力結果は以下のようになります。

<pre>
[
 [1]
 [2]
]
</pre>

<h3>一次変換を計算する</h3>


一次変換を計算してみましょう。正方行列 × 列ベクトルの演算です。

<pre>
use PDL;

my $mat = pdl [
  [1, 2],
  [3, 4]
];

my $vec = pdl [
  [5],
  [6]
];

my $result = $mat x $vec;
</pre>

結果の出力結果は以下のようになります。

<pre>
[
 [17]
 [39]
]
</pre>

t[5, 6]は[ [1, 2], [3,4] ]という2×2行列によってt[17, 39]に変換されました。(tは転置という意味)

