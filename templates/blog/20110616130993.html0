<script>location.href="https://mojolicious.perlzemi.com/blog/20110616130993.html";</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20140319139520.html">
      <span itemprop="name">Mojolicious</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>Mojoliciousの「タグヘルパー」の一覧</h2>



Mojoliciousのタグヘルパーの一覧です。

<h3>テキストフィールド</h3>

<strong>text_field</strong>タグヘルパーを使うと<strong>テキストフィールド</strong>を簡単に記述することができます。

<pre>
<%= text_field 'first_name' %>
<%= text_field first_name => 'Default name' %>
<%= text_field first_name => 'Default name', class => 'user' %>
</pre>

第一引数はnameの値、第二引数はvalueの値、残りの引数は属性として利用されいます。以下のように展開されます。

<pre>
<input name="first_name" />
<input name="first_name" value="Default name" />
<input class="user" name="first_name" value="Default name" />
</pre>

<h3>パスワードフィールド</h3>

<strong>password_field</strong>タグヘルパーを使うと<strong>パスワードフィールド</strong>を簡単に記述することができます。

<pre>
<%= password_field 'pass' %>
<%= password_field 'pass', id => 'foo' %>
</pre>

第一引数はnameの値、残りの引数は属性として利用されます。

<pre>
<input name="pass" type="password" />
<input id="foo" name="pass" type="password" />
</pre>

<h3>テキストエリア</h3>

<strong>text_area</strong>タグヘルパーを使うと<strong>テキストエリア</strong>を簡単に記述することができます。

<pre>
<%= text_area 'foo' %>
<%= text_area foo => begin %>
  Default!
<% end %>
</pre>

第一引数はnameの値です。第二引数にブロック(begin ～ end)を渡すと、テキストエリアの内容を表示することができます。以下のように展開されます。

<pre>
  <textarea name="foo"></textarea>
  <textarea name="foo">
    Default!
  </textarea>
</pre>

<h3>チェックボックス</h3>

<strong>check_box</strong>タグヘルパーを使用するとチェックボックスを簡単に記述することができます。ページを遷移したときでも、パラメータに値が設定されていれば、チェックボックスが自動的にチェックされます。

<pre>
<%= check_box employed => 1 %> # name => value
<%= check_box employed => 1, id => 'foo' %>
</pre>

以下のように展開されます。最初の引数はnameの値、二つ目の引数はvalueの値になります。残りの引数には属性
記述することができます。

<pre>
<input name="employed" type="checkbox" value="1" />
<input id="foo" name="employed" type="checkbox" value="1" />
</pre>

<h3>ラジオボタン</h3>

<strong>radio_button</strong>タグヘルパーを使うと<strong>ラジオボタン</strong>を簡単に記述することができます。

<pre>
<%= radio_button country => 'germany' %>
<%= radio_button country => 'germany', id => 'foo' %>
</pre>

第一引数はnameの値、第二引数はvalueの値、残りの引数は属性として利用されます。リクエストのパラメーターに対応する値が設定されている場合は、自動的にチェックがつきます。

<pre>
<input name="country" type="radio" value="germany" />
<input id="foo" name="country" type="radio" value="germany" />
</pre>

<h3>セレクトフィールド</h3>

<strong>select_field</strong>タグヘルパーを使うと<strong>セレクトフィールド</strong>を簡単に記述することができます。セレクトフィールドはコンボボックス(ドロップダウンメニュー)やリストボックスを作成する場合に利用されます。

<pre>
<%= select_field language => [qw/de en/] %>
<%= select_field language => [qw/de en/], id => 'lang' %>
<%= select_field country => [[Germany => 'de'], 'en'] %>
<%= select_field country => [{Europe => [[Germany => 'de'], 'en']}] %>
<%= select_field country => [[Germany => 'de', class => 'europe'], 'en'] %>
</pre>

第一引数はnameの値です。第二引数はselectタグの中に配置するoptionタグのnameとvalueの値になります。ハッシュのリファレンスや配列のリファレンスを使ったさまざまな記述ができます。リクエストで選択されているパラメータの値が自動的に選択されます。以下のように展開されます。

<pre>
<select name="language">
  <option value="de">de</option>
  <option value="en">en</option>
</select>
<select id="lang" name="language">
  <option value="de">de</option>
  <option value="en">en</option>
</select>
<select name="country">
  <option value="de">Germany</option>
  <option value="en">en</option>
</select>
<select id="lang" name="language">
  <optgroup label="Europe">
    <option value="de">Germany</option>
    <option value="en">en</option>
  </optgroup>
</select>
<select name="country">
  <option class="europe" value="de">Germany</option>
  <option value="en">en</option>
</select>
</pre>


<h3>ファイルフィールドを記述する</h3>

<strong>file_field</strong>タグヘルパーを使うとファイルフィールドを簡単に記述することができます。

<pre>
<%= file_field 'avatar' %>
<%= file_field 'avatar', id => 'foo' %>
</pre>

以下のように展開されます。第一引数はnameの値になります。残りの引数は属性の名前と値になります。

<pre>
<input name="avatar" type="file" />
<input id="foo" name="avatar" type="file" />
</pre>

<h3>隠しフィールドを記述する</h3>

<strong>hidden_field</strong>タグヘルパーを使うと<strong>隠しフィールド</strong>を簡単に記述することができます。

<pre>
<%= hidden_field foo => 'bar' %>
<%= hidden_field foo => 'bar', id => 'bar' %>
</pre>

次のようなタグに展開されます。第一引数はnameの値、第二引数はvalueの値、残りの引数は属性として利用されます。

<pre>
<input name="foo" type="hidden" value="bar" />
<input id="bar" name="foo" type="hidden" value="bar" />
</pre>

<h3>送信ボタンを記述する</h3>

<strong>submit_button</strong>タグヘルパーを使うと送信ボタンを簡単に記述することができます。

<pre>
<%= submit_button %>
<%= submit_button 'Ok!', id => 'foo' %>
</pre>

第一引数はvalueの値です。この値がボタンの適すとして表示されます。残りの引数は属性として利用されます。

<pre>
<input type="submit" value="Ok" />
<input id="foo" type="submit" value="Ok!" />
</pre>

<h3>ハイパーリンク</h3>

<strong>link_to</strong>タグヘルパーを使うと<strong>ハイパーリンク</strong>を簡単に記述することができます。

<pre>
<%= link_to index => begin %>Home<% end %>
<%= link_to index => {foo => 'bar'} => (class => 'links') => begin %>
  Home
<% end %>
<%= link_to '/path/to/file' => begin %>File<% end %>
<%= link_to 'http://mojolicio.us' => begin %>Mojolicious<% end %>
<%= link_to url_for->query(foo => $foo) => begin %>Retry<% end %>
</pre>

以下のようなHTMLに展開されます。第一引数はルート名かパスです。Mojo::URLオブジェクトを渡すこともできます。最後の引数はブロックになり、ハイパーリンクのテキストを指定することができます。

<pre>
<a href="/path/to/index">Home</a>
<a class="links" href="/path/to/index/bar">Home</a>
<a href="/path/to/file">File</a>
<a href="http://mojolicio.us">Mojolicious</a>
<a href="/current/path?foo=something">Retry</a>
</pre>

<h3>画像タグを記述する</h3>

<strong>image</strong>タグヘルパーを使うと<strong>画像タグ</strong>を簡単に記述することができます。

<pre>
<%= image '/images/foo.png' %>
<%= image '/images/foo.png', alt => 'Foo' %>
</pre>

以下のように展開されます。第一引数は画像へのURLです。このURLはurl_forメソッドによって展開されます。残りの引数は属性として利用されます。

<pre>
<img src="/images/foo.png" />
<img alt="Foo" src="/images/foo.png" />
</pre>

<h3>スタイルシート(CSS)</h3>

<strong>stylesheet</strong>タグヘルパーを使うとスタイルシートへの外部リンクやスタイルシートを簡単に記述することができます。

<pre>
<%= stylesheet '/foo.css' %>
<%= stylesheet begin %>
  body {color: #000}
<% end %>
</pre>

外部スタイルシートへのリンクを指定する場合は第一引数にパスを記述します。スタイルシート自体を記述したい場合はブロック(begin ～ end)を第一引数に指定します。次のようなHTMLに展開されます。

<pre>
<link href="/foo.css" media="screen" rel="stylesheet" type="text/css" />
<style type="text/css"><![CDATA[
  body {color: #000}
]]></style>
</pre>

<h3>JavaScriptのソースコード</h3>

<strong>javascript</strong>タグヘルパーを使うとJavaScriptのソースコードを簡単に記述することができます。

<pre>
%= javascript '/script.js';
%= javascript begin
  var a = 'b';
% end
</pre>

引数には外部JavaScriptのパスかブロック(begin ～ end)を指定することができます。ブロックの中には実際のJavaScriptのソースコードを記述することができます。

<pre>
<script src="/script.js" type="text/javascript" />
<script type="text/javascript"><![CDATA[
  var a = 'b';
]]></script>
</pre>

<h3>インプットタグ</h3>

<strong>input_tag</strong>タグヘルパーを使うと<strong>インプットタグ</strong>を簡単に記述することができます。

<pre>
<%= input_tag 'first_name' %>
<%= input_tag first_name => 'Default name' %>
<%= input_tag 'employed', type => 'checkbox' %>
<%= input_tag 'country', type => 'radio', value => 'germany' %>
</pre>

以下のように展開されます。第一引数はnameの値、残りの引数は属性として利用されます。HTTPリクエストのパラメーターに含まれている入力値については自動的に補完されます。

<pre>
<input name="first_name" />
<input name="first_name" value="Default name" />
<input name="employed" type="checkbox" />
<input name="country" type="radio" value="germany" />
</pre>

<h3>ベースタグ</h3>


タグヘルパーであるbase_tag関数を使うとベースタグを簡単に記述することができます。

<pre>
<%= base_tag %>
</pre>

以下のようなタグに展開されます。

<pre>
<base href="http://localhost/cgi-bin/myapp.pl" />
</pre>

