<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20100930127859.html">
      <span itemprop="name">リファレンス</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">here</span>
  </li>
</ol>
<h2>ハッシュのリファレンス</h2>



Perlには<b>ハッシュのリファレンス</b>というデータ構造が頻繁に登場します。このページでは、<a href="/blog/20100930127859.html">リファレンス</a>の中からハッシュのリファレンスを詳しく取り上げます。

<h4>ハッシュのリファレンスとは</h4>

ハッシュのリファレンスとは、<a href="/blog/20161013147635.html">ハッシュ</a>に対するリファレンスのことです。リファレンスというのは、指すということを表します。ハッシュに対して、リファレンス生成子「\」を使用すると、ハッシュのリファレンスを作成することができます。

<pre>
# ハッシュのリファレンスを作成
my %score = (math => 68, english => 90);
my $score_ref = \%score;
</pre>

ハッシュのリファレンスは、<a href="/blog/20161107147852.html">スカラ変数</a>に代入されるとういうことに注意してください。

ハッシュのリファレンスのイメージを以下に書いてみます。

<pre>
# イメージ
                      %score 
$score_ref  ------->  (math => 68, english => 90)
</pre>

ハッシュのリファレンスは、ハッシュそのものではなく「ハッシュを指し示すもの」を表現します。

<h4>ハッシュのリファレンスは代入で中身がコピーされない</h4>

ハッシュとハッシュのリファレンスの違いをここから見ていきましょう。

ハッシュは、代入によって、中身がすべてコピーされますが、ハッシュのリファレンスはコピーが行われません。

<pre>
# ハッシュは値がコピーされる
my %score1 = (math => 68, english => 90);
my %score2 = %score1;

# ハッシュのリファレンスは値はコピーされない
my %score1 = (math => 68, english => 90);
my $score_ref1 = \%score1;
my $score_ref2 = $score_ref1;
</pre>

以下はイメージです。ハッシュの場合は、中身すべてがコピーされるのに対して、ハッシュのリファレンスは、中身ではなく、リファレンスそのものがコピーされます。

<pre>
# イメージ
%score1                       %score2
(math => 68, english => 90)   (math => 68, english => 90)

$score_ref1 ------------>     
$score_ref2 ------------>    (math => 68, english => 90)
</pre>

<a href="/blog/20101130129876.html">サブルーチン</a>に渡す場合は、ハッシュのリファレンスを渡す方が、中身のコピーが行われないので、効率が良くなります。

<pre>
# サブルーチンにハッシュのリファレンスを渡す
my_func($score_ref1);
</pre>

<h3>無名ハッシュ生成子</h3>

ハッシュのリファレンスは、リファレンス生成子「\」を使用すると作成できますが、少し手間がかかります。すぐにハッシュのリファレンスを作成するために、<a href="/blog/20170926150643.html">無名ハッシュ生成子</a>と呼ばれる演算子が定義されています。

<pre>
my $score_ref = {math => 68, english => 90};
</pre>

通常のハッシュが「()」で作成されるのに対して、ハッシュのリファレンスは無名ハッシュ生成子「{}」を使って生成されているのに注意してください。

Perlのソースコードでは、この記法が頻繁に登場します。ハッシュなのか、ハッシュのリファレンスなのかをソースコードから読み取ることが大切です。

<pre>
# ハッシュ
my %score =(math => 68, english => 90);

# ハッシュのリファレンス
my $score = {math => 68, english => 90};
</pre>

<h3>デリファレンス</h3>

ハッシュのリファレンスを生成するには、リファレンス生成子を使いました。今度は反対にハッシュのリファレンスから、ハッシュを取り出してみましょう。

そのためには<b>デリファレンス</b>という操作を行います。

<pre>
my $score_ref = {math => 68, english => 90};

# デリファレンス
my %score = %{$score_ref};
</pre>

デリファレンスは「%{ハッシュのリファレンス}」という記法を使って行うことができます。

ハッシュのリファレンスがスカラ変数の場合は「{}」を省略することもできます。

<pre>
my %score = %$score_ref;
</pre>

<h4>標準関数に引数として渡す</h4>

<a href="/blog/20080210120265.html">keys関数</a>、<a href="/blog/20100222126425.html">values関数</a>、<a href="/blog/20080212120283.html">each関数</a>などのハッシュに関する関数は、引数にハッシュをとります。そのため、ハッシュのリファレンスを渡したい場合は、デリファレンスする必要があるので注意してください。

<pre>
# デリファレンスして標準関数に渡す
keys %$hash;
values %$hash;
each %$hash;
</pre>

<h3>ハッシュのリファレンスからハッシュの値を取り出す</h3>

ハッシュのリファレンスからハッシュの値を取り出すにはアロー演算子「->」を使うことができます。

<pre>
# ハッシュのリファレンスからハッシュの値の取得
my $score_math = $score_ref->{math};

# ハッシュのリファレンスからハッシュの値を設定
$score_ref->{math} = 67;
</pre>

アロー演算子が使われている場合は、ハッシュのリファレンスです。そうでない場合は、ハッシュです。これもソースコードの中で、しっかり読み取れるようになってください。

<pre>
# ハッシュの値の取得
my $score_math = $score{math};

# ハッシュの値を設定
$score{math} = 67;
</pre>

アロー演算子のあるなしだけで、ハッシュなのかハッシュのリファレンスなのかが異なるので、しっかり見ることが大切です。

<h4>配列のリファレンス</h4>

ハッシュのリファレンスと同じくらい頻繁に利用されるものとして配列のリファレンスがあります。

<pre>
my $nums_ref = [1, 3, 5];
</pre>

配列のリファレンスについては以下で詳しく解説しています。

<ul>
  <li>
    <a href="/blog/20180214151861.html">配列のリファレンス</a>
  </li>
</ul>
