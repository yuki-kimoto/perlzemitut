<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161030147778.html">
      <span itemprop="name">オブジェクト指向</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">汎用的なコンストラクタ</span>
    <meta itemprop="position" content="4" />
  </li>
</ol>
<h2>汎用的なコンストラクタの雛形</h2>



汎用的なコンストラクタの雛形を提示しておきます。汎用的なコンストラクタの雛形はちょっと難しいです。

<h3>1. 汎用的なコンストラクタの指針</h3>

汎用的なコンストラクタは、クラスから呼ばれたときだけではなくて、<b>オブジェクトから呼び出された場合も考慮に入れる</b>必要があります。

クラスから呼ばれた場合と

<pre>
my $book = Book->new;
</pre>

オブジェクトから呼ばれた場合の

<pre>
my $book2 = $book->new
</pre>

の両方に対応する。

またもうひとつの指針として、コンストラクタと初期化処理は分離するということが挙げられます。<b>初期化用のinitメソッド</b>を作成してあげます。

<h3>2. 汎用的なコンストラクタの作成</h3>
以下が汎用的なコンストラクタの雛形です。
<pre>
sub new {
  my $proto = shift;
  my $class = ref $proto || $proto;
  my $self = {};
  bless $self, $class;
  
  $self->init(@_);
  return $self;
}

sub init {
  my ($self, @args) = @_;
  # 追加で行いたい処理
}
</pre>

<h3>3. オブジェクトからクラス名を取り出す処理</h3>

この部分がわかりにくいと思います。
<pre>
  my $proto = shift;
  my $class = ref $proto || $proto;　
</pre>
これは何をやっているかというと、$proto がオブジェクトだった場合には、<a href="/blog/20090318123712.html">ref関数</a>を使って関連付けられているクラス名を取り出します。

そうでない場合は、クラス名をそのまま使用するということをやっています。<a href="/blog/20090318123712.html">ref関数</a>に文字列(クラス名)が渡された場合は、偽値が返るので、|| の右側が実行されます。

そういうわけで、クラス名から呼ばれても、オブジェクトから呼ばれても、$classにはクラス名が入ることになります。

<h3>4. 初期化処理を分離する</h3>

初期化処理を分離しているのが以下の部分です。初期化を行う場合は、bless 関数で先にオブジェクトを作成しておいてあげます。そしてそのオブジェクトから、initメソッドを呼び出します。

ちょっとわかりにくいですが、慣れましょう。同じクラスのメソッドを呼び出すには、オブジェクトつまり、bless された $self から呼び出す必要があるのです。

<pre>
  my $self = {};
  bless $self, $class;
  $self->init(@_);
</pre>

<h3>5. なぜこのように作成する必要があるのか?</h3>

それはきちんとはまだいいません。継承のところで取り上げることにします。このようにオブジェクトを作成しておかないと、継承をしようとしたときに面倒な問題が発生するとだけいっておきます。

