<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20110212130370.html">
      <span itemprop="name">ファイル入出力</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <span itemprop="name">here</span>
  </li>
</ol>
<h2>バッファリングを無効にする</h2>



ブロックバッファリングは、出力を書き込みバッファに貯めて、蓄積した分を一度に書き出すのでパフォーマンス面では非常に効率的でした。

ローカルのファイルに書き出す場合はこれで問題になることはまずありません。問題が発生するのは、他のプロセスと通信するときです。Perlは、プロセス間通信の機能を使ってローカルの他のプロセスと通信したり、ソケットという機能を使ってネットワーク越しの他のプロセスと通信することができます。

このときブロックバッファリングが行われていると、自分は相手に対してデータを送ったつもりでも送れていないということが起こります。自分自身の書き込みバッファに残ったままになるわけです。

これを解決するために、ブロックバッファリングをコマンドバッファリングに変更する方法があります。コマンドバッファリングを有効にするには<a href="/blog/20161102147817.html">特殊変数</a>「<strong>$|</strong>」を<b>1</b>にセットします。

<pre>
$| = 1;
</pre>

<h3>サンプル</h3>

以下はコマンドバッファリングに切り替えるサンプルです。

<pre>
use strict;
use warnings;

# 書き込み用のファイル( 上書きするので注意 )
my $file = "sample20080812.txt";

open(my $fh, ">", $file)
  or die "Cannot open $file: $!";

# デフォルトの出力ハンドルを変更
my $oldfh = select $fh;

# コマンドバッファリングを有効にする。
$| = 1;

# 元のファイルハンドルに選択しなおす。
select $oldfh;

print $fh "遅延させないで書き込む\n";
print "この時点で書き込まれました。サイズは" . -s $file . "バイトです。\n";
sleep 3;

close $fh or die "Cannot close $file"; 
</pre>

(参考)<a href="/blog/20170522149546.html">sleep関数</a>、<a href="/blog/20080718121643.html">open関数</a>、<a href="/blog/20160312145776.html">close関数</a>、<a href="/blog/20100212126425.html">die関数</a>

<h3>コマンドバッファリング</h3>

Perlは、まったくバッファリングしない書き込みというのはサポートしていません。1文字づつ書き込むということが必要になることはないからです。変わりに、printというコマンドが終わった時点で、書き込みを行うコマンドバッファリングを使うことができます。

print関数を記述して、次の文を実行する前には、出力に書き出されるということが保障されます。

コマンドバッファリングは、対話型の通信を行うときに使うことが多いです。たとえば、相手にデータを送って、返答を待ち構えるとします。ネットワーク越しにデータを送るには、ソケット(一種のファイルハンドル)というものに書き込んで、返答を待ちます。このときもしブロックバッファリングが有効になっていると、書き込んだつもりでも実は書き込みバッファに溜め込んだままで、実際には書き込んでいないということになります。

これを回避するために、コマンドバッファリングは使われます。

<h3>コード解説</h3>

<h4>(1)コマンドバッファリングを有効にする</h4>

<pre>
# デフォルトの出力ハンドルを変更
my $oldfh = select $fh;

# コマンドバッファリングを有効にする。
$| = 1;

# 元のファイルハンドルに選択しなおす。
select $oldfh;
</pre>

特殊変数 $| に1を設定することで、コマンドバッファリングが有効になります。ここで、注意しなければいけないのは、$| に対する操作は、「デフォルトの出力先」に対する操作になるということです。

「デフォルトの出力先」というのは、print関数でファイルハンドルを省略したときの出力先のことです。デフォルトの出力先はSTDOUTです。

$fh への書き込みに対してコマンドバッファリングを有効にするには、select 関数で「デフォルトの出力先」を変更してから、$| の値を1にします。

select関数は、現在のデフォルトの出力先を返却するので、保存しておいて、$| を操作した後、元に戻しておきます。
