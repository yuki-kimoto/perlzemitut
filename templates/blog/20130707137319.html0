<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20130220136137.html">
        <span itemprop="name">読み物</span></a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>ハッシュベースのオブジェクト指向を見直そう</h2>



僕自身はハッシュベースのオブジェクト指向が好きです。mopは簡単なことをするには複雑すぎると感じます。mopをコアに導入するか、いつできるかで、何年も何年もかかるなら、先にハッシュベースのオブジェクト指向モジュールをひとつコアに入れてほしい。これができたら、Perlユーザーの利便性はものすごく上がると思う。

僕自身はmopにはあんまり期待していない。なぜならハッシュベースのオブジェクト指向で十分すぎるクラスが作れるからだ。ハッシュベースのオブジェクト指向は、簡潔なのに、機能としては必要十分なクラスを作成することができる。

ハッシュベースのオブジェクト指向の利点を書いていく。

<h3>コンストラクタのパフォーマンス</h3>

ハッシュベースのオブジェクト指向のほうがコンストラクタの生成のパフォーマンスはだいぶといい。

<pre>
my $obj = SomeClass->new;
</pre>

これは、受け取った値を単純にハッシュに格納してblessしているからだ。パフォーマンスなんてと思うかもしれないけれど、実は大きなフレームワークにもなってくると、コンストラクタ生成処理がものすごく多い回数を使っていて、ここの部分で遅くなっているということもある。

そんなことで悩むんだったら、最初からハッシュベースのオブジェクト思考で書いて、パフォーマンスが速いほうがよいと思う。

<h3>アクセッサのパフォーマンス</h3>

アクセッサというのは、頻繁に呼ばれる。もしアクセッサを大量に呼ぶ部分で、モジュールのパフォーマンスネックが発生していたらどうすればいいだろう。こんなときも、ハッシュベースのオブジェクト指向なら簡単に解決する。

それは、アクセッサの呼び出しをハッシュへのアクセスに変更すればよいだけだからだ。これで20～30倍くらいは速くなる。

<pre>
# メソッド呼び出し
$self->title;

# ハッシュアクセス
$self->{title}
</pre>

もしmopで書いていたとしたら、こんなことはできないはず。

<h3>シンプル イズ ベスト</h3>

たくさんの機能はなくても、シンプルなオブジェクト指向モジュールで、きれいに実装された大きなフレームワークを実装することができる。これはMojoliciousなんかのフレームワークをみてみると、簡潔なオブジェクト指向モジュールで、よく整理されたクラスがきちんとできることがわかる。

<pre>
package SomeClass;
use Mojo::Base -base;

has x => 0;
has y => 0;
</pre>

アクセッサの生成と、デフォルト値が設定できれば、十分なことがほとんどだ。複雑だと、何かと負担は多くなる。

<h3>クラス設計には単一継承と委譲を使うのがわかりやすい</h3>

クラスを設計するときは、単一継承と委譲というテクニックを使うのがよいと感じます。この方針でクラスを設計するとクラスはわかりやすくなります。多重継承を使う必然性はなくて、クラスの構成を複雑にしがちになると思います。

たとえば単一継承で間に合わなくなった場合は委譲を使います。Rを継承して、クラスQの機能をクラスPに追加したい場合を考えましょう。このような場合は、オブジェクトQを生成して、オブジェクトPに持たせます。これが委譲というテクニックです。

<pre>
package P;
use Mojo::Base 'R';

use Q;

has q => sub { Q->new };
</pre>

このようにすればクラスQの機能を利用できるクラスPができますね。もちろんRを単一継承していますから、Rの機能は直接Pから利用できます。

<h3>オーバーライドが直感的</h3>

たとえばサブクラスでコンストラクタをオーバーライドしたいとしますね。ハッシュベースのオブジェクト指向であれば、その操作は直感的で、他の言語でもなじみがある書き方になります。

<pre>
sub new {
  my $self = shift->SUERP::new(@_);

  # ゴニョゴニョ

  return $self;
}
</pre>

mopのBUILDとかBUILDARGSというのは、わかりにくいです。

<h3>デストラクタはDESTROY</h3>

デストラクタはPerlの習慣どおりDESTROYです。わざわざmopのDEMOLISHを覚える必要もないです。

<h3>ハッシュベースのオブジェクト指向モジュールをお勧めします</h3>

メタオブジェクトプロトコルベースのオブジェクト指向よりも、ハッシュベースのオブジェクト指向を僕はお勧めします。コアにも、ハッシュベースのオブジェクト指向モジュールがひとつ入ってほしいです。

メタオブジェクトプロトコルベースのオブジェクト指向は、一時あおられまくって、すごいものだと思われていたけれど、僕はそれには賛同しません。

