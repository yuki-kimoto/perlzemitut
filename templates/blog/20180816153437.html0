<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>plenv - ユーザー環境にPerlをインストールする</h2>



plenvというツールを利用すると、ユーザー環境にPerlをインストールすることができます。システム標準のPerlを利用したくない場合や新しいバージョンのPerlを利用したい場合は便利です。またplenvを使うと複数のバージョンのPerlの切り替えを行うことができます。

<h3>plenvのインストール</h3>

plenvをインストールしてみましょう。前提として、plenvをインストールするにはgitがインストールされている必要があるので注意してください。

以下のコマンドを実行します。

<pre>
git clone git://github.com/tokuhirom/plenv.git ~/.plenv
git clone git://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/
</pre>

次にplenvのパスを通しましょう。plenvで用意されているbash用の設定ファイルを「.bash_profile」に追加します(bashの場合)。

以下のコマンドを実行してください。

<pre>
echo 'export PATH="$HOME/.plenv/bin:$PATH"' >> ~/.bash_profile
echo 'eval "$(plenv init -)"' >> ~/.bash_profile
exec $SHELL -l
</pre>

<h3>ユーザー環境へのPerlのインストール</h3>

利用できるPerlの一覧を見てみましょう。

<pre>
plenv install -l
</pre>

うまくplenvがインストールされていると、インストール可能なPerlの一覧が表示されます。

<pre>
Available versions:
 5.29.1
 5.29.0
 5.28.0
 5.28.0-RC4
 5.28.0-RC3
 5.28.0-RC2
 5.28.0-RC1
 ...
</pre>

ここで、599 Internal Exceptionなどエラーがでた場合は、以下の記事を元に、フィックスをこころみましょう。

<ul>
  <li>
    <a href="https://qiita.com/DQNEO/items/890b99134be0ad81d174">[対処法</a> 599 Internal Exception, https://fastapi.metacpan.org/v1/release/_search]
  </li>
  <li>
    <a href="https://github.com/miyagawa/HTTP-Tinyish/issues/14">want to check Mozilla :: CA</a>
  </li>
</ul>

どうしてもうまくいかない場合は<a href="/blog/20110220130464.html">perlbrew</a>で。

ユーザー環境にPerlをインストールします。5.20.3のPerlをインストールしてみましょう。時間がかかるので待ちます(約40分程度)。

<pre>
plenv install 5.20.3
</pre>

利用可能なPerlの一覧を表示してみましょう。

<pre>
plenv versions
</pre>

Perlが利用できると

以下のように利用できるPerlが表示されます。アスタリスクのあるものが現在利用しているPerlです。

<pre>
* system (set by /home/kimoto2/.plenv/version)
  5.20.3
</pre>

Perlを切り替えるにはplenvのglobalコマンドを使用します。

<pre>
plenv global 5.20.3
</pre>

plenvの利点として<a href="https://papix.hatenablog.com/entry/2018/03/10/160838">localコマンド</a>を使うと、ディレクトリ毎にPerlを切り替えることもできるようです。

Perlのバージョンを実際に確認してみましょう。

<pre>
perl -v
</pre>

以下のように5.20.3のバージョンになっています。

<pre>
This is perl 5, version 20, subversion 3 (v5.20.3) built for x86_64-linux
(with 1 registered patch, see perl -V for more detail)
</pre>

<h3>cpanmのインストール</h3>

モジュールをインストールするのに便利なcpanmもインストールしておきましょう。

<pre>
plenv install-cpanm
</pre>

これで以下のコマンドでモジュールがインストールできるようになります。

<pre>
cpanm JSON
</pre>

<h3>元のPerlに戻す</h3>

元のPerlに戻すには以下のようにします。

<pre>
plenv global system
</pre>

<h3>plenvでインストールしたPerlをcrontabで使う方法</h3>

plenvのはまりどころのひとつは、plenvでインストールしたPerlがcronからは利用されないということでしょう。これはcronから実行するときは、シェルが起動されないので.bash_profileが読み込まれないことが原因です。plenvによる設定は、.bash_profileの中に記述したからですね。

一番簡単な解決策は、crontabの中でPATHを、そのユーザーが持っている環境変数PATHの値に書き換えてあげることです。

まずplenvをインストールしたユーザーで、PATH環境変数の値を表示します。

<pre>
env | grep PATH
</pre>

PATHを含んだ環境変数がいくつか表示されるので、PATHというものを探します。(ユーザー名がadminsの場合の例です。)

<pre>
PATH=/home/kimoto2/.plenv/shims:/home/kimoto2/.plenv/bin:/home/kimoto2/.plenv/shims:/home/kimoto2/.plenv/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/kimoto2/.local/bin:/home/kimoto2/bin:/home/kimoto2/.local/bin:/home/kimoto2/bin:/home/kimoto2/.local/bin:/home/kimoto2/bin
</pre>

以下のコマンドでcrontabを編集します。

<pre>
crontab -e
</pre>

そして上記のPATHの値をcrontabの一番上に書き込みます。

<pre>
PATH=/home/kimoto2/.plenv/shims:/home/kimoto2/.plenv/bin:/home/kimoto2/.plenv/shims:/home/kimoto2/.plenv/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/kimoto2/.local/bin:/home/kimoto2/bin:/home/kimoto2/.local/bin:/home/kimoto2/bin:/home/kimoto2/.local/bin:/home/kimoto2/bin

# cronの設定が続く...
</pre>

これでcronが指定したバージョンのPerlを利用してくれるようになります。

<h4>Perlスクリプトの一行目の記述</h4>

Perlスクリプトの一行目の記述は以下のようenvコマンドを使った記述をしましょう。

<pre>
#!/usr/bin/env perl
</pre>

こうすると設定したPATHの値から自動的にperlを検出してくれます。

この方法は、見てのとおり、crontabの移植性がまったくないです。ユーザー名のkimoto2が直接埋め込まれています。

でもこの方法が一番よいと思います。その理由はcrontab内では、環境変数の変数展開ができないという制限があるので、うまく移植性を持たせることが難しいということが理由です。移植性を持たせると、記述量が多くなったり、追加のスクリプトが必要になったり、管理が煩雑になってしまいます。

それとどんなにがんばっても、crontabって環境ごとに、何らかの差分があることがほとんどなので、移植性を保たせてもあんまりメリットがないということもあります。

