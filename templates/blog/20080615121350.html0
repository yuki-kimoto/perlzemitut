<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/"><span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20101130129876.html"><span itemprop="name">サブルーチン</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">here</span>
  </li>
</ol>
<h2>Perlのサブルーチンの柔軟性をC言語と比較してみる</h2>



Perlのサブルーチンの特徴をまとめておきます。C言語と比較してみました。Perlの言語としての柔軟性が理解できると思います。※1

<h3>Perlのサブルーチンの特徴</h3>

<table>
  <tr>
    <td>
      　
    </td>
    <td>
      Perl
    </td>
    <td>
      C言語
    </td>
  </tr>

  <tr>
    <td>
      1
    </td>
    <td>
      サブルーチンの定義はどこで行っても良い
    </td>
    <td>
      一般的に、関数の前方宣言(プロトタイプ宣言)が必要
    </td>
  </tr>

  <tr>
    <td>
      2
    </td>
    <td>
      引数の型を宣言しておく必要がない
    </td>
    <td>
      引数の型を宣言しておく必要がある。
    </td>
  </tr>

  <tr>
    <td>
      3
    </td>
    <td>
      戻り値の型を宣言しておく必要がない
    </td>
    <td>
      戻り値の型を宣言しておく必要がある。
    </td>
  </tr>

  <tr>
    <td>
      4
    </td>
    <td>
      デフォルトで可変個の引数を受け取る
    </td>
    <td>
      引数の個数を宣言時に決めておく必要がある
    </td>
  </tr>

  <tr>
    <td>
      5
    </td>
    <td>
      リストを戻り値として使用可能
    </td>
    <td>
      配列を戻り値にすることはできない
    </td>
  </tr>

  <tr>
    <td>
      6
    </td>
    <td>
      レキシカル変数へのリファレンスを戻り値にできる
    </td>
    <td>
      ローカル変数のアドレスを戻り値にできない
    </td>
  </tr>

  <tr>
    <td>
      7
    </td>
    <td>
      コンテキストという概念がある
    </td>
    <td>
      コンテキストという概念はない
    </td>
  </tr>

  <tr>
    <td>
      8
    </td>
    <td>
      サブルーチンが属する名前空間がある
    </td>
    <td>
      関数が属する名前空間はない
    </td>
  </tr>

</table>

<h3>1. サブルーチンの定義はどこで行っても良い</h3>

<pre>
# perl ( サブルーチンの定義はどこで行ってもよい )

func() # ここでも使えるし 

sub func {

}

func() # ここでも使える
</pre>

<pre>
/* C言語 ( 一般的には、前方宣言が必要 ) */

int func(int x); /* 関数プロトタイプ宣言 */

func(3) /* ここで、使うためには、前方宣言( プロトタイプ宣言 ) が必要 */

int func( int x ){

}
</pre>

Perlでは、実行時にサブルーチンの名前をシンボルテーブルに探しにいきます。だから、どこにでも書くことができます。

C言語では、コンパイル時に、関数の名前が解決されます。関数を使う場所より後ろに関数定義があった場合は、使う場所より前で前方宣言( プロトタイプ宣言 ) がなされていなくてはなりません。

<h3>2. 3. 4. 引数の型、引数の個数、戻り値の型を、決めておく必要がない</h3>

<pre>
# Perl (最初に決めておくことは、サブルーチンの名前だけ。)
sub func {

}
</pre>

<pre>
/* C言語 ( 引数の型、引数の個数、戻り値の型を決めておく必要がある。 ) */

int func(int x, int y) {

}
</pre>

Perlでは、引数の型、引数の個数、戻り値の型は、実行時に決定されます。C言語では、引数の型、引数の個数、戻り値の型は、コンパイル時に決定されます。

<h3>5. リストを戻り値として使用可能</h3>

<pre>
# Perl (リストを戻り値として使用可能)

sub func {
    return (1, 2, 3);
}
</pre>

<pre>
/* C言語 ( 配列を返却するには,引数で受け取ったポインタを操作する必要がある ) */

int ary[100];
fucn(ary); /* ポインタを渡す */

void func(int *ary) {
  /* ここで、ポインタを通じて、 ary に値を代入する必要がある。 */
}
</pre>

Perlでは、リストを戻り値に、することができます。C言語では、配列を戻り値として返却することができません。呼び出し元へ、配列を返却したい場合は、引数で、ポインタとして渡して、それを操作する必要があります。

<h3>6. レキシカル変数へのリファレンスを戻り値にできる</h3>

<pre>
# Perl 
sub func {
  my $val = 1;
  return \$val;
}
</pre>

<pre>
/* C言語 */
int func(){
    int x;
    return &x;
}
</pre>

Perlでは、レキシカル変数は、どこかから参照されている限りは、メモリ上から破棄されません。C言語では、関数が終了してしまうと、ローカル変数は、破棄されてしまいます。

<h3>7. コンテキストという概念がある</h3>

Perlには、コンテキストに応じて、スカラーかリストを関数の戻り値として使用することができます。C言語には、このような概念はありません。

<h3>8. サブルーチンが属する名前空間がある</h3>

<pre>
# Perl
# 本当の名前は、main::func ( mainパッケージに属するfuncサブルーチン )
sub func {

}

package SomePackage;
# 本当の名前は、SomePackage::func 
# ( SomePackageパッケージに属する funcサブルーチン ) 
# 上記のfuncとは、まったく別のもの
sub func {

}
</pre>

<pre>
/* C言語 */
/* func は func であり、プログラムのどこから見ても func です。*/
int func() {

}
</pre>

Perlでは、すべてのサブルーチンは、名前空間に属します。Perlでは、名前空間のことをパッケージと呼びます。C言語は、名前空間を持ちません。

<h3>注</h3>
<span style="font-size:small;">※1 Cを批判しているわけではないのであしからず。Cは、「実行速度が速い」「ハードウェアよりのプログラミングが可能」「低レベルなデータ操作が得意」という特徴を持ちます。Perlはこれが苦手なのです。</span>
