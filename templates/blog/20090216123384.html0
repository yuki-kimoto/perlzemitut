<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161126148016.html">
      <span itemprop="name">ファイル操作</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span>
    </a>
    <meta itemprop="position" content="3" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20100412127089.html">
      <span itemprop="name">File::Spec</span>
    </a>
    <meta itemprop="position" content="4" />
  </li>
</ol>
<h2>ファイル名を実行環境のOSでのファイル名に変換する</h2>



OSに依存しないファイル名]を作成するにはFile::Spec->catfile を使えばよいのでした。今回は、あるファイル表現を実行環境のOSのファイル名に変換する方法を解説します。設定ファイルなどでファイル名を指定するときは、Unixでのファイル表現を使う場合が多いです。

<pre>
# Unixでのファイル表現
dir1/dir2/file.txt
</pre>

Windows上でこのUnixのファイル表現ををWindowsのファイル表現に変換したいとします。以下のようにするのが簡単です。

File::Specの、<b>splitdirメソッドで、$unix_pathを個別の部分に分解します。それを、catfileメソッドでつなげます。</b>catfileは、分解されたファイル名を\で結合してくれます。

<pre>
use File::Spec;
my $unix_path = 'dir1/dir2/file.txt';
my $windows_path = File::Spec->catfile(File::Spec->splitdir($unix_path));
</pre>

<h3>実行可能なサンプル</h3>

<pre>
use strict;
use warnings;

use File::Spec;
my $unix_path = 'dir1/dir2/file.txt';
my $windows_path = File::Spec->catfile(File::Spec->splitdir($unix_path));

print "1. ウインドウズのファイルパスに変換\n";
print $windows_path, "\n";
</pre>

<h3>Windowsでの出力結果</h3>

<pre>
1. ウインドウズのファイルパスに変換
dir1\dir2\file.txt
</pre>

