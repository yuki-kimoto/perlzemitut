<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20130220136137.html">
        <span itemprop="name">読み物</span></a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>Perlは構文がC言語、Java、PHP、JavaScriptに似ていて親しみやすいスクリプト言語</h2>



Perlの文法構造は独特なものではなくて、多く利用されている言語であるC言語、Java、PHP、JavaScriptに似ていて親しみやすいものになっています。何かを美しい、素晴らしいというのが好きな人もいますけれど、似ているほうが使いやすいという人もいますね。

<h3>if文</h3>

おなじみのif文。ブロックで区切られているので、周囲の行と区別しやすい感覚がありますね。

<pre>
# Perl, C, Java, PHP, JavaScript
if (条件) {

}
</pre>

<h3>while文</h3>

<a href="/blog/20100123126425.html">while文</a>はどうでしょうか。これもifと同じでブロックで区切られます。

<pre>
# Perl, C, Java, PHP, JavaScript
while (条件) {

}
</pre>

<h3>for文</h3>

for文も同じでブロックで囲まれます。

<pre>
# Perl, C, Java, PHP, JavaScript
for (初期値;条件;次の値) {

}
</pre>

<h3>文末にはセミコロン</h3>

Perlではひとつの実行文はセミコロンで区切られます。「区切り」という感じがしますね。

<pre>
# Perl, C, Java, PHP, JavaScript
実行文;
</pre>

<h3>変数宣言</h3>

Perlでは変数を使うときは変数宣言を行いましょう。変数宣言があると、どこから変数が始まったのかが、視覚的にわかりやすいですね。

<pre>
# Perl
my $num = 1;

# C, Java
int num = 1;

# JavaScript
var num = 1

# PHP (ない)
$num = 1
</pre>

<h3>print</h3>

変数の出力はPerlではprint関数です。

<pre>
# Perl, PHP
print $num;

# C
printf("%s", str);

# Java
System.out.print(num);

# JavaScript (ブラウザ言語のためなし)
</pre>

Perlは他の言語に慣れ親しんだ人なら、構文が似ているので、読みやすい感じを受けると思います。

