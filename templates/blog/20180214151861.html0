<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20100930127859.html">
      <span itemprop="name">リファレンス</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">here</span>
  </li>
</ol>
<h2>配列のリファレンス</h2>



Perlには<b>配列のリファレンス</b>というデータ構造が頻繁に登場します。このページでは、<a href="/blog/20100930127859.html">リファレンス</a>の中から配列のリファレンスを詳しく取り上げます。

<h4>配列のリファレンスとは</h4>

配列のリファレンスとは、<a href="/blog/20161012147627.html">配列</a>に対するリファレンスのことです。リファレンスというのは、指すということを表します。配列に対して、リファレンス生成子「\」を使用すると、配列のリファレンスを作成することができます。

<pre>
# 配列のリファレンスを作成
my @nums = (1, 3, 5);
my $nums_ref = \@nums;
</pre>

配列のリファレンスは、<a href="/blog/20161107147852.html">スカラ変数</a>に代入されるとういうことに注意してください。

配列のリファレンスのイメージを以下に書いてみます。

<pre>
# イメージ
                      @nums 
$nums_ref  ------->   (1, 3, 5)
</pre>

配列のリファレンスは、配列そのものではなく「配列を指し示すもの」を表現します。

<h4>配列のリファレンスは代入で中身がコピーされない</h4>

配列と配列のリファレンスの違いをここから見ていきましょう。

配列は、代入によって、中身がすべてコピーされますが、配列のリファレンスはコピーが行われません。

<pre>
# 配列は値がコピーされる
my @nums1 = (1, 3, 5);
my @nums2 = @nums1;

# 配列のリファレンスは値はコピーされない
my @nums1 = (1, 3, 5);
my $nums_ref1 = \@nums1;
my $nums_ref2 = $nums_ref1;
</pre>

以下はイメージです。配列の場合は、中身すべてがコピーされるのに対して、配列のリファレンスは、中身ではなく、リファレンスそのものがコピーされます。

<pre>
# イメージ
@nums1                       @nums2
(1, 3, 5)                    (1, 3, 5)

$nums_ref1 ------------>     
$nums_ref2 ------------>    (1, 3, 5)
</pre>

<a href="/blog/20101130129876.html">サブルーチン</a>に渡す場合は、配列のリファレンスを渡す方が、中身のコピーが行われないので、効率が良くなります。

<pre>
# サブルーチンに配列のリファレンスを渡す
my_func($nums_ref1);
</pre>

<h3>無名配列生成子</h3>

配列のリファレンスは、リファレンス生成子「\」を使用すると作成できますが、少し手間がかかります。すぐに配列のリファレンスを作成するために、<a href="/blog/20170924150634.html">無名配列生成子</a>と呼ばれる演算子が定義されています。

<pre>
my $nums_ref = [1, 3, 5];
</pre>

通常の配列が「()」で作成されるのに対して、配列のリファレンスは無名配列生成子「[]」を使って生成されているのに注意してください。

Perlのソースコードでは、この記法が頻繁に登場します。配列なのか、配列のリファレンスなのかをソースコードから読み取ることが大切です。

<pre>
# 配列
my @nums = (1, 3, 5);

# 配列のリファレンス
my $nums = [1, 3, 5];
</pre>

<h3>デリファレンス</h3>

配列のリファレンスを生成するには、リファレンス生成子を使いました。今度は反対に配列のリファレンスから、配列を取り出してみましょう。

そのためには<b>デリファレンス</b>という操作を行います。

<pre>
my $nums_ref = [1, 3, 5];

# デリファレンス
my @nums = @{$nums_ref};
</pre>

デリファレンスは「@{配列のリファレンス}」という記法を使って行うことができます。

配列のリファレンスがスカラ変数の場合は「{}」を省略することもできます。

<pre>
my @nums = @$nums_ref;
</pre>

<h4>標準関数に引数として渡す</h4>

<a href="/blog/20100104126425.html">shift関数</a>、<a href="/blog/20100105126425.html">unshift関数</a>、<a href="/blog/20100107126425.html">pop関数</a>、<a href="/blog/20100106126425.html">push</a>などの配列に関する関数は、引数に配列をとります。そのため、配列のリファレンスを渡したい場合は、デリファレンスする必要があるので注意してください。

<pre>
# デリファレンスして標準関数に渡す
shift @$array;
unshift @$array, $element;
push @$array, $element;
pop @$array;
</pre>

<h3>配列のリファレンスから配列の値を取り出す</h3>

配列のリファレンスから配列の値を取り出すにはアロー演算子「->」を使うことができます。

<pre>
# 配列のリファレンスから配列の値の取得
my $num = $nums_ref->[3];

# 配列のリファレンスから配列の値を設定
$nums_ref->[3] = 67;
</pre>

アロー演算子が使われている場合は、配列のリファレンスです。そうでない場合は、配列です。これもソースコードの中で、しっかり読み取れるようになってください。

<pre>
# 配列の値の取得
my $num = $nums[3];

# 配列の値を設定
$nums[3] = 67;
</pre>

アロー演算子のあるなしだけで、配列なのか配列のリファレンスなのかが異なるので、しっかり見ることが大切です。

<h4>ハッシュのリファレンス</h4>

配列のリファレンスと同じくらい頻繁に利用されるものとしてハッシュのリファレンスがあります。

<pre>
my $score_ref = {math => 78, english => 89};
</pre>

ハッシュのリファレンスについては以下で詳しく解説しています。

<ul>
  <li>
    <a href="/blog/20180208151809.html">ハッシュのリファレンス</a>
  </li>
</ul>
