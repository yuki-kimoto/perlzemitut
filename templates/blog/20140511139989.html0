<script>location.href="https://mojolicious.perlzemi.com/blog/20140511139989.html";</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20140319139520.html">
      <span itemprop="name">Mojolicious</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>データベースとプログラムの連携 | Mojolicious入門</h2>



データベースの基礎を学習した後は、<strong>プログラムからデータベースにアクセス</strong>する方法を学びましょう。

<h3>DBD::SQLiteのインストール</h3>

まず最初にSQLiteを使えるようにする必要があります。Windowsの場合はcpanコマンドを使って、Linux, Mac OS Xの場合は、cpanmコマンドを使って<strong>DBD::SQLite</strong>モジュールをインストールします。

<pre>
# Windows
cpan DBD::SQLite

# Linux, Mac OS X
cpanm DBD::SQLite
</pre>

<h3>DBIx::Connectorのインストール</h3>

Perlにはデータベースを操作する場合にDBIを使うようにと解説されていることが多いですが、Webサイトを作成する場合は、DBIをそのまま使ってはいけません。Webサイトを作成する場合は、プリフォークサーバーで本番環境において配置するのですが、DBIはデータベースとの接続の管理をしてくれませんので、接続が途切れるという不具合がおきます。

ですから、DBIにデータベースとの接続を自動的に管理してくれる機能がつけられたモジュールを利用する必要があります。今回はDBIの機能に、接続の自動管理機能がついた、DBIx::Connectorというモジュールを使います。このようなモジュールはコネクションマネージャーと呼ばれるので覚えておきましょう。

DBIx::Connectorをインストールします。

<pre>
# Windows
cpan DBIx::Connector

# Linux, Mac OS X
cpanm DBIx::Connector
</pre>

<h3>データベースへの接続</h3>

ではDBIx::Connectorを使って、データベースにアクセスしてみましょう。まず最初にDBIx::Connectorオブジェクトを作成します。DBIx::Connectorオブジェクトを作成するにはnewメソッドを使用します。

<pre>
use DBIx::Connector;

# 接続の作成
my $dsn = 'dbi:SQLite:dbname=test.db';
my $conn = DBIx::Connector->new(
  $dsn, # データソース名
  undef, # ユーザー名
  undef, # パスワード
  # DBIのオプション
  {
    RaiseError => 1,
    PrintError => 0,
    AutoCommit => 1
  }
);
</pre>

DBIx::Connectorのnewの引数は、DBIのconnectメソッドの引数と同じです。newの第1引数はデータソースと呼ばれるデータベースに接続するための情報を指定します。フォーマットは少し特殊ですが覚えてしまいましょう。

 データソースの中で接続するデータベース名を指定することができます。SQLiteではデータベースは単純にファイルとして作成されるのでデータベース名として好きな名前を指定します。戻り値にはデータベースハンドルと呼ばれるデータベースと通信するためのオブジェクトが返されます。

これを実行するとカレントディレクトリにtest.dbというファイルができているはずです。

<h4>ユーザ名とパスワードを指定して接続する</h4>

SQLiteで作成したデータベースへの接続にはユーザ名やパスワードは必要ありません。ですがMySQLやPostgreSQLやOracleなどの標準的なデータベースではユーザ名とパスワードを接続のときに指定する必要があります。

DBIを使用してユーザ名とパスワードを指定して接続するには次のようにします。第2引数にユーザ名、第3引数にパスワードを指定します。

<pre>
my $conn = DBIx::Connector->new($dsn, $user, $password);
</pre>

<h4>オプションの解説</h4>

DBIx::Connectorのnewメソッドの第4引数にはDBIのオプションを指定することができます。

<pre>
DBIx::Connector->new($dsn, $user, $password, {opt1 => $val1, opt2 => $val2, ..});
</pre>

DBIのデフォルトの動作はエラーが発生した場合に警告を標準エラー出力に出力するようになっています。

ですが警告ではなく、エラーメッセージを出力してプログラムを終了するほうがよりよいように思います。

警告を出力しないようにするには次のようにします。

<pre>
PrintError => 0
</pre>

またエラーメッセージを出力してプログラムを終了するようにするには次のようにします。

<pre>
RaiseError => 1
</pre>

またDBIにはAutoCommitと呼ばれるオプションがあります。これはコミットと呼ばれる処理を自動的に行うか行わないかを決めるオプションです。データベースのドライバによってデフォルトの値が異なる可能性がありますので明示的に指定しておいたほうが良いと思います。わたしの場合は自動的にコミットするようにしておいてトランザクションが必要になった場合にAutoCommitを0に設定します。

ですのでこのようなことを踏まえてデータベースに接続する場合は次のようなサンプルのような記述にしておくのがよいと思います。

<h3>データベースハンドルの取得</h3>

データベースにアクセスするためには、コネクションマネージャーからデータベースハンドルを取得する必要があります。データベースハンドルは<strong>dbh</strong>メソッドで取得できます。

<pre>
# データベースハンドルの取得
my $dbh  = $conn->dbh;
</pre>

これを使って、データベースへアクセスを行います。

<h3>SQLの実行</h3>

SQLとはテーブルを作成したり、データベースにデータを登録したり、データを取り出したりするために使用する問い合わせ言語のことです。基本的なSQLについてはこれから解説します。ここではまずSQLを実行する方法を解説します。

SQLを実行する方法には2通りの方法があります。

<ol>
  <li>
    doメソッドを使用して直接実行する方法
  </li>
  <li>
    prepareメソッドでステートメントハンドルを準備してからexecuteメソッドで実行する方法
  </li>
</ol>

二つの方法がありますが、原則として2番目の方法を使います。Webサイトではユーザーから受け取ったデータをデータベースに挿入することになりますが、一番目の方法は、セキュリティによる危険がありますので、2番目の方法を使うようにしてください。

今回は2番目の方法だけ解説します。

<h3>レコードの追加 insert</h3>

テーブルにレコードを挿入するにはinsert文を使用します。

<pre>
# ステートメントハンドルの準備
my $sth = $dbh->prepare('insert into book (id, title, author) values (?, ?, ?)');

# SQLの実行
my @params = ('00000001', 'Perl', 'kimoto');
$sth->execute(@params);
</pre>

まず最初にprepare文で、ステートメントハンドルを準備します。パラメーターの部分は「?」を記述します。これはプレースホルダーと呼ばれます。

SQLを実際に実行するには、ステートメントハンドルから<strong>execute</strong>メソッドを呼び出します。引数にはプレースホルダーに埋め込む値を配列で指定します。

ユーザーから受け取った値を利用するときは、必ずプレースホルダーを利用してください。プレースホルダーを使えば、値は適切にクォートされますので、安全です。

<h3>レコードの更新 update</h3>

テーブルにあるデータを更新するにはupdate文を使用します。

<pre>
# ステートメントハンドルの準備
my $sth = $dbh->prepare('update book set title = ? where author = ?');

# SQLの実行
my @params = ('Ruby', 'taro',);
$sth->execute(@params);
</pre>

<h3>レコードの削除 delete</h3>

レコードを削除するにはdelete文を使用します。

<pre>
# ステートメントハンドルの準備
my $sth = $dbh->prepare('delete from book where id = ?');

# SQLの実行
my @params = ('00000001');
$sth->execute(@params);
</pre>

<h3>レコードの取得 select</h3>

列を取得するにはselect文を使用します。他のSQL文と異なるのは、各行を取得するためにフェッチという処理を行うことです。

<pre>
# ステートメントハンドルの準備
my $sth = $dbh->prepare('select * from book where title like ?');

# SQLの実行
my @params = ('%Perl%');
$sth->execute(@params);

# フェッチ
while (my $row =  $sth->fetchrow_hashref) {
  my $id = $row->{id};
  my $title = $row->{title};

  print "id: $id, title: $title\n";
}
</pre>

<strong>fetchrow_hashref</strong>メソッドを使用すれば、各行のデータをハッシュリファレンスとして取得できます。<a href="/blog/20100123126425.html">while文</a>ですべての行を取得するまで繰り返します。

<h3>日本語の扱い</h3>

プログラムの内部では内部文字列を利用して、外部へ出力するときは、バイト文字列に変換するということを、解説しましたね。データベースの場合もこれと同じ考えです。データベースにデータを渡すときは、内部文字列をバイト文字列に変換する必要があります。

けれどもこれは、とてもわずらわしいですね。でも、これを自動で行ってくれる<b>sqlite_unicode</b>というオプションがあるので、オプションさえ指定しておけば、後は何も考える必要はありません。

接続するときにオプションとして指定するようにしましょう。

<pre>
use DBIx::Connector;

# 接続の作成
my $dsn = 'dbi:SQLite:dbname=test.db';
my $conn = DBIx::Connector->new(
  $dsn, # データソース名
  undef, # ユーザー名
  undef, # パスワード
  # DBIのオプション
  {
    RaiseError => 1,
    PrintError => 0,
    AutoCommit => 1,
    sqlite_unicode => 1 # 内部文字列を自動的にUTF-8バイト文字列に変換
  }
);
</pre>

<h3>サンプルコード</h3>

では実際に動かすことのできるプログラムを書いてみましょう。SQLiteでは、データベースをメモリ上に作成することもできるので、試験が簡単です。データソース名の中で、「dbname」に「:memory:」を指定します。ソースコードはUTF-8で保存してください。

<pre>
use strict;
use warnings;
use utf8;

use DBIx::Connector;
use Encode 'encode';

# 接続の作成
my $dsn = 'dbi:SQLite:dbname=:memory:';
my $conn = DBIx::Connector->new(
  $dsn, # データソース名
  undef, # ユーザー名
  undef, # パスワード
  # DBIのオプション
  {
    RaiseError => 1,
    PrintError => 0,
    AutoCommit => 1,
    sqlite_unicode => 1
  }
);

# データベースハンドルの取得
my $dbh  = $conn->dbh;

# テーブルの作成
my $create_table_sql = <<"EOS";
create table book (
  id primary key,
  title not null default '',
  author not null default ''
);
EOS
$dbh->do($create_table_sql);

# insert文
my $sth = $dbh->prepare('insert into book (id, title, author) values (?, ?, ?)');
$sth->execute('00000001', 'Perl', 'kimoto');

# update文
$sth = $dbh->prepare('update book set title = ? where author = ?');
$sth->execute('Ruby', 'taro');

# delete文
$sth = $dbh->prepare('delete from book where id = ?');
$sth->execute('00000001');

# insert文
$sth = $dbh->prepare('insert into book (id, title, author) values(?, ?, ?)');
$sth->execute('00000001', 'Perl Tutorial', '木本');
$sth->execute('00000002', 'Perl advantage', '健');
$sth->execute('00000003', 'Ruby Tutorial', '洋介');

# select文
$sth = $dbh->prepare('select * from book where title like ?');
$sth->execute('%Perl%');

# フェッチ
while (my $row =  $sth->fetchrow_hashref) {
  my $id = $row->{id};
  my $title = $row->{title};
  my $author = $row->{author};

  my $line = "id: $id, title: $title, author: $author\n";
  
  # Windowsの場合はcp932で、それ以外のOSはUTF-8で出力
  my $enc = $^O eq 'MSWin32' ? 'cp932' : 'UTF-8';
  print encode($enc, $line);
}
</pre>

列「title」に「Perl」を含んでいる場合だけ、行の内容が表示されます。

<pre>
id: 00000001, title: Perl Tutorial, author: 木本
id: 00000002, title: Perl advantage, author: 健
</pre>

