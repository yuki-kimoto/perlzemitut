<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>Object::Simple - Mojo::Base互換のアクセサを生成</h2>



デフォルト値つきのアクセサを作成するには<strong>Object::Simple</strong>を使用します。Object::SimpleはMojoliciousのMojo::Baseと高いレベルで互換性があります。

<pre>
package Point;
use Object::Simple -base;

has x => 1;
has y => 1;

package main;

my $point = Point->new;
print $point->x;

1;
</pre>

useするときに-baseを指定すると、Object::Simpleを継承することができます。Object::Simpleはnewメソッドを持ちます。またアクセッサを定義するためのhasというメソッドがインポートされます。またstrictとwarningsが自動的に有効になります。

<h3>一般的なクラスのサンプル</h3>

一般的なクラスのサンプルです。Pointクラスはxとyというアクセッサを持ちます。またclearというxとyを0に初期化するメソッドを持ちます。

<pre>
package Point;
use Object::Simple -base;

has x => 0;
has y => 0;

sub clear {
  my $self = shift;
    
  $self->x(0);
  $self->y(0);
}

1;
</pre>

Pointクラスは次のように使用します。コンストラクタnewはObject::Simpleから継承したものです。

<pre>
my $point = Point->new(x => 4, y => 6);

$point->x(1);
$point->y(2);

my $x = $point->x;
my $y = $point->y;

$point->clear;
</pre>

<h3>Object::Simpleの使い方</h3>

属性を定義する方法がいくつかあります。

<h4>複数の属性を一度に定義</h4>

<pre>
# デフォルト値なし
has ['x', 'y'];

# デフォルト値あり
has ['x', 'y'] => 0;
</pre>

配列のリファレンスをhasの第一引数に指定すると複数のアクセッサを一度に定義できます。

<h4>デフォルト値の指定</h4>

<pre>
# 定数
has foo => 1;

# 配列のリファレンス
has foo => sub { [] };

# ハッシュのリファレンス
has bar => sub { {} };

# オブジェクト
has baz => sub { LWP::UserAgent->new };
</pre>

配列のリファレンス、ハッシュのリファレンス、オブジェクトなどをデフォルト値に設定するときはsub { }で囲んで遅延評価する必要があります。

<h4>すべてのアクセサを一度に定義</h4>

<pre>
has [qw/foo bar baz/],
    some => 1,
    other => sub { 5 };
</pre>

すべてのアクセサの定義を一度に行うこともできます。

<h3>継承のサンプル</h3>

Pointクラスを継承したPoint3Dクラスを作成するサンプルです。

<pre>
package Point3D;
use Point -base;

has z => 0;

sub clear {
  my $self = shift;
  $self->SUPER::clear();
  $self->z(0);
}

1;
</pre>

<h3>コンストラクタのオーバーライド</h3>

コンストラクタnew()をオブジェクトの初期化や引数の加工のためにオーバーライドすることができます。

<pre>
# オブジェクトの初期化のためのnew()のオーバーライド
sub new {
  my $self = shift->SUPER::new(@_);
  
  # Initialization
  
  return $self;
}
</pre>

<pre>
# 引数の加工のためのnew()のオーバーライド
sub new {
  my $self = shift;
  
  $self->SUPER::new(x => $_[0], y => $_[1]);
  
  return $self;
}
</pre>

