<script>location.href="https://mojolicious.perlzemi.com/blog/20150304142547.html";</script>

<h2>Mojolicious 6がリリースされました</h2>

少し情報提供が遅れましたが、先日Mojolicious 6がリリースされました。MojoliciousはPerlのWebフレームワークです。

<blockquote>
<a href="http://blog.kraih.com/post/112170845701/mojolicious-6-0-released-perl-real-time-web">Mojolicious 6.0 released: Perl real-time web framework</a>
</blockquote>

Mojoliciousの作者のセバスチャン・リーデルさんのアナウンスを日本語訳しておきます。

<h3>リリース報告</h3>

Mojolicious 6.0(Clinking Beer Mugs)のリリースをアナウンスできて、とても大きな喜びに満たされています。これは、コアチームに新しいメンバーを迎えての最初のメジャーリリースです。ようこそ、ヤン・ヘニング・トーセン(Jan Henning Thorsen)。

2015年は、6.0のリリースの年として記憶されるように思えるでしょうけれど、まだこの年は早い時期ですし、楽しみにできることは、たくさんあります。IETFはHTTP/2を承認しました。これが、よいにしろ悪いにしろ、私たちがWebアプリケーションを開発する方法完全に変更してしまうかもしれません。

これが私たちを導く場所を待っていることは、できないでしょう。また、今年はニューヨークでMojoconfがあります。準備はすでに始まっており、まもなく詳細を共有することができるでしょう。

リアルタイムWebテクノロジーはますます主流になってきており、コミュニティは成熟してきましたけれど、着実な成長を続けています。Github上でも、もっともスターがついたPerlのプロジェクトとしての地位を強化できました。

公式ドキュメントには、毎日数百人のユーザーが訪れています。メーリングリストの購読者は1000人を超えました。みなさん、ありがとう。

今年の主要な焦点は、パフォーマンスの改善です。すべての部品がかなり速くなり、スケーラビリティも増しました。新しいいくつかの機能追加もあります。以下は、機能のハイライトです。

<ul>
  <li>
    ネストされたヘルパー。ヘルパーを名前空間の中に入れ子にできるようになりｍさいた。たとえば、組み込みのヘルパー reply->asset のように。
  </li>
  <li>
    IO::Socket::Socksを通したSOCKS5のサポート。
  </li>
  <li>
    Net::DNS::Nativeを通して、ノンブロッキングの名前解決のサポート。
  </li>
  <li>
    新しいMojo::DOM。完全にAPIがデザインされなおしました。また、ケース印センシティブな属性のセレクタのサポートが追加されました。[foo=”bar” i]の「ように。
  </li>
  <li>
    RFC 3339のサポート。ほとんどすべての新しいREST APIがそれを使います。
  </li>
  <li>
    コンテントネゴシエーション。コンテントネゴシエーションは、If-None-Match 、If-Modified-Sinceと一緒に使えます。
  </li>
  <li>
    IPv6をあらゆる場面でサポート: IO::Socket::IPが、とても信頼できるものになったので、いつでもそれを使用するようになりました。
  </li>
  <li>
    wantarray()は使いません。セキュリティの脆弱性を防ぐために、コードから完全に取り除かれました。
  </li>
  <li>
    Mojo::PgとMinion: 安定的な1.0のリリースに到達しました。これは、スピンオフプロジェクトになりました。
  </li>
  <li>
    より多くのことを知りたいなら、GitHub上のChangesを見てください。
  </li>
</ul>

<blockquote>
<a href="http://cpansearch.perl.org/src/SRI/Mojolicious-6.0/Changes">Mojolicious 6.0 Changes</a>
</blockquote>

楽しんでね!

<h3>Mojolicious 6で互換性が崩れる部分をピックアップ</h3>

MojoliciousはPerlのWebフレームワークのひとつで、ノンブロッキングI/Oをサポートしているので、並列HTTPリクエストに対する処理が最適に処理されるようになっています。

Mojoliciousの互換性は、全体的に高いですが、将来のために、部分的な非互換を許容しています。ですから、Mojoliciousは新しいバージョンいきなりアップグレードするのではなくって、開発環境で試験をしてから、アップグレードしてくださいね。

Mojolicious 6において互換性が崩れる部分が少しありますので、その部分について書いておきます。

<h4>paramメソッドは、リストコンテキストで評価されなくなりました。</h4>

paramメソッドは、リストコンテキストで評価されなくなりました。セキュリティの脆弱性を防ぐために、コード上のwantarrayを使っている部分ががすべて取り除かれました。

以下のようなコードが、以前のようには機能しなくなるので、注意してください。

<blockquote>
my @params = $c->param('title');
</blockquote>

<h4>paramメソッドは、配列のリファレンスを受け取らなくなりました。</h4>

paramメソッドは、配列のリファレンスを受け取らなくなりました。以下の記述が以前のようには、機能しなくなるので、注意してください。

<blockquote>
my @params = $c->param(['title', 'author']);
</blockquote>

paramメソッドの一部仕様変更は、広い範囲に影響があると思われますが、Webアプリは、セキュリティリスクを下げる必要が高い分野ですので、これは、いたしかたがないと感じます。上記のふたつのコードが利用されている可能性があれば、チェックしてみてください。

<h4>Mojo::JSONのオブジェクト指向サポートがなくなりました</h4>

Mojo::JSONのオブジェクト指向サポートがなくなりました。もし次のように記述していた場合は、下のものに書き換えてください。

<pre>
# 旧
use Mojo::JSON;
Mojo::JSON->new->encode($foo);
Mojo::JSON->new->decode($foo);

# 新
use Mojo::JSON 'encode_json', 'decode_json';
encode_json($foo);
decode_json($foo);
</pre>

<h4>render_static, render_not_found, render_exceptionがなくなります</h4>

コントローラクラスのrender_static, render_not_found, render_exceptionがなくなります。代わりに次のように記述しましょう。

<pre>
# 旧
$c->render_static($path);
$c->render_not_found;
$c->render_exception;

# 新
$c->reply->static($path);
$c->reply->not_found;
$c->reply->exception;
</pre>

<h4>bridgeがなくなってunderになります。</h4>

bridgeと書いているところはunderに変更しましょう。

<pre>
# 旧
$r->bridge(sub { ... })

# 新
$r->under(sub { ... });
</pre>

<h4>Mojo::DOM周辺はまだ安定していません</h4>

Mojo::DOM周辺の実装はまだ安定していませんので、もし使っている場合は、変更箇所を確認しましょう。

