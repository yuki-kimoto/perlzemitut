<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">here</span>
    <meta itemprop="position" content="3" />
  </li>
</ol>
<h2>Math::Random::MT - 自然乱数に近い擬似乱数を発生</h2>



擬似乱数を発生させるよいアルゴリズムに<strong>メルセンヌ・ツイスタ法</strong>というものがあります。

メルセンヌ・ツイスタ法によって擬似乱数を求めるモジュールが<strong>Math::Random::MT</strong>というモジュールです。CAPNから取得することができます。

<pre>
use Math::Random::MT qw/rand srand/;

srand time^$$;
my $num = rand 100
</pre>

Perlの標準モジュールである<a href="/blog/20080906122079.html">rand関数</a>や<a href="/blog/20080908122097.html">srand関数</a>と同じように使用することができます。Math::Randam::MTを使用するときは、srand関数を明示的に呼び出すようにします。

<a href="/blog/20081008122347.html">time関数</a>は時刻、$$は<a href="/blog/20180520152690.html">プロセスID</a>で、srandに与える初期値がなるべくランダムになるようにしています。

<h3>サンプル</h3>

Math::Randam::MTを使ったサンプルです。

<pre>
use strict;
use warnings;

use Math::Random::MT qw/rand srand/;

print "(1)よりランダムな乱数を発生させる。\n";
# できるだけランダムな初期値を与える。
srand time^$$;
for my $i (1 .. 20) {
  print "$i回目: " . int(rand 100) . "\n";
}
print "\n";
</pre>

