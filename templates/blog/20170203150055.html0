<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20100809127859.html">
        <span itemprop="name">XS</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>C++のライブラリをXSから利用する方法</h2>



PerlのXSでは<b>C++</b>で書かれたライブラリを呼び出すこともできます。コンパイラとリンカに、C++用の「g++」を指定するだけです。

<h3>h2xsでモジュールを作成</h3>

最初にh2xsでXS用のモジュールを作成します。

<pre>
h2xs -A -n SomeModule
</pre>

こうすると「SomeModule」というディレクトリが作成されます。次のようなファイルとディレクトリが作成されます。

<pre>
Changes
lib/
Makefile.PL
MANIFEST
ppport.h
README
SomeModule.xs
t/
</pre>

<h3>C++のライブラリの作成</h3>

C++のライブラリを作成しましょう。ヘッダファイルとソースファイルを作成します。

<b>mylib.h</b>

ヘッダファイルです。mylib_printを宣言しています。

<pre>
void mylib_print();
</pre>

<b>mylib.cpp</b>

C++のソースファイルです。mylib_printは「mylib_cpp」という文字列を出力する関数です。ファイル名の拡張子が「.cpp」であることに注意してください。

<pre>
#include <iostream>

void mylib_print() {
  std::cout << "mylib_cpp\n";
}
</pre>

ヘッダファイルとソースファイルは保存して、XSファイルが存在するディレクトリと同じディレクトリに配置してください。

<h3>XSファイルの記述</h3>

XSファイルを記述しましょう。mylib_printを呼び出しています。

<pre>
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "ppport.h"
#include "mylib.h"

MODULE = SomeModule		PACKAGE = SomeModule		

void
foo(...)
  PPCODE:
{
  mylib_print();
  XSRETURN(0);
}
</pre>

<h3>Makefile.PLの修正</h3>

次にMakefile.PLを少し修正しましょう。一番下の「OBJECT」オプションがデフォルトではコメントアウトされているので、コメントを取り除きます。「$(O_FILES)」という設定をすれば、カレントディレクトリのすべてのC言語のソースファイルとC++のソースファイルがコンパイルの対象になります。

そしてコンパイラとリンカを「g++」に変更します。コンパイラは「CC」オプション、リンカは「LD」で設定できます。

<pre>
use ExtUtils::MakeMaker;
use strict;
use warnings;

WriteMakefile(
    NAME              => 'SomeModule',
    VERSION_FROM      => 'lib/SomeModule.pm', # finds $VERSION
    PREREQ_PM         => {}, # e.g., Module::Name => 1.1
    ($] >= 5.005 ?     ## Add these new keywords supported since 5.005
      (ABSTRACT_FROM  => 'lib/SomeModule.pm', # retrieve abstract from module
       AUTHOR         => 'A. U. Thor <kimoto@sakura.ne.jp>') : ()),
    LIBS              => [''], # e.g., '-lm'
    DEFINE            => '', # e.g., '-DHAVE_SOMETHING'
    INC               => '-I.', # e.g., '-I. -I/usr/include/other'
    OBJECT            => '$(O_FILES)', # link all the C files too
    CC =>'g++',
    LD => 'g++',
);
</pre>

<h3>テストスクリプト</h3>

テストスクリプトを作成します。これは、XSファイルがあるディレクトリと同じディレクトリにおいてください。

<pre>
use strict;
use warnings;

use SomeModule;

SomeModule::foo();
</pre>

<h3>コンパイルして実行</h3>

コンパイルして実行してみましょう。

<pre>
perl Makefile.PL
make
perl -Mblib test.pl
</pre>

次のように出力されれば成功です。

<pre>
mylib_cpp
</pre>

これで、C++のライブラリをXSファイルから利用することができるようになりました。

<h3>FAQ</h3>

<h4>XSファイルの中に直接C++を記述することはできますか。</h4>

できます。けれども、Perlのシンボルと衝突してしまうなどの不具合が起こりがちですので、ソースファイルとヘッダファイルに記述するのがよいと思います。

<h4>C言語のライブラリとC++のライブラリを混在させて利用することはできますか。</h4>

C++はC言語のほぼ上位互換なので、C言語のライブラリがg++でコンパイル可能であれば大丈夫だと思います。そうでない場合は、ちょっとわかりません。

