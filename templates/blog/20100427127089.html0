<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>JSON - JSONデータを解析</h2>



<strong>JSONモジュール</strong>を使用すると、JSONデータを解析することができます。JSONはデータを記述するための言語で、配列やハッシュなどのデータ構造を表現することができます。JSONは単なる文字列ですので可搬性があります。他のプログラム言語とデータをやり取りした場合によく利用されます。

<pre>
# モジュールの読み込みと関数のインポート
use JSON qw/encode_json decode_json/;
</pre>

JSONをPerlのデータ構造に変換するには<strong>decode_json関数</strong>を使用します。

<pre>
# JSONをPerlのデータ構造に変換する
my $json_in = '[{"name" : "Ken", "age" : 19}, {"name" : "Ken", "age" : 25}]';

my $data = decode_json($json_in);
</pre>

これは次のようなPerlのデータ構造に変換されます。

<pre>
# JSON
'[{"name" : "Ken", "age" : 19}, {"name" : "Ken", "age" : 25}]'
</pre>
　　　　　　　　　　　　　　▼
<pre>
# Perl
[
  {
    'name' => 'Ken',
    'age' => 19
  },
  {
    'name' => 'Ken',
    'age' => 25
  }
];
</pre>

逆にPerlのデータ構造をJSONに変換するには<strong>encode_json関数</strong>を使用します。

<pre>
# Perlのデータ構造をJSONに変換する
my $json_out = encode_json($data);
</pre>

<h3>JSONモジュールでの日本語の扱い</h3>

JSONモジュールで日本語を扱うときは少し注意が必要です。次のことを覚えておく必要があります。

<ol>
  <li>
    decode_jsonは「UTF-8バイト文字列-JSON」から「内部文字列-Perlデータ」への変換を行う
  </li>
  <li>
    encode_jsonは「内部文字列-Perlデータ」から「UTF-8バイト文字列-JSON」への変換を行う
  </li>
</ol>

この関係を図示すると次のようになります。

<pre>
UTF-8バイト文字列-JSON     UTF-8バイト文字列-Perlデータ
                      \
encode_jsonは          \
左上への変換            \
                         \   decode_jsonは右下への変換
                          \
内部文字列JSON             内部文字列-Perlデータ
</pre>

左上から右下への変換がdecode_jsonによって行われ、右下から左上への変換がencode_jsonによって行われます。上下や左右への変換を行うメソッドは用意されていません。

たとえば間違いやすい例ですが次のように書くとうまくいきません。(日本語をスクリプトの中で扱うので、utf8プラグマを有効にして、スクリプトはUTF-8で保存しています。)

<pre>
# 日本語を扱うときのよくある間違い。decode_jsonはUTF-8バイト文字列を受け取る必要がある
use utf8;
use JSON 'decode_json';

my $json = '{"name" : "増田"}';

my $data = decode_json($json);
</pre>

これがうまくいかない理由は、utf8プラグマが有効になっているので$jsonはすでに内部文字列に変換されているからです。decode_jsonはバイト文字列を引数に取りますので、これではうまくいきません。Encodeモジュールのencode_utf8関数でUTF-8バイト文字列に変換する必要があります。

<pre>
# 日本語を扱う場合の正しい例
use utf8;
use JSON 'decode_json';
use Encode 'encode_utf8';

my $json = '{"name" : "増田"}';

# UTF-8バイト文字列に変換
$json = encode_utf8($json);

my $data = decode_json($json);
</pre>

<h3>ファイルに書かれたJSONを読み込む</h3>

JSONモジュールにはファイルを読み込む機能はありませんので、ファイルから読み込む方法を記載しておきます。

<pre>
# ファイルからJSONを読み込むサンプル
use JSON 'decode_json';

my $file = shift;

my $data = decode_json(get_content($file));

# ファイルの内容を取得する関数
sub get_content {
  my $file = shift;

  open my $fh, '<', $file
    or die "Can't open file \"$file\": $!";
  
  my $content = do { local $/; <$fh> };
 
  close $fh;

  return $content;
}
</pre>

