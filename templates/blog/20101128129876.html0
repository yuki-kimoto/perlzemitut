<script>location.href="https://mojolicious.perlzemi.com/blog/20101128129876.html";</script>
<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
      <span itemprop="name">Perl</span>
    </a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20140319139520.html">
      <span itemprop="name">Mojolicious</span>
    </a>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>Mojoliciousで自由に「URL」を生成するテクニック</h2>




<h3>URLを作成するための基本</h3>

<strong>url_for</strong>を使うと、URLを指定することができます。MojoliciousはCGIや組み込みWebサーバーなどの複数の環境で実行することができますがurl_forメソッドでURLを記述すると、どの環境でも実行できるURLを記述することができます。

<pre>
url_for('/user/register');
</pre>

またルート名を渡すと何ができるかというと、URLに含まれるパラメータを復元できます。す。

<pre>
get '/foo/bar/:id'; 

url_for('foobarid', id => 3); 
</pre>

<h3>Mojoliciousでクエリ文字列を含むURLを生成する</h3>

Mojoliciousでクエリ文字列を含むURLを生成するには<strong>query</strong>メソッドを使用します。

<pre>
<%= url_for('/path')->query(foo => 'a', bar => 'b') %>;
</pre>

<h3>リクエストURLを復元する</h3>

リクエストURLを復元するにはurl_forメソッドの引数に何も指定しないか、<strong>current</strong>を指定します。

<pre>
% my $url = url_for;
% my $url = url_for('current');
</pre>

「:id」などの記述でキャプチャされたURLも正しく復元されます。

<pre>
/entry/:id
</pre>

ただしクエリ文字列の部分は自動的に復元されないので、復元したい場合は<strong>url_with</strong>を使う必要があります。

<pre>
% my $url = url_with;
</pre>

<pre>
% $url->query([name => 'Ken', age => '19']);
</pre>

このようにすると、検索条件に対して、さらに絞り込んだ検索を簡単に記述することができます。

またqueryメソッドが値を設定する場合は、自身のMojo::URLオブジェクトを返却することを覚えておけば、次のように一行で記述することもできます。

<pre>
%= url_with->query([name => 'Ken', age => '19']);
</pre>

<h3>クエリ文字列の取り扱い</h3>

クエリ文字列を解析したい場合はMojo::Parametersのparseメソッドを使用します。

<pre>
$params->parse('foo=b%3Bar&baz=23');
</pre>

一般的な利用方法としてはurl_forメソッドでMojo::URLオブジェクトを生成した後に、Mojo::URLのqueryメソッドでMojo::Parametersオブジェクトを取得してからparseメソッドを使うことが多いでしょう。

次のようにするとURLにクエリ文字列を設定することができます。

<pre>
# テンプレートの中
% my $url = url_for('/search');
% $url->query->parse('title=perl&name=ken');
</pre>

<h4>クエリ文字列を置き換える</h4>

クエリ文字列を置き換えるには次のようにリスト形式で渡します。

<pre>
$url->query(name => 'taro', price => 1900);
</pre>

上記の例の場合は以下のように置き換わります。

<pre>
# 前
title=perl&name=ken

# 後
name=taro&price=1900
</pre>

<h4>クエリ文字列のマージ</h4>

クエリ文字列をマージするには配列のリファレンスとして渡します。
<pre>
$url->query([name => 'taro', price => 1900]);
</pre>

次のようにマージされます。値が同じものは置き換えられます。

<pre>
# 前
title=perl&name=ken

# 後
title=perl&name=taro&price=1900
</pre>

<h4>クエリ文字列の追加</h4>

クエリ文字列を追加するにはハッシュのリファレンスとして渡します。
<pre>
$url->query({name => 'taro', price => 1900});
</pre>

次のように追加されます。

<pre>
# 前
title=perl&name=ken

# 後
title=perl&name=ken&name=taro&price=1900
</pre>

<h3>リクエストのクエリ文字列を受け継いだURLを生成する - url_with</h3>

たとえば、検索条件は変更せずにページ番号だけを変更したいと思うときがよくあると思います。クエリ文字列の部分はそのまま使いたいのだけれど、一部の条件は変更したいという場合です。

このような場合は<strong>>url_with</strong>ヘルパーを使います。クエリ文字列を受け継ぐほかはurl_forと使い方は同じです。

<pre>
%= url_with '/foo'
</pre>

次のように記述すると、ページ番号だけ変更できます。

<pre>
%= url_with->query([page => 2])
</pre>

<h3>リバースプロキシを利用したときにホスト名、ポート番号、パスが正しく認識されるようにする</h3>

ApacheなどのWebサーバーをリバースプロキシにして、Mojoliciousアプリケーションにディスパッチするときに、そのままの設定では絶対URLを出力するredirecto_toで正しくURLが出力されません。たとえば以下のような設定を行ったとします。

<pre>
  <VirtualHost *:80>
    ServerName perlcodesample.com
    <Proxy *>
      Order deny,allow
      Allow from all
    </Proxy>
    ProxyRequests Off
    ProxyPreserveHost On

    ProxyPass /gitweblite http://localhost:10010/gitweblite keepalive=On
    ProxyPassReverse /gitweblite http://localhost:10010/gitweblite

    RequestHeader set X-Forwarded-Proto "https"
  </VirtualHost>
</pre>

注意点として、最近のLinuxはselinuxが有効になっているのですが、これが有効になっていると「Service Temporarily Unavailable」となって、Apacheからアプリケーションに接続ができません。設定を変えるかselinuxを無効にします。

<pre>
# /etc/selinux/config
SELINUX=disabled
</pre>

<h4>正しく認識させる方法</h4>

以下のような記述を追加しましょう。

<pre>
# アプリケーションクラス
sub starup {
  my $self = shift;
  
  # Reverse proxy support
  $ENV{MOJO_REVERSE_PROXY} = 1;
  $self->hook('before_dispatch' => sub {
    my $self = shift;
    
    if ( $self->req->headers->header('X-Forwarded-Host')) {
      my $prefix = shift @{$self->req->url->path->parts};
      push @{$self->req->url->base->path->parts}, $prefix;
    }
  });
}
</pre>

<h4>MOJO_REVERSE_PROXYの設定</h4>

環境変数のMOJO_REVERSE_PROXYを1に設定する必要があります。Mojolicious 5.0からは、X-Forwarded-Protoがあれば、自動的に認識されるようになっています。

<pre>
$ENV{MOJO_REVERSE_PROXY} = 1;
</pre>

(これを設定しても、元のアプリには何の影響もでません。)

<h4>フックを使ってリバースプロキシ経由のときのベースパスを書き換える</h4>

正しくディスパッチするために、/gitwebliteの部分が、ベースパスだということを教えてあげないといけません。

<pre>
$self->hook('before_dispatch' => sub {
  my $self = shift;
  
  if ( $self->req->headers->header('X-Forwarded-Host')) {
    my $prefix = shift @{$self->req->url->path->parts};
    push @{$self->req->url->base->path->parts}, $prefix;
  }
}
</pre>

これでホスト名とポート番号が正しくurl_forやredirect_toで出力されるようになります。この記述を行っても試験環境でスタンドアロンでアプリケーションを実行するときでも、特に悪影響はありません。

<h3>SSLのページでHTTPページへのリンクを作成したい場合</h3>

httpsでアクセスした場合に、そのページの中にルート相対パス(/app1)でURLを指定した場合は、次のようなURLだと解釈されてしまいます。https://yourhost.com/app1

SSLのページでHTTPのページへのリンクを張りたい場合は次のようにするとよいです。

<pre>
URL: <a href="<%= url_for('/foo')->to_abs->scheme('http') %>">Foo</a>
</pre>

url_forはMojo::URLオブジェクトを返却するので、絶対URLに変換してから、スキーマをhttpに変換します。

<pre>
url_for('/foo')->to_abs->scheme('http')
</pre>

このようにすることでSSLのページから簡単にhttpへのリンクを張ることができます。

<h3>HTTPページでSSLのページへのリンクを作成したい場合</h3>

HTTPページでSSLのページへのリンクを作成したい場合は次のようにするとよいです。

<pre>
URL: <a href="<%= url_for('/foo')->to_abs->scheme('https') %>">Foo</a>
</pre>

url_forはMojo::URLオブジェクトを返却するので、絶対URLに変換してから、スキーマをhttpsに変換します。

<pre>
url_for('/foo')->to_abs->scheme('https')
</pre>

このようにすることでSSLのページへのリンクを張ることができます。

<h3>url_forメソッドでSSHのURLを生成する</h3>

url_forメソッドはHTTPのURLだけではなくて、URLの構造を持つものであれば、何でも作ることができます。

では次のようなSSHのURLを作ってみましょう。

<pre>
ssh://kimoto@somehost.com:20000/foo/bar.git
</pre>

次のようにします。
<pre>
my $url = url_for('/foo/bar.git')->to_abs->scheme('ssh')
  ->userinfo('kimoto')->host('somehost.com')->port(20000);
</pre>

まずto_absメソッドで絶対URLに変換してから、schemeメソッドでプロトコルを、userinfoメソッドでユーザー名を、hostメソッドでホスト名、portメソッドでポート番号を設定します。

