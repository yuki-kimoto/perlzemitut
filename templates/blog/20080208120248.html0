<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>Data::Dumper - データをダンプする</h2>



<strong>Data::Dumper</strong>モジュールを使うと、<a href="/blog/20161013147635.html">ハッシュ</a>や<a href="/blog/20161012147627.html">配列</a>などの変数の内容を見やすい形で出力することができます。また<a href="/blog/20100930127859.html">リファレンス</a>を使用した複雑なデータ構造を見やすく出力することができます。

<pre>
use Data::Dumper;

# データをダンプ
my $dump_string = Dumper $data;
</pre>

Dumper関数を使用するとデータを見やすい文字列に変換することができます。Dumper関数は出力を行わないことに注意してください。

画面に出力に出力したい場合は、<a href="/blog/20170404149131.html">print関数</a>や<a href="/blog/20100213126425.html">warn関数</a>と組み合わせます。

<pre>
print Dumper $data;

warn Dumper $data;
</pre>

Data::Dumperのいくつかの例を紹介します。

<h4>スカラ変数を出力</h4>

<a href="/blog/20161107147852.html">スカラ変数</a>を出力します。

<pre>
my $name = 'kimoto';
print Dumper $name;
</pre>

<h4>配列を出力する</h4>

Dumperの引数には、配列のリファレンスを渡してください。

<pre>
my @nums = (1, 2, 3);
print Dumper \@nums;
</pre>

<h4>配列のリファレンスを出力する</h4>

<pre>
print Dumper [1, 2, 3];
</pre>

<h4>ハッシュを出力する</h4>

Dumperの引数には、ハッシュのリファレンスを渡してください。

<pre>
my %score = (math => 97, english => 80);
print Dumper \%score;
</pre>

<h4>ハッシュのリファレンスを出力する</h4>

<pre>
print Dumper {math => 97, english => 80};
</pre>

<h3>Data::Dumperに関するFAQ</h3>

Q. Data::Dumperで日本語を出力すると日本語ではなく16進数の記号のようなものになってしまうときがあるのですが、解決策はありますか。

A. それは内部文字列(※1)を出力しようとしているために起こっています。出力する文字列は内部文字列ではなくバイト文字列である必要あります。とはいえ、ハッシュや配列の中に含まれるすべての文字列をバイト文字列に変換することは大変だと思います。これを助けてくれる<a href="http://search.cpan.org/dist/Data-Recursive-Encode/lib/Data/Recursive/Encode.pm">Data::Recursive::Encode.pm</a>モジュールというものがCPANにありますので、Data::Dumperと組み合わせて利用してみるのもよいと思います。

※1 内部文字列とバイト文字列については<a href="/blog/20091118124667.html">Encodeモジュールの解説</a>をご覧ください。
