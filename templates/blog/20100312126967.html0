<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
      <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>eval - 例外のキャッチ、文字列の動的実行</h2>



<b>eval</b>関数を使用すると、ブロック構文の場合は、例外をキャッチすることができます。文字列構文の場合は、文字列を動的に実行することができます。

<pre>
# evalブロック - 例外のキャッチ
eval { ... };

#  eval文字列 - 文字列を動的に実行
eval $string;
</pre>

ブロックの構文と、文字列の構文は、機能がまったく異なるので注意してください。それぞれの構文について詳しく解説します。

<h3>例外のキャッチ - evalブロック</h3>

evalブロックと呼ばれている方は、<b>Perlにおける例外のキャッチの構文です。</b>

<pre>
# evalブロック - 例外のキャッチ
eval { ... };
</pre>

これは、Javaなどにおける例外処理のcatch構文と同じ役割を果たします。evalブロックの中で、例外が発生した場合に、例外をキャッチし、プログラムが終了するのを防ぐことができます。

例外の内容は<a href="/blog/20161102147817.html">特殊変数</a>「$@」に代入されているので、これをチェックしましょう。$@は、他の処理によって上書きされる可能性があるので、<a href="/blog/20161107147852.html">変数</a>に保存しておくことがお勧めです。

<pre>
if (my $error = $@) {
  print "$error\n";
}
</pre>

Perlの例外処理についての詳しい解説は以下の記事をご覧ください。

<ul>
  <li>
    <a href="/blog/20100411127089.html">Perlの例外処理の仕組みを理解しよう</a>
  </li>
</ul>

<h3>文字列の動的実行 - eval文字列</h3>

eval文字列と呼ばれる方は、文字列を動的に実行する構文です。<strong>evalに文字列を渡すとその文字列をPerlの実行文として実行します。</strong>実行時に発生したエラーは$@に格納されます。

<pre>
#  eval文字列 - 文字列を動的に実行
eval $string;
</pre>

ひとつの例として<a href="/blog/20101130129876.html">サブルーチン</a>を実行時に定義することができます。以下の例はfooという5を返すサブルーチンをeval文字列と<a href="/blog/20080614121342.html">型グロブ</a>を実行時に定義しています。「no string 'refs'」でシンボリックリファレンスを一時的に許可しています。

<pre>
{
  no strict 'refs';
  *{"foo"} = eval "sub { return 5 }";
}
</pre>

これはCPANモジュールで、アクセッサを作成するモジュールなどで、利用されています。

<h4>eval文字列の危険性</h4>

でも、普通のプログラミングでは、eval文字列を使わないことを推奨します。

evalは渡された文字列をそのまま実行してしまうのでセキュリティという観点で望ましくないです。業務でアプリケーションを作成する場合であれば、eval文字列は使う場面はまずありません。

CPANモジュール作成者が目標なら、eval文字列は、ぜひ知っておいてほしい知識です。
