<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20091116124667.html">
      <span itemprop="name">モジュール</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li>
    here
  </li>
</ol>
<h2>perlbrew - ユーザー環境にPerlをインストールする</h2>

ユーザー環境にPerlをインストールするにはperlbrewというツールを使用します。システム標準のPerlを利用したくない場合や新しいバージョンのPerlを利用したい場合は便利です。またperlbrewを使うと複数のバージョンのPerlの切り替えを行うことができます。

<h3>perlbrewのインストール</h3>

以下のコマンドを実行します。

<pre>
curl -L http://install.perlbrew.pl | bash
</pre>

もしcurlコマンドがなければ、以下のコマンドを実行してみてください。

<pre>
# Linux
wget -O - http://install.perlbrew.pl | bash

# FreeBSD
fetch -o- http://install.perlbrew.pl | sh
</pre>

cpanから二つの手順でインストールすることもできます。

<pre>
sudo cpan App::perlbrew
perlbrew init
</pre>

次にperlbrewのパスを通しましょう。perlbrewで用意されているbash用の設定ファイルを「~/.bashrc」に追加します(bashの場合)。

<pre>
echo "source ~/perl5/perlbrew/etc/bashrc" >> ~/.bashrc
</pre>

「.bashrc」を読み込みなおします。

<pre>
source  ~/.bashrc
</pre>

<h3>ユーザー環境へのPerlのインストール</h3>

ユーザー環境にPerlをインストールします。5.28.2のPerlをインストールしてみましょう。時間がかかるので待ちます(約30分程度)。

<pre>
perlbrew install perl-5.28.2
</pre>

インストールできない場合は、Perlのコンパイルに必要なツールが、まだインストールされていない可能性があります。以下のツールが必要になりますので、各環境に応じて、インストールしてください。

<ul>
  <li>make</li>
  <li>gcc</li>
  <li>patch</li>
</ul>

試験を強制的に飛ばして強制的にインストールしたい場合は「-n」オプションを使用します。

<pre>
perlbrew install -n perl-5.28.2
</pre>

利用できるPerlの一覧を見てみましょう。perlbrewのlistコマンドを使用します。

<pre>
perlbrew list
</pre>

以下のように利用できるPerlが表示されます。アスタリスクのあるものが現在利用しているPerlです。

<pre>
  perl-5.28.2
* /usr/bin/perl (5.8.8)
</pre>

Perlを切り替えるにはperlbrewのswitchコマンドを使用します。

<pre>
perlbrew switch perl-5.28.2
</pre>

Perlのバージョンを実際に確認してみましょう。

<pre>
perl -v
</pre>

以下のように5.28.2のバージョンになっています。

<pre>
This is perl 5, version 16, subversion 3 (v5.28.2) built for i686-linux
</pre>

<h3>cpanmのインストール</h3>

モジュールをインストールするのに便利なcpanmもインストールしておきましょう。
<pre>
perlbrew install-cpanm
</pre>

これで以下のコマンドでモジュールがインストールできるようになります。

<pre>
cpanm JSON
</pre>

モジュールは以下のディレクトリなどにインストールされます。

<pre>
/home/kimoto/perl5/perlbrew/perls/perl-5.28.2/lib/site_perl/5.28.2/
</pre>

<h3>元のPerlに戻す</h3>

元のPerlに戻すには以下のようにします。

<pre>
perlbrew off
</pre>

<h3>perlbrewで指定したバージョンのPerlをcrontabで使う方法</h3>

perlbrewのはまりどころのひとつは、perlbrewで指定したバージョンのPerlがcronからは利用されないということでしょう。これはcronから実行するときは、シェルが起動されないので.bash_profileが読み込まれないことが原因です。perlbrewによる設定は、.bash_profileの中に記述したからですね。

一番簡単な解決策は、crontabの中でPATHを、そのユーザーが持っている環境変数PATHの値に書き換えてあげることです。

まずperlbrewをインストールしたユーザーで、PATH環境変数の値を表示します。

<pre>
env | grep PATH
</pre>

PATHを含んだ環境変数がいくつか表示されるので、PATHというものを探します。(ユーザー名がadminsの場合の例です。)

<pre>
PATH=/home/admins/perl5/perlbrew/bin:/home/admins/perl5/perlbrew/perls/perl-5.16.2/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/home/admins/bin
</pre>

以下のコマンドでcrontabを編集します。
<pre>
crontab -e
</pre>

そして上記のPATHの値をcrontabの一番上に書き込みます。

<pre>
PATH=/home/admins/perl5/perlbrew/bin:/home/admins/perl5/perlbrew/perls/perl-5.16.2/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/home/admins/bin

# cronの設定が続く...
</pre>

これでcronが指定したバージョンのPerlを利用してくれるようになります。

<h4>Perlスクリプトの一行目の記述</h4>

Perlスクリプトの一行目の記述は以下のようenvコマンドを使った記述をしましょう。

<pre>
#!/usr/bin/env perl
</pre>

こうすると設定したPATHの値から自動的にperlを検出してくれます。

この方法は、見てのとおり、PATHをベタ書きしますので、crontabの移植性がまったくないです。ユーザー名のadminsが直接埋め込まれていますし、perlのバージョン番号がそのまま記述されているので、perlbrewでバージョンを変更したときは、動かなくなります。

でもこの方法が一番よいと思います。その理由はcrontab内では、環境変数の変数展開ができないという制限があるので、うまく移植性を持たせることが難しいということが理由です。移植性を持たせると、記述量が多くなったり、追加のスクリプトが必要になったり、管理が煩雑になってしまいます。

それとどんなにがんばっても、crontabって環境ごとに、何らかの差分があることがほとんどなので、移植性を保たせてもあんまりメリットがないということもあります。

