<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">ソケット</span>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>ソケットによる通信を行う</h2>




Perlの「ソケット」に関する解説です。

<h4>4. プロトコル番号の指定</h4>

socket関数の第4引数には<b>プロトコル番号</b>を指定します。

<pre>
socket($sock, PF_INET, SOCK_STREAM, getprotobyname('tcp'))
</pre>

プロトコルといってもHTTPやFTPなどのアプリケーション階層のプロトコルではなくて、TCP、UDPなどの<b>トランスポート層のプロトコルを番号で指定</b>します。

プロトコル名からプロトコル番号を取得するには、<b>getprotobyname</b>関数を使用します。OSに存在するプロトコル名とプロトコル番号の対応を示すファイルを参照して、プロトコル名からプロトコル番号を取得します。プロトコル名は小文字で指定します。

プロトコル名とプロトコル番号の対応を示すファイルはWindowsの場合は

<pre>
C:\WINDOWS\system32\drivers\etc\protocol
</pre>

にあります。Unix系OSの場合は、

<pre>
/etc/protocols
</pre>

にあると思います。(Fedora7で確認)

これらのファイルの中身は

<pre>
# <protocol name>  <assigned number>  [aliases...]   [#<comment>]
ip       0     IP       # Internet protocol
icmp     1     ICMP     # Internet control message protocol
ggp      3     GGP      # Gateway-gateway protocol
tcp      6     TCP      # Transmission control protocol
egp      8     EGP      # Exterior gateway protocol
pup      12    PUP      # PARC universal packet protocol
udp      17    UDP      # User datagram protocol
hmp      20    HMP      # Host monitoring protocol
xns-idp  22    XNS-IDP  # Xerox NS IDP
rdp      27    RDP      # "reliable datagram" protocol
rvd      66    RVD      # MIT remote virtual disk
</pre>
のようになっています。

<h4>5. エラー処理</h4>

エラー処理を行っておいたほうが無難です。

<pre>
socket($sock, PF_INET, SOCK_STREAM, getprotobyname('tcp'))
  or die "Cannot create socket: $!";
</pre>

socket関数は失敗するとundefを返して $! にエラー内容を設定します。

<h4>6. ソケットの学習のコツ</h4>

ソケットを使えるようになるには、かなりの努力が必要です。ソケットの作成だけを見ても理解しなければならないことが多いということがわかります。ソケットを覚えるこつは何回もタイピングすることです。見ているだけではどうやっても覚えられません。

<h3>ソケットの接続先の情報を作成する</h3>

ソケットの接続先の情報の作成について解説します。エコーサーバのサンプルのクライアント側のプログラムの以下の部分です。

<pre>
# 2. ソケット情報の作成

# 接続先のホスト名
my $remote_host = 'localhost';
my $packed_remote_host = inet_aton($remote_host)
  or die "Cannot pack $remote_host: $!";

# 接続先のポート番号
my $remote_port = 9000; 

# ホスト名とポート番号をパック
my $sock_addr = sockaddr_in($remote_port, $packed_remote_host)
  or die "Cannot pack $remote_host:$remote_port: $!";
</pre>


ソケットを使ってサーバに接続するのですが、そのときに<b>接続先のサーバの情報</b>が必要になります。

<h4>1. 接続先のホスト名あるいはIPアドレス</h4>

まず必要になるのは接続先の<b>ホスト名あるいはIPアドレス</b>です。インターネットでは、コンピュータを一意に識別するためにIPアドレスが使用されます。またそれに対応するホスト名を持っているのが一般的です。ホスト名かIPアドレスのどちらかが利用できます。

<pre>
# 接続先のホスト名
my $remote_host = 'localhost';
</pre>

あるいは

<pre>
my $remote_host = '127.0.0.1';
</pre>

127.0.0.1は<b>ループバックアドレス</b>と呼ばれるもので、localhostというのは、ループバックアドレスに対応するホスト名です。ループバックアドレスというのは自分自身指し示す仮想的なアドレスのことです。

ループバックアドレスを使用すると、まるでネットワークを通して自分自身と通信しているような効果が得られます。ローカルの環境でサーバとクライアントの試験を行いたいのでこのようなことをしています。

実際にインターネットを通して通信するときは、サーバのコンピュータのIPアドレスかホスト名を指定します。

<h4>2. 文字列のホスト名をバイナリ形式に変換する</h4>

ホスト名あるいはIPアドレスは<b>文字列のままでは利用できません</b>。<b>inet_aton</b>関数を使用してバイナリ形式に変換する必要があります。

inet_atonに与えられた文字列がホスト名だった場合は対応するIPアドレスに変換されてからさらに、IPアドレスを表現するバイナリ形式に変換されます。

<pre>
my $packed_remote_host = inet_aton($remote_host)
  or die "Cannot pack $remote_host: $!";
</pre>

atonのaはasciiという意味で、nはnetworkという意味です。バイナリ形式というのを正確にいうと<b>ネットワークバイトオーダで表現された4バイトの数値</b>です。

<h4>3. ポート番号</h4>

IPアドレスやホスト名がコンピュータを一意に識別するものであるのに対し、ポート番号はそのコンピュータの中で動く<b>アプリケーションを識別</b>するのに使用されます。

<pre>
# 接続先のポート番号
my $remote_port = 9000;
</pre>

ポート番号は0～65535まで使用できます。ただし、0～1023は一般的なポート番号なので、1024～65535を使うようにします。クライアントとサーバで通信するには、同じポート番号を使用するようにします。

<h4>4. ポート番号とIPアドレスをひとまとめにする</h4>

次にポート番号とIPアドレスをsockaddr_in関数を使ってひとまとめにする必要があります。

<pre>
# ホスト名とポート番号をパック
my $sock_addr = sockaddr_in($remote_port, $packed_remote_host)
  or die "Cannot pack $remote_host:$remote_port: $!";
</pre>

第1引数にポート番号、第2引数にバイナリ形式に変換されたIPアドレスです。このようにして作成した $sock_addr が接続のためのconnect関数の引数に渡されることになります。

<h3>サーバに接続する - connect関数</h3>

サーバへ接続するにはconnect関数を使用します。

<pre>
# 3. ソケットを使って接続
connect( $sock, $sock_addr )
  or die "Cannot connect $remote_host:$remote_port: $!";
</pre>

<h4>サーバに接続する</h4>

サーバに接続するにはconnect関数を使用します。第1引数は、socket関数で作成したソケットです。

第2引数は「sockaddr_in」関数で作成した接続先のポート番号とIPアドレスの情報]です。

この2つを引数に与えてconnect関数を呼び出すと、$sockは<b>読み書き可能なソケット</b>になります。$sockを使ってサーバとデータのやり取りを行うことができます。

