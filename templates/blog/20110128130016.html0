<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">スコープ</span>
    <meta itemprop="position" content="2" />
  </li>
</ol>
<h2>Perlのスコープについて理解しよう</h2>



Perlのスコープについて理解を深めましょう。この記事はstrictプラグマを有効にした前提で書いていますので、ソースコードの先頭には普段どおり以下のように書いてくださいね。

<pre>
use strict;
use warnings;
</pre>

<h3>スコープの作成</h3>

Perlのスコープは「{」で始まり「}」で終わります。

<pre>
{
  # スコープ
}
</pre>

<h3>スコープの意味</h3>

<h4>レキシカル変数</h4>

スコープの中で宣言されたレキシカル変数(myで宣言された変数)は、そのスコープ内でしか参照することができません。また変数に含まれる値はスコープが終わった時点で解放されます。

<pre>
{
  my $num = 1;

  # 参照できる
  print $num;
}

# この位置では参照できない
print $num;
</pre>

<h4>パッケージ変数</h4>

スコープの内部で宣言されたパッケージ変数(ourで宣言された変数)は、そのスコープの中では部分名で参照できます。スコープの外から参照するには完全修飾名を使用する必要があります。

<pre>
package Foo;

{
  our $NUM = 1;

  # 部分名で参照できる
  print $NUM;
}

# 部分名では参照できない
print $NUM;

# 完全修飾名で参照できる
print $Foo::NUM;
</pre>

パッケージ変数は一度作成されればプログラムの最後まで存在し、プログラムのどの位置からでも完全修飾名で参照できるということを覚えておきましょう。

<h4>localで変更されたパッケージ変数</h4>

<a href="/blog/20080309120507.html">local</a>を使うとパッケージ変数を一時的に変更することができます。この変更された値は、スコープの最後で元に戻ります。

<pre>
package Foo;

our $NUM = 1;

{
  local $NUM = 2;

  # 2が出力される
  print $NUM;
}

# この位置では1に戻る
print $NUM;
</pre>

localは、パッケージ変数の値の一時的な変更にだけ利用して、昔のように変数宣言には使わないようにしましょう。

<h4>サブルーチン</h4>

Perlのサブルーチンはスコープの影響を受けません。

<pre>
{
  sub foo {
    ...
  }

  # 呼び出しが可能
  foo();
}

# 呼び出しが可能
foo();
</pre>

サブルーチンは定義された時点で、シンボルテーブルと呼ばれるものに登録され、プログラムのすべての位置から呼び出せるようになります。

サブルーチンにスコープを持たせたい場合は、無名サブルーチン(これはサブルーチンのリファレンス)をレキシカル変数に代入します。

<pre>
{
  my $foo = sub { ... };

  # 呼び出しが可能
  $foo->();
}

# この位置らからは呼び出すことができない
$foo->();
</pre>

スコープの終わりで$fooに代入されているサブルーチンのリファレンスが解放されます。サブルーチン自体が解放されるわけではないということに注意しましょう。sub { ...}は、コンパイルの時点で、解析されてメモリ上に配置されます。

<h3>if文やwhile文におけるスコープ</h3>

if文や<a href="/blog/20100123126425.html">while文</a>などで利用される「{}」もスコープです。Perlではありとあらゆる構文で使用される「{}」がスコープになります。この点では一貫しており、他の言語と比較してとてもわかりやすいものになっています。

<pre>
if (条件) {
  # スコープ
}

while (条件) {
  # スコープ
}

eval {
  # スコープ
};

sub {
  # スコープ
}
</pre>

(参考)<a href="/blog/20100312126967.html">eval</a>

またファイルもひとつのスコープを持ちます。

<pre>
use strict;
use warnings;

# 処理
</pre>

上記は以下のようにファイルの先頭と終わりが「{」と「}」で囲まれているものと考えることができます。

<pre>
{
  use strict;
  use warnings;

  # 処理
}
</pre>

<h3>特殊な位置で宣言されたレキシカル変数</h3>

スコープの内部では宣言されてはいないけれども、スコープを持つ場合がいくつかあります。

<h4>ifの条件部</h4>

ifの条件部で宣言されたレキシカル変数は、ifのスコープを持ちます。

<pre>
if (my $num = 1) {
  # 参照できる
  print $num;
}

# この位置では参照できない
print $num;
</pre>

後置されるifについてはそもそもスコープがないので、スコープを持ちません。

<pre>
文 if my $num = 1;

# 参照することができる
print $num;
</pre>

unless文や<a href="/blog/20100123126425.html">while文</a>についても同じです。

<pre>
# unless
unless (my $num = 1) {
  # 参照できる
  print $num;
}

# 参照できない
print $num;
</pre>

<pre>
# while
while (my $num = 1) {
  # 参照できる
  print $num;
}

# 参照できない
print $num;
</pre>

<h4>forの条件部</h4>

forの条件部で宣言されたレキシカル変数はforのスコープを持ちます。

<pre>
for (my $i = 0; $i < @nums; $i++) {
  # 参照できる
  print $i;
}

# 参照できない
print $i;
</pre>

<h4>forの変数の代入部</h4>

forの変数の代入部で宣言されたレキシカル変数はforのスコープを持ちます。

<pre>
for my $num (@nums) {
  # 参照できる
  print $num;
}

# 参照できない
print $num;
</pre>

<h4>終わりに</h4>

これだけ覚えておけばPerlのスコープで困ることはないでしょう。Perlのスコープは直感的でわかりやすいものだということがわかると思います。これはPerlのプログラムの構造を見やすいものにするのにとても役立っています。

