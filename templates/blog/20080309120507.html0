<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161022147731.html">
      <span itemprop="name">構文</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">here</span>
    <meta itemprop="position" content="3" />
  </li>
</ol>
<h2>local - パッケージ変数を一時的に退避して復元</h2>

<b>local</b>を使うと、パッケージ変数を一時的に変更することができます。

<pre>
local 変数名 = 値；
</pre>

値が指定されなかった場合は、<a href="/blog/20100220126425.html">未定義値</a>が設定されます。

<h3>値の保存と復元</h3>

localを使って値を代入すると、<a href="/blog/20110128130016.html">スコープ</a>の終わりで以前の値が復元されます。

<pre>
our $NUM = 5;
{
  local $NUM = 3;
}
# ここでは「$NUM」は「元の値」である「5」に戻る
</pre>

localによって変更されたパッケージ変数は、<a href="/blog/20110128130016.html">スコープ</a>の最後で復元されます。

初期化を行わなかった場合は、変数の値の初期値は、未定義値になります。

<pre>
local $NUM;
</pre>

localは、<a href="/blog/20080308120495.html">ourで宣言されたパッケージ変数</a>が対象であって、<a href="/blog/20080307120491.html">myで宣言されたレキシカル変数</a>には利用できないことに注意してください。

<pre>
# コンパイルエラー
my $num;
local $num;
</pre>

ただし例外があって、<a href="/blog/20161012147627.html">配列</a>の値と<a href="/blog/20161013147635.html">ハッシュ</a>の値には使用することができます。

<pre>
my @nums = (1, 2, 3);
local $nums[1];

my %score = (math => 90, english => 70);
local $score{math};
</pre>

<h3>特殊変数に対するlocal</h3>

Perlで最もよくlocalを使う場面は「$/」や「%ENV」や「@ARGV」などの、<a href="/blog/20161102147817.html">特殊変数</a>に対してです。

localはパッケージ変数を対象としますが、実は特殊変数は、mainという<a href="/blog/20100419127089.html">パッケージ</a>に属しています。

ですので、特殊変数に対しても、localを使用できます。

<pre>
local $/;
local $ENV{HOME};
local @ARGV;
</pre>

<h3>変数宣言にはmyを使う</h3>

<a href="/blog/20160225145640.html">Perl 5.0</a>以降のPerlには「my」による変数宣言が導入されていて、lcoalによって変数を宣言する必要性はほとんどなくなっています。ほぼすべての変数宣言は「my」を使うようにしましょう。

<pre>
# 変数宣言
my $num;
</pre>

<h3>myとlocalの違い</h3>

localは、名前の期待に反して、変数宣言ではありません。ダイナミックなスコープを持ちます。

他の言語でいうローカル変数とはPerlにおけるmyを使ったレキシカル変数のことです。

<table>
  <tr>
    <th>
      local
    </th>
    <th>
      my
    </th>
  </tr>
  <tr>
    <td>
      変数宣言ではない
    </td>
    <td>
      変数宣言である
    </td>
  </tr>
  <tr>
    <td>
      値を保存・復元する
    </td>
    <td>
      変数を宣言する
    </td>
  </tr>
  <tr>
    <td>
      ダイナミックスコープを持つ
    </td>
    <td>
      レキシカルスコープを持つ
    </td>
  </tr>
</table>

<h3>ファイルの内容を一度に読み込む</h3>

localを自発的に使う場面は、あまりありませんが、使う場面があります。それは、ファイルの内容を一度に読み込むという処理を記述する場合です。

ファイルの内容を一度に読み込む処理を記述してみます。

<pre>
my $file = 'a.txt';
open my $fh, '<', $file
  or die "Can't open $file: $!";

# ファイルの内容を一度に読み込む
my $content = do { local $/; <$fh> };
</pre>

<a href="/blog/20090208123289.html">doブロック</a>は最後に評価された値を返すものです。

localによって、ファイルの中での改行を表す<a href="/blog/20161102147817.html">特殊変数</a>「$/」を未定義にしています。

これによって<a href="/blog/20080722121673.html">ファイル入力演算子</a>「<$fh>」が、ファイル全体の内容を返すようにしています。

そして、スコープが終わると「$/」は元の状態に戻ります。

ファイルを一度に読むこむ関数を標準で持たないPerlでは、このようにしてファイル全体の内容を読み込むことがあるということを覚えておきましょう。

<h3>localのサンプルプログラム</h3>

localを使って、特殊変数を一時的に変更するサンプルです。特殊変数はmainパッケージに属するパッケージ変数です。

<pre>
{
    # 特殊変数$/の一時的な変更
    local $/ = undef;
}
# スコープを抜けると元の値が復元される
</pre>

localを理解するためのサンプルです。

<pre>
use strict;
use warnings;

# localの説明

our $NUM = 1;
print "\$NUM = $NUM\n";

# $NUM の完全修飾名は、$main::NUM で、mainパッケージに属する。
# ( Perlでは、どんな変数もグローバル変数にはならない 
# Perlには、レキシカル変数とパッケージ変数しか存在しない。)

print "\$main::NUM = $main::NUM\n";
print "\n";

{ 
  # レキシカルスコープの内部で「$NUM」の値を一時的に変更
  local $NUM = 2; 

  print "In scope\n";
  
  # 2を出力
  print "\$NUM = $NUM\n"; 
}
print "\n";

# 1を出力 
print "Out of scope\n";
print "\$NUM = $NUM\n"; 
</pre>

