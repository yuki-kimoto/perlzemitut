<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161030147778.html">
      <span itemprop="name">オブジェクト指向</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">base</span>
    <meta itemprop="position" content="4" />
  </li>
</ol>
<h2>baseモジュールを使ってクラスを継承する</h2>



@ISAを使用したクラスの継承を解説しました。けれども、この方法は何かパッケージ変数を触っているので、ほかの言語で継承の構文を学んだ人から見るとどこか変な感じです。

もうすこし、継承を表現するわかりやすい方法があります。それは、<a href="/blog/20100425127089.html">baseモジュール</a>を使用する方法です。

<h3>baseモジュール</h3>

Perlの継承は@ISAを使うよりも、baseモジュールを使うほうが良いです。baseモジュールは内部では、 @ISA を触って同じことをしますが、@ISAを触っていることを隠蔽してくれます。

またコンパイル時に@ISAを操作するので、ひとつのスクリプトにクラスの定義とオブジェクトの生成を書く場合に便利です。

では@ISAを使った継承をbaseを使って書き直してみます。

<pre>
use strict;
use warnings;

# ボタンクラスを使用する。
my $button = Button->new;
print $button->x;


# コンポーネントクラス
package Component;
sub x { return 5 }

# ボタンクラス
package Button;
# 継承
use base 'Component'; 

sub new { bless {}, 'Button' }
</pre>

use base と記述して引数に継承したいクラス名を渡します。コンパイル時にuse base が実行されるため

<pre>
my $button = Button->new;
</pre>

を上側に書いても問題ありません。ここからのサンプルは、baseモジュールを使って書いていきたいと思います。

