<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161005147566.html">
      <span itemprop="name">演算子</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
      <span itemprop="name">here</span>
  </li>
</ol>
<h2>デリファレンス</h2>



デリファレンスとは<a href="/blog/20100930127859.html">リファレンス</a>を作成するのと反対の操作で、リファレンスから実体を取り出すことができます。

<h4>配列のリファレンスをデリファレンス</h4>

<a href="/blog/20180214151861.html">配列のリファレンス</a>をデリファレンスするには「@{}」を使用します。

<pre>
my @array = @{$array_ref};
</pre>

新しい<a href="/blog/20161012147627.html">配列</a>が作られるわけではなく、実体が取り出されているということを意識してください。

「@{}」の内側が単純な<a href="/blog/20161107147852.html">変数</a>の場合は「{}」を省略することができます。

<pre>
my @array = @$array_ref;
</pre>

配列のリファレンスをデリファレンスするサンプルプログラムです。

<pre>
# 配列のリファレンス
my $nums_ref = [1, 2, 3];

# デリファレンス
my @nums = @$nums_ref;
</pre>

Perlの配列操作を行う<a href="/blog/20161004147558.html">標準関数</a>は、配列のリファレンスではなく、配列を渡す必要があります。このような場合は、デリファレンスして、関数に渡してください。

<pre>
my $nums = [1, 2, 3];

my $num = shift @$nums;
</pre>

<ul>
  <li>
    <a href="/blog/20100106126425.html">pop関数</a>
  </li>
  <li>
    <a href="/blog/20100107126425.html">push関数</a>
  </li>
  <li>
    <a href="/blog/20100104126425.html">shift関数</a>
  </li>
  <li>
    <a href="/blog/20100105126425.html">unshift関数</a>
  </li>
  <li>
    <a href="/blog/20080127120141.html">splice関数</a>
  </li>
</ul>

<h4>ハッシュのリファレンスをデリファレンス</h4>

<a href="/blog/20180208151809.html">ハッシュのリファレンス</a>のデリファレンスを行うには「%{}」を使用します。

<pre>
my %hash = %{$hash_ref};
</pre>

新しい<a href="/blog/20161013147635.html">ハッシュ</a>が作られるわけではなく、実体が取り出されているということを意識してください。

「%{}」の内側が単純な変数の場合は「{}」を省略することができます。

<pre>
my %hash = %$hash_ref;
</pre>

ハッシュのリファレンスをデリファレンスするサンプルプログラムです。

<pre>
# ハッシュのリファレンス
my $score_ref = {math => 19, english => 89};

# デリファレンス
my %score = %$score_ref;
</pre>

Perlのハッシュ操作を行う標準関数は、ハッシュのリファレンスではなく、ハッシュを渡す必要があります。このような場合は、デリファレンスして、関数に渡してください。

<pre>
my $score = {math => 89, english => 45};

my @keys = keys %$score;
</pre>

<ul>
  <li>
    <a href="/blog/20080210120265.html">keys関数</a>
  </li>
  <li>
    <a href="/blog/20100222126425.html">values関数</a>
  </li>
  <li>
    <a href="/blog/20080212120283.html">each関数</a>
  </li>
  <li>
    <a href="/blog/20080214120300.html">delete関数</a>
  </li>
  <li>
    <a href="/blog/20080213120291.html">exists関数</a>
  </li>
</ul>

<h4>スカラ変数のリファレンスをデリファレンス</h4>

<a href="/blog/20161107147852.html">スカラ変数</a>のリファレンスのデリファレンスを行うには「${}」を使用します。

<pre>
my $scalar = ${$scalar_ref};
</pre>

「${}」の内側が単純な変数の場合は「{}」を省略することができます。

<pre>
my $scalar = $$scalar_ref;

</pre>

スカラのリファレンスをデリファレンスするサンプルプログラムです。

<pre>
# スカラのリファレンス
my $string1 = "Hello";

my $string_ref = \$string;

# デリファレンス
my $string2 = $$string_ref;
</pre>

<h4>他のリファレンスのデリファレンスはできるの?</h4>

<a href="/blog/20080704121518.html">サブルーチンのリファレンス</a>と<a href="/blog/20080419120860.html">正規表現のリファレンス</a>は、デリファレンスすることができません。
