<ol class="bread" itemscope itemtype="http://schema.org/BreadcrumbList">
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/">
        <span itemprop="name">Perl</span></a>
    <meta itemprop="position" content="1" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    <a itemprop="item" href="/blog/20161004147558.html">
        <span itemprop="name">標準関数</span></a>
    <meta itemprop="position" content="2" />
  </li>
  &#8250;
  <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
    here
  </li>
</ol>
<h2>opendir関数 - ディレクトリをオープンする</h2>



<b>opdndir</b>関数を使うと、ディレクトリをオープンしてディレクトリハンドルを取得することができます。

<pre>
opendir ディレクトリハンドル ディレクトリ名
</pre>

ディレクトリハンドルには、未定義の変数を指定します。<b>opendir</b>関数は、以下のように使用します。

<pre>
# ディレクトリ名
my $dir = 'study';

# ディレクトリオープン
opendir my $dh, $dir
  or die "Can't open directory $dir: $!"
</pre>

第一引数には、未定義の変数を指定しますが<a href="/blog/20161107147852.html">myによる変数宣言</a>を同時に行っています。第二引数はディレクトリ名を指定しています。

もしディレクトリのオープンが失敗した場合は偽が返りますので、エラー処理をする必要があります。<a href="/blog/20100816136168.html">or演算子</a>を使って、失敗した場合の処理を記述します。

<a href="/blog/20100212126425.html">die関数</a>で例外を発生させてプログラムを終了させます。

<a href="/blog/20161102147817.html">「$!」という特殊変数</a>には、ディレクトリオープンに失敗した理由が代入されているので、エラーメッセージに含めるようにしましょう。

<!--
<h4>ディレクトリの内容を読み込むには?</h4>

ディレクトリの内容を実際に読み込むにはreaddir関数を使用します。readdir関数については、以下で解説しています。

<ul>
  <li>
    ->
  </li>
</ul>

<h4>ディレクトリハンドルをクローズするには?</h4>

ディレクトリハンドルは、<a href="/blog/20110128130016.html">スコープ</a>が終われば自動的に開放されるので、明示的にクローズする必要はありません。これは、ディレクトリハンドルへの参照がなくなった時点で、デストラクタが実行されるためです。

<pre>
{
  # ディレクトリ名
  my $dir = 'study';

  # ディレクトリオープン
  opendir my $dh, $dir
    or die "Can't open directory $dir: $!"
}

# スコープが終わると自動的にディレクトリハンドルが閉じられる
</pre>

明示的にディレクトリハンドルをクローズしたい場合は<a href="/blog/20171001150694.html">closedir関数</a>を使用します。

<pre>
closedir $dh;
</pre>
